<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不练剑的温不胜</title>
  
  <subtitle>这是一个流行离开的世界,但是我们都不擅长告别</subtitle>
  <link href="https://halely.github.io/atom.xml" rel="self"/>
  
  <link href="https://halely.github.io/"/>
  <updated>2025-09-15T07:18:53.493Z</updated>
  <id>https://halely.github.io/</id>
  
  <author>
    <name>haleLy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MCP模型上下文协议学习与配置</title>
    <link href="https://halely.github.io/2025/08/21/MCP%E6%A8%A1%E5%9E%8B%E4%B8%8A%E4%B8%8B%E6%96%87%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0/"/>
    <id>https://halely.github.io/2025/08/21/MCP%E6%A8%A1%E5%9E%8B%E4%B8%8A%E4%B8%8B%E6%96%87%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0/</id>
    <published>2025-08-21T10:30:00.000Z</published>
    <updated>2025-09-15T07:18:53.493Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在 AI 开发过程中，模型上下文协议（Model Context Protocol，简称 MCP）为我们提供了强大的工具集成能力。通过 MCP，我们可以让 AI 助手访问各种外部工具和服务，大大提升开发效率。本文记录 MCP 的配置和使用经验。</p><h1 id="什么是-MCP"><a href="#什么是-MCP" class="headerlink" title="什么是 MCP"></a>什么是 MCP</h1><p>MCP（Model Context Protocol）是一种标准化协议，允许 AI 模型与外部工具和服务进行交互。通过 MCP 服务器，AI 可以执行文件操作、网络请求、数据库查询等复杂任务。</p><h1 id="MCP-服务配置"><a href="#MCP-服务配置" class="headerlink" title="MCP 服务配置"></a>MCP 服务配置</h1><h2 id="文本编辑器服务"><a href="#文本编辑器服务" class="headerlink" title="文本编辑器服务"></a>文本编辑器服务</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mcpServers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;textEditor&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npx&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;-y&quot;</span><span class="punctuation">,</span> <span class="string">&quot;mcp-server-text-editor&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>功能</strong>：提供文件读写、编辑功能<br><strong>用途</strong>：代码修改、文档编辑、配置文件更新</p><h2 id="DeepWiki-知识库"><a href="#DeepWiki-知识库" class="headerlink" title="DeepWiki 知识库"></a>DeepWiki 知识库</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mcpServers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;DeepWiki&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npx&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;mcp-remote&quot;</span><span class="punctuation">,</span> <span class="string">&quot;https://mcp.deepwiki.com/sse&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>功能</strong>：访问技术文档和知识库<br><strong>用途</strong>：技术查询、最佳实践获取、概念解释</p><h2 id="桌面命令执行器"><a href="#桌面命令执行器" class="headerlink" title="桌面命令执行器"></a>桌面命令执行器</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mcpServers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;desktop-commander&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npx&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;-y&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;@smithery/cli@latest&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;run&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;@sondotpin/desktopcommandermcp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;--key&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;2a89e84d-c4d7-4fb0-82b5-4fb06449f09d&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>功能</strong>：执行系统命令、文件操作<br><strong>用途</strong>：项目构建、测试运行、文件管理</p><h2 id="任务管理器"><a href="#任务管理器" class="headerlink" title="任务管理器"></a>任务管理器</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mcpServers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;mcp-shrimp-task-manager&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npx&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;mcp-shrimp-task-manager&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>功能</strong>：任务拆解和依赖管理<br><strong>用途</strong>：项目规划、进度跟踪、任务协调</p><h2 id="用户交互工具"><a href="#用户交互工具" class="headerlink" title="用户交互工具"></a>用户交互工具</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mcpServers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;cunzhi&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:\\cunzhi\\寸止.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;env&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="MCP-集合网站网址"><a href="#MCP-集合网站网址" class="headerlink" title="MCP 集合网站网址"></a>MCP 集合网站网址</h1><p><strong>MCP Servers 市场</strong>：<a href="https://lobehub.com/zh/mcp">https://lobehub.com/zh/mcp</a><br><strong>Open-Source MCP servers</strong>：<a href="https://glama.ai/mcp/servers">https://glama.ai/mcp/servers </a><br><strong>Smithery.ai</strong>：<a href="https://smithery.ai/">https://smithery.ai/</a></p><h1 id="MCP-工作流程"><a href="#MCP-工作流程" class="headerlink" title="MCP 工作流程"></a>MCP 工作流程</h1><p><strong>功能</strong>：用户确认和反馈<br><strong>用途</strong>：关键节点确认、用户交互</p><h2 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h2><ol><li><strong>研究阶段</strong>：使用 DeepWiki 获取技术背景</li><li><strong>构思阶段</strong>：结合知识库设计方案</li><li><strong>计划阶段</strong>：使用任务管理器拆解任务</li><li><strong>执行阶段</strong>：通过文本编辑器和命令执行器实现</li><li><strong>评审阶段</strong>：验证功能完整性</li></ol><h2 id="工具协同"><a href="#工具协同" class="headerlink" title="工具协同"></a>工具协同</h2><ul><li><strong>代码编辑</strong>：textEditor + desktop-commander</li><li><strong>知识查询</strong>：DeepWiki + 技术文档</li><li><strong>任务管理</strong>：mcp-shrimp-task-manager</li><li><strong>用户交互</strong>：cunzhi 确认关键节点</li></ul><h1 id="配置注意事项"><a href="#配置注意事项" class="headerlink" title="配置注意事项"></a>配置注意事项</h1><h2 id="路径配置"><a href="#路径配置" class="headerlink" title="路径配置"></a>路径配置</h2><ul><li>确保可执行文件路径正确</li><li>检查环境变量设置</li><li>验证网络连接（远程服务）</li></ul><h2 id="权限设置"><a href="#权限设置" class="headerlink" title="权限设置"></a>权限设置</h2><ul><li>文件读写权限</li><li>系统命令执行权限</li><li>网络访问权限</li></ul><h1 id="实际应用场景"><a href="#实际应用场景" class="headerlink" title="实际应用场景"></a>实际应用场景</h1><h2 id="项目开发"><a href="#项目开发" class="headerlink" title="项目开发"></a>项目开发</h2><ol><li>需求分析 → DeepWiki 查询技术方案</li><li>任务规划 → task-manager 拆解任务</li><li>代码实现 → textEditor 编写代码</li><li>测试验证 → desktop-commander 运行测试</li><li>用户确认 → cunzhi 获取反馈</li></ol><h2 id="文档编写"><a href="#文档编写" class="headerlink" title="文档编写"></a>文档编写</h2><ul><li>使用 textEditor 创建和编辑文档</li><li>通过 DeepWiki 获取参考资料</li><li>desktop-commander 进行文件管理</li></ul><h2 id="系统维护"><a href="#系统维护" class="headerlink" title="系统维护"></a>系统维护</h2><ul><li>批量文件操作</li><li>自动化脚本执行</li><li>配置文件更新</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>MCP 为 AI 开发提供了强大的工具集成能力，通过合理配置和使用这些服务，可以大大提升开发效率。关键是要理解每个工具的特点，在合适的场景下使用合适的工具，形成高效的工作流程。</p><p>在实际使用中，建议：</p><ol><li>熟悉各工具的功能边界</li><li>建立标准化的工作流程</li><li>注意安全性和权限控制</li><li>定期更新和维护配置</li></ol><p>通过 MCP，我们可以让 AI 助手真正成为开发过程中的得力助手。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在 AI 开发过程中，模型上下文协议（Model Context Protocol，简称 MCP）为我们提供了强大的工具集成能力。通过 MC</summary>
      
    
    
    
    <category term="前端学习" scheme="https://halely.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="MCP" scheme="https://halely.github.io/tags/MCP/"/>
    
    <category term="AI" scheme="https://halely.github.io/tags/AI/"/>
    
    <category term="开发工具" scheme="https://halely.github.io/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>CK3模组推荐与使用指南</title>
    <link href="https://halely.github.io/2025/02/21/CK3%E6%A8%A1%E7%BB%84%E6%8E%A8%E8%8D%90%E4%B8%8E%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <id>https://halely.github.io/2025/02/21/CK3%E6%A8%A1%E7%BB%84%E6%8E%A8%E8%8D%90%E4%B8%8E%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</id>
    <published>2025-02-21T15:30:00.000Z</published>
    <updated>2025-09-15T07:18:53.493Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>《十字军之王3》（Crusader Kings III）作为一款优秀的中世纪策略游戏，拥有丰富的模组生态。通过安装各种模组，可以大大增强游戏体验，添加新功能、优化界面、提升性能等。本文整理了一些实用的CK3模组推荐。</p><h1 id="功能增强类模组"><a href="#功能增强类模组" class="headerlink" title="功能增强类模组"></a>功能增强类模组</h1><h2 id="Advanced-Cheat-Menu-简体中文"><a href="#Advanced-Cheat-Menu-简体中文" class="headerlink" title="Advanced Cheat Menu 简体中文"></a>Advanced Cheat Menu 简体中文</h2><p><strong>Steam地址</strong>：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=2752613114">2752613114</a></p><p><strong>主要功能</strong>：</p><ul><li>为角色添加/删除特质</li><li>管理角色资源</li><li>无需debug模式启用调试功能</li><li>改变角色文化和宗教信仰</li><li>生成角色、创造宝物、召唤军队</li><li>触发游戏事件</li></ul><p><strong>适用场景</strong>：测试游戏机制、快速体验内容、创意游戏</p><h2 id="The-Headhunter-猎头"><a href="#The-Headhunter-猎头" class="headerlink" title="The Headhunter (猎头)"></a>The Headhunter (猎头)</h2><p><strong>Steam地址</strong>：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=3098269064">3098269064</a></p><p><strong>主要功能</strong>：</p><ul><li>快捷键<code>Ctrl+Y</code>唤出猎头菜单</li><li>搜寻满足特定要求的骑士</li><li>查找高能力的宫廷人士</li><li>人才筛选和管理</li></ul><p><strong>推荐理由</strong>：必装模组，大大简化人才管理流程</p><h1 id="界面优化类模组"><a href="#界面优化类模组" class="headerlink" title="界面优化类模组"></a>界面优化类模组</h1><h2 id="NUI-Realm-Ledger"><a href="#NUI-Realm-Ledger" class="headerlink" title="NUI: Realm Ledger"></a>NUI: Realm Ledger</h2><p><strong>Steam地址</strong>：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=2995323766">2995323766</a></p><p><strong>主要功能</strong>：</p><ul><li>添加领地状态检查UI</li><li>快速了解附庸关系</li><li>识别需要关注的邻居</li><li>领地管理可视化</li></ul><h2 id="Enhanced-County-View-增强的郡域视图"><a href="#Enhanced-County-View-增强的郡域视图" class="headerlink" title="Enhanced County View (增强的郡域视图)"></a>Enhanced County View (增强的郡域视图)</h2><p><strong>Steam地址</strong>：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=3336466278">3336466278</a></p><p><strong>主要功能</strong>：</p><ul><li>优化郡域界面显示</li><li>简化修饰符网格</li><li>提升界面可读性</li></ul><h2 id="Clear-Notifications-清除通知"><a href="#Clear-Notifications-清除通知" class="headerlink" title="Clear Notifications 清除通知"></a>Clear Notifications 清除通知</h2><p><strong>Steam地址</strong>：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=2261468688">2261468688</a></p><p><strong>主要功能</strong>：</p><ul><li>清理游戏通知面板</li><li>兼容性强，几乎支持所有模组</li><li>减少界面干扰</li></ul><h1 id="性能优化类模组"><a href="#性能优化类模组" class="headerlink" title="性能优化类模组"></a>性能优化类模组</h1><h2 id="Population-Control-人口控制"><a href="#Population-Control-人口控制" class="headerlink" title="Population Control (人口控制)"></a>Population Control (人口控制)</h2><p><strong>Steam地址</strong>：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=2276469612">2276469612</a></p><p><strong>主要功能</strong>：</p><ul><li>减少游戏后期卡顿</li><li>控制人口增长</li><li>优化游戏性能</li></ul><h2 id="Even-Smaller-World-Map-更小的世界地图"><a href="#Even-Smaller-World-Map-更小的世界地图" class="headerlink" title="Even Smaller World Map (更小的世界地图)"></a>Even Smaller World Map (更小的世界地图)</h2><p><strong>Steam地址</strong>：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=2979042868">2979042868</a></p><p><strong>主要功能</strong>：</p><ul><li>将世界地图缩小到1/4大小</li><li>显著提升游戏性能</li><li>不影响其他游戏机制</li></ul><h1 id="内容扩展类模组"><a href="#内容扩展类模组" class="headerlink" title="内容扩展类模组"></a>内容扩展类模组</h1><h2 id="A-Game-of-Thrones-权力的游戏"><a href="#A-Game-of-Thrones-权力的游戏" class="headerlink" title="A Game of Thrones (权力的游戏)"></a>A Game of Thrones (权力的游戏)</h2><p><strong>Steam地址</strong>：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=2962333032">2962333032</a></p><p><strong>主要特色</strong>：</p><ul><li>完全转换模组</li><li>基于《冰与火之歌》世界观</li><li>自带简体中文汉化</li><li>丰富的剧情和角色</li></ul><h3 id="Legacy-of-Valyria-瓦雷利亚的遗产"><a href="#Legacy-of-Valyria-瓦雷利亚的遗产" class="headerlink" title="Legacy of Valyria (瓦雷利亚的遗产)"></a>Legacy of Valyria (瓦雷利亚的遗产)</h3><p><strong>Steam地址</strong>：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=3403938445">3403938445</a></p><p><strong>主要特色</strong>：</p><ul><li>AGOT模组的子模组</li><li>专注于瓦雷利亚文明</li><li>龙主、魔法、史诗征服元素</li></ul><h2 id="东方王朝：Oriental-Empires"><a href="#东方王朝：Oriental-Empires" class="headerlink" title="东方王朝：Oriental Empires"></a>东方王朝：Oriental Empires</h2><p><strong>Steam地址</strong>：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=2506311074">2506311074</a></p><p><strong>主要特色</strong>：</p><ul><li>添加中国文化元素</li><li>新的文化、宗教、事件</li><li>适合中国玩家</li></ul><h3 id="东方王朝更多剧本"><a href="#东方王朝更多剧本" class="headerlink" title="东方王朝更多剧本"></a>东方王朝更多剧本</h3><p><strong>Steam地址</strong>：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=3039349148">3039349148</a></p><p><strong>功能</strong>：为东方王朝模组添加更多历史剧本</p><h1 id="游戏机制优化"><a href="#游戏机制优化" class="headerlink" title="游戏机制优化"></a>游戏机制优化</h1><h2 id="Court-Position-Automation-职位自动化"><a href="#Court-Position-Automation-职位自动化" class="headerlink" title="Court Position Automation (职位自动化)"></a>Court Position Automation (职位自动化)</h2><p><strong>Steam地址</strong>：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=2995983225">2995983225</a></p><p><strong>主要功能</strong>：</p><ul><li>自动化宫廷职位管理</li><li>智能人选推荐</li><li>减少微操作</li></ul><h2 id="无限教育儿童"><a href="#无限教育儿童" class="headerlink" title="无限教育儿童"></a>无限教育儿童</h2><p><strong>Steam地址</strong>：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=2217801870">2217801870</a></p><p><strong>主要功能</strong>：</p><ul><li>移除玩家教育儿童数量限制</li><li>AI行为保持不变</li><li>提升教育系统灵活性</li></ul><h2 id="Active-Courtiers-活跃的贵族"><a href="#Active-Courtiers-活跃的贵族" class="headerlink" title="Active Courtiers (活跃的贵族)"></a>Active Courtiers (活跃的贵族)</h2><p><strong>Steam地址</strong>：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=3157170996">3157170996</a></p><p><strong>主要功能</strong>：</p><ul><li>朝廷官员主动寻找配偶</li><li>智能角色推荐</li><li>提升AI人才库质量</li><li>增强角色扮演体验</li></ul><h1 id="界面布局优化"><a href="#界面布局优化" class="headerlink" title="界面布局优化"></a>界面布局优化</h1><h2 id="2-column-Situation-Updated-双列情况更新"><a href="#2-column-Situation-Updated-双列情况更新" class="headerlink" title="2-column Situation Updated (双列情况更新)"></a>2-column Situation Updated (双列情况更新)</h2><p><strong>Steam地址</strong>：<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=2999216381">2999216381</a></p><p><strong>主要功能</strong>：</p><ul><li>情境窗口操作显示在侧边栏</li><li>可自定义显示位置</li><li>支持窗口移动</li></ul><h1 id="模组安装建议"><a href="#模组安装建议" class="headerlink" title="模组安装建议"></a>模组安装建议</h1><h2 id="安装顺序"><a href="#安装顺序" class="headerlink" title="安装顺序"></a>安装顺序</h2><ol><li><strong>性能优化类</strong>：先安装性能相关模组</li><li><strong>界面优化类</strong>：再安装UI改进模组</li><li><strong>功能增强类</strong>：添加新功能模组</li><li><strong>内容扩展类</strong>：最后安装大型转换模组</li></ol><h2 id="兼容性注意"><a href="#兼容性注意" class="headerlink" title="兼容性注意"></a>兼容性注意</h2><ul><li>大型转换模组（如AGOT）可能与其他模组冲突</li><li>建议分别创建不同的模组配置</li><li>定期检查模组更新和兼容性</li></ul><h2 id="推荐组合"><a href="#推荐组合" class="headerlink" title="推荐组合"></a>推荐组合</h2><h3 id="轻量化配置"><a href="#轻量化配置" class="headerlink" title="轻量化配置"></a>轻量化配置</h3><ul><li>Advanced Cheat Menu</li><li>The Headhunter</li><li>Clear Notifications</li><li>Population Control</li></ul><h3 id="完整体验配置"><a href="#完整体验配置" class="headerlink" title="完整体验配置"></a>完整体验配置</h3><ul><li>上述轻量化配置</li><li>NUI: Realm Ledger</li><li>Court Position Automation</li><li>Active Courtiers</li></ul><h3 id="权游主题配置"><a href="#权游主题配置" class="headerlink" title="权游主题配置"></a>权游主题配置</h3><ul><li>A Game of Thrones</li><li>Legacy of Valyria</li><li>基础性能优化模组</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>CK3的模组生态非常丰富，合理选择和搭配模组可以大大提升游戏体验。建议根据个人喜好和电脑性能选择合适的模组组合，定期关注模组更新，享受这款优秀策略游戏带来的乐趣。</p><p>记住在安装模组前备份存档，避免因模组冲突导致的问题。祝您游戏愉快！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;《十字军之王3》（Crusader Kings III）作为一款优秀的中世纪策略游戏，拥有丰富的模组生态。通过安装各种模组，可以大大增强游戏</summary>
      
    
    
    
    <category term="游戏学习" scheme="https://halely.github.io/categories/%E6%B8%B8%E6%88%8F%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="CK3" scheme="https://halely.github.io/tags/CK3/"/>
    
    <category term="游戏模组" scheme="https://halely.github.io/tags/%E6%B8%B8%E6%88%8F%E6%A8%A1%E7%BB%84/"/>
    
    <category term="策略游戏" scheme="https://halely.github.io/tags/%E7%AD%96%E7%95%A5%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>算法总结</title>
    <link href="https://halely.github.io/2025/02/06/%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/"/>
    <id>https://halely.github.io/2025/02/06/%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/</id>
    <published>2025-02-06T09:53:14.000Z</published>
    <updated>2025-09-15T07:18:53.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在前端开发中，算法虽然不像后端那样频繁使用，，但在处理数据、优化性能等方面帮助我们解决很多问题，比如排序、查找、计算等等。算法的学习可以帮助我们提高自己的思维能力，也可以帮助我们更好地理解计算机的工作原理。<br>以下是一些常见的前端算法方法及其使用例子</p><h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><p>排序算法在前端中常用于对数据进行排序，如表格排序、搜索结果排序等。</p><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>冒泡排序是一种简单的排序算法，它重复地遍历要排序的列表，比较相邻的元素，如果它们的顺序错误就交换它们，直到没有任何一对数字需要交换。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bubbleSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> len = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; len - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        [arr[j], arr[j + <span class="number">1</span>]] = [arr[j + <span class="number">1</span>], arr[j]];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>快速排序是一种分治算法，它将一个数组分成两个子数组，然后递归地对子数组进行排序。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">quickSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.<span class="property">length</span> &lt;= <span class="number">1</span>) <span class="keyword">return</span> arr;</span><br><span class="line">  <span class="keyword">const</span> pivot = arr[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">const</span> left = [];</span><br><span class="line">  <span class="keyword">const</span> right = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; pivot) &#123;</span><br><span class="line">      left.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      right.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [...<span class="title function_">quickSort</span>(left), pivot, ...<span class="title function_">quickSort</span>(right)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="搜索算法"><a href="#搜索算法" class="headerlink" title="搜索算法"></a>搜索算法</h1><p>搜索算法在前端中常用于查找数据，如搜索框、下拉框等。</p><h2 id="线性搜索"><a href="#线性搜索" class="headerlink" title="线性搜索"></a>线性搜索</h2><p>线性搜索是一种简单的搜索算法，它遍历数组，查找与目标值相等的元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">linearSearch</span>(<span class="params">arr, target</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] === target) <span class="keyword">return</span> i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分搜索（要求数组已排序）"><a href="#二分搜索（要求数组已排序）" class="headerlink" title="二分搜索（要求数组已排序）"></a>二分搜索（要求数组已排序）</h2><p>二分搜索是一种高效的搜索算法，它将数组分成两半，查找与目标值相等的元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">binarySearch</span>(<span class="params">arr, target</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> left = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> right = arr.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">    <span class="keyword">const</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>((left + right) / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (arr[mid] === target) <span class="keyword">return</span> mid;</span><br><span class="line">    <span class="keyword">if</span> (arr[mid] &lt; target) &#123;</span><br><span class="line">      left = mid + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      right = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="递归算法"><a href="#递归算法" class="headerlink" title="递归算法"></a>递归算法</h1><p>递归算法在前端中常用于处理树形结构、递归调用等。</p><h2 id="阶乘计算"><a href="#阶乘计算" class="headerlink" title="阶乘计算"></a>阶乘计算</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">factorial</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">0</span> || n === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> n * <span class="title function_">factorial</span>(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="遍历树形结构"><a href="#遍历树形结构" class="headerlink" title="遍历树形结构"></a>遍历树形结构</h2><p>遍历树形结构是一种常见的递归算法，它可以遍历一个树形结构，对每个节点进行处理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">traverseTree</span>(<span class="params">node</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(node.<span class="property">value</span>);</span><br><span class="line">  <span class="title function_">traverseTree</span>(node.<span class="property">left</span>);</span><br><span class="line">  <span class="title function_">traverseTree</span>(node.<span class="property">right</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><p>动态规划是一种将复杂问题分解成简单子问题的算法，它可以将一个问题分解成多个子问题，然后将子问题的解组合起来得到原问题的解。</p><h2 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h2><p>斐波那契数列是一个经典的动态规划问题，它的定义是：第n个数等于前两个数之和。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fibonacci</span>(<span class="params">n, memo = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n <span class="keyword">in</span> memo) <span class="keyword">return</span> memo[n];</span><br><span class="line">  <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  memo[n] = <span class="title function_">fibonacci</span>(n - <span class="number">1</span>, memo) + <span class="title function_">fibonacci</span>(n - <span class="number">2</span>, memo);</span><br><span class="line">  <span class="keyword">return</span> memo[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最大子序列和"><a href="#最大子序列和" class="headerlink" title="最大子序列和"></a>最大子序列和</h2><p>最大子序列和是一个经典的动态规划问题，它的定义是：找到一个数组中连续子序列的最大和。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">maxSubArray</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> maxSum = arr[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">let</span> currentSum = arr[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    currentSum = <span class="title class_">Math</span>.<span class="title function_">max</span>(arr[i], currentSum + arr[i]);</span><br><span class="line">    maxSum = <span class="title class_">Math</span>.<span class="title function_">max</span>(maxSum, currentSum);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> maxSum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h1><p>贪心算法是一种在每一步选择中都采取在当前状态下最好或最优的选择，从而希望导致结果是最好或最优的算法。</p><h2 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h2><p>背包问题是一个经典的贪心算法问题，它的定义是：给定一个容量为W的背包和n个物品，每个物品有一个重量和一个价值，如何选择物品放入背包，使得背包中的物品总价值最大。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">knapsack</span>(<span class="params">items, capacity</span>) &#123;</span><br><span class="line">  items.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b.<span class="property">value</span> / b.<span class="property">weight</span> - a.<span class="property">value</span> / a.<span class="property">weight</span>);</span><br><span class="line">  <span class="keyword">let</span> totalValue = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> totalWeight = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; items.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (totalWeight + items[i].<span class="property">weight</span> &lt;= capacity) &#123;</span><br><span class="line">      totalValue += items[i].<span class="property">value</span>;</span><br><span class="line">      totalWeight += items[i].<span class="property">weight</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> remainingWeight = capacity - totalWeight;</span><br><span class="line">      totalValue += items[i].<span class="property">value</span> * remainingWeight / items[i].<span class="property">weight</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> totalValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="分治算法"><a href="#分治算法" class="headerlink" title="分治算法"></a>分治算法</h1><p>分治算法是一种将一个问题分解成多个子问题，然后将子问题的解组合起来得到原问题的解的算法。</p><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>归并排序是一种分治算法，它将一个数组分成两个子数组，然后递归地对子数组进行排序，最后将两个有序的子数组合并成一个有序的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mergeSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.<span class="property">length</span> &lt;= <span class="number">1</span>) <span class="keyword">return</span> arr;</span><br><span class="line">  <span class="keyword">const</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>(arr.<span class="property">length</span> / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">const</span> left = arr.<span class="title function_">slice</span>(<span class="number">0</span>, mid);</span><br><span class="line">  <span class="keyword">const</span> right = arr.<span class="title function_">slice</span>(mid);</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">merge</span>(<span class="title function_">mergeSort</span>(left), <span class="title function_">mergeSort</span>(right));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">left, right</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  <span class="keyword">while</span> (left.<span class="property">length</span> &amp;&amp; right.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (left[<span class="number">0</span>] &lt; right[<span class="number">0</span>]) &#123;</span><br><span class="line">      result.<span class="title function_">push</span>(left.<span class="title function_">shift</span>());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result.<span class="title function_">push</span>(right.<span class="title function_">shift</span>());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [...result, ...left, ...right];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h1><p>回溯算法常用于解决组合、排列、子集等问题。</p><h2 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h2><p>全排列是一种回溯算法，它将一个数组中的所有元素进行全排列。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">permute</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">backtrack</span> = (<span class="params">path</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (path.<span class="property">length</span> === arr.<span class="property">length</span>) &#123;</span><br><span class="line">      result.<span class="title function_">push</span>(path.<span class="title function_">slice</span>());</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (path.<span class="title function_">includes</span>(arr[i])) <span class="keyword">continue</span>;</span><br><span class="line">      path.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">      <span class="title function_">backtrack</span>(path);</span><br><span class="line">      path.<span class="title function_">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title function_">backtrack</span>([]);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="双指针算法"><a href="#双指针算法" class="headerlink" title="双指针算法"></a>双指针算法</h1><p>双指针算法是一种在数组中使用两个指针来解决问题的算法。</p><h2 id="两数之和-（有序数组）"><a href="#两数之和-（有序数组）" class="headerlink" title="两数之和 （有序数组）"></a>两数之和 （有序数组）</h2><p>两数之和是一个经典的双指针算法问题，它的定义是：给定一个有序数组和一个目标值，找到数组中两个数的和等于目标值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">twoSum</span>(<span class="params">arr, target</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> left = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> right = arr.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">    <span class="keyword">const</span> sum = arr[left] + arr[right];</span><br><span class="line">    <span class="keyword">if</span> (sum === target) <span class="keyword">return</span> [left, right];</span><br><span class="line">    <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">      left++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      right--;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="哈希表与映射"><a href="#哈希表与映射" class="headerlink" title="哈希表与映射"></a>哈希表与映射</h1><p>哈希表和映射是两种常用的数据结构，它们可以用来存储键值对，并且可以快速地查找、插入、删除键值对。</p><h2 id="两数之和（无序数组）"><a href="#两数之和（无序数组）" class="headerlink" title="两数之和（无序数组）"></a>两数之和（无序数组）</h2><p>两数之和是一个经典的哈希表问题，它的定义是：给定一个数组和一个目标值，找到数组中两个数的和等于目标值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">twoSum</span>(<span class="params">arr, target</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> complement = target - arr[i];</span><br><span class="line">    <span class="keyword">if</span> (map.<span class="title function_">has</span>(complement)) &#123;</span><br><span class="line">      <span class="keyword">return</span> [map.<span class="title function_">get</span>(complement), i];</span><br><span class="line">    &#125;</span><br><span class="line">    map.<span class="title function_">set</span>(arr[i], i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在前端开发中，算法虽然不像后端那样频繁使用，，但在处理数据、优化性能等方面帮助我们解决很多问题，比如排序、查找、计算等等。算法的学习可以帮助</summary>
      
    
    
    
    <category term="前端学习" scheme="https://halely.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JavaScript" scheme="https://halely.github.io/tags/JavaScript/"/>
    
    <category term="算法" scheme="https://halely.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>wallpaper壁纸提取</title>
    <link href="https://halely.github.io/2024/12/20/wallpaper%E5%A3%81%E7%BA%B8%E6%8F%90%E5%8F%96/"/>
    <id>https://halely.github.io/2024/12/20/wallpaper%E5%A3%81%E7%BA%B8%E6%8F%90%E5%8F%96/</id>
    <published>2024-12-20T16:59:38.000Z</published>
    <updated>2025-09-15T07:18:53.495Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><p>其实我是非常喜欢壁纸的，尤其是高清好看的壁纸，也许是没办法真实的去看到美丽的地方，所以就让壁纸来完成我的心愿吧，我收藏了很多壁纸网址，但是<a href="https://bz.zzzmh.cn/index">极简壁纸</a>、<a href="https://pic.netbian.com/">彼岸图网</a>、<a href="https://wallhaven.cc/">wallhaven</a> 等等壁纸网站吧，但是我发现这些网站的壁纸要不是壁纸质量不是太好或者就是需要墙，最后我斥巨资购买了wallpaper，嗯，然后我不满足只能看，因为我找到文件夹居然是那种很小很模糊的图，我很难受，所以我就想自己写个工具来提取壁纸，然后我就开始了我的探索。</p><h1 id="探索"><a href="#探索" class="headerlink" title="探索"></a>探索</h1><p>我找了很多，总结就是需要的技术就是<code>pkg壁纸文件提取</code>,最后更换了几个文件，最后确定<code>RePKG-GUI</code>这个软件。</p><h2 id="下载使用"><a href="#下载使用" class="headerlink" title="下载使用"></a>下载使用</h2><p>先看文件地址吧：</p><blockquote><p>蓝奏云；<a href="https://52miku.lanzoux.com/b09kz3hch">https://52miku.lanzoux.com/b09kz3hch</a> 密码:5ddm<br>天翼云盘；<a href="https://cloud.189.cn/t/QBFBbyfQvuym">https://cloud.189.cn/t/QBFBbyfQvuym</a> 密码;jmx</p></blockquote><ol><li>下载压缩包</li><li>解压压缩包，建议不要放到中文目录下</li><li>双击运行目录下的RePKG-GUI.exe</li></ol><p>学习总结</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h1&gt;&lt;p&gt;其实我是非常喜欢壁纸的，尤其是高清好看的壁纸，也许是没办法真实的去看到美丽的地方，所以就让壁纸来完成我的心愿吧，我收藏了很多壁纸网址，但是&lt;</summary>
      
    
    
    
    <category term="生活学习" scheme="https://halely.github.io/categories/%E7%94%9F%E6%B4%BB%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Tools" scheme="https://halely.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>前端开发总结方法</title>
    <link href="https://halely.github.io/2024/01/10/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93%E6%96%B9%E6%B3%95/"/>
    <id>https://halely.github.io/2024/01/10/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93%E6%96%B9%E6%B3%95/</id>
    <published>2024-01-10T17:27:19.000Z</published>
    <updated>2025-09-15T07:18:53.495Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>总结一下个人开发总封装的实用方法，以便后期开发方便</p><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="合并表格行"><a href="#合并表格行" class="headerlink" title="合并表格行"></a>合并表格行</h2><p>在开发表格过程中，总是需要合并单元格子，后端会把相同的数据放在一起，前端处理合并，以下是利用哈希值处理的合并方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//tableData 合并的表格数据,matchKey为匹配的key数组，可匹配多个</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dealWithMergeData</span>(<span class="params">tableData, matchKey</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> spanObject = &#123;&#125;</span><br><span class="line">    <span class="comment">//遍历匹配项</span></span><br><span class="line">    matchKey.<span class="title function_">forEach</span>(<span class="function">(<span class="params">spanKeyItem</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!spanObject[spanKeyItem]) spanObject[spanKeyItem] = [];</span><br><span class="line">        <span class="comment">//起始索引</span></span><br><span class="line">        <span class="keyword">let</span> startIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//遍历表格数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; tableData.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> tableItem = tableData[i];</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//如果当前的值和上一个一样</span></span><br><span class="line">                <span class="keyword">if</span> (tableItem[spanKeyItem] === tableData[i - <span class="number">1</span>][spanKeyItem]) &#123;</span><br><span class="line">                    <span class="comment">//起始自增</span></span><br><span class="line">                    spanObject[spanKeyItem][startIndex].<span class="property">rowspan</span>++;</span><br><span class="line">                    <span class="comment">//自身设置为空</span></span><br><span class="line">                    spanObject[spanKeyItem][i] = &#123;</span><br><span class="line">                        <span class="attr">rowspan</span>: <span class="number">0</span>,</span><br><span class="line">                        <span class="attr">colspan</span>: <span class="number">0</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//如果不等于，那么自身就是起始索引，重新开始</span></span><br><span class="line">                    startIndex = i;</span><br><span class="line">                    spanObject[spanKeyItem][startIndex] = &#123;</span><br><span class="line">                        <span class="attr">rowspan</span>: <span class="number">1</span>,</span><br><span class="line">                        <span class="attr">colspan</span>: <span class="number">1</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                spanObject[spanKeyItem][i] = &#123;</span><br><span class="line">                    <span class="attr">rowspan</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">colspan</span>: <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> spanObject</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//dealWithMergeData(tableData,[&#x27;key&#x27;,&#x27;vehicleId&#x27;])</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="reduce-进行数据结构的转换"><a href="#reduce-进行数据结构的转换" class="headerlink" title="reduce 进行数据结构的转换"></a>reduce 进行数据结构的转换</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="string">&quot;1&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">11</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="string">&quot;1&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;李四&quot;</span>, <span class="attr">age</span>: <span class="number">12</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="string">&quot;2&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;王五&quot;</span>, <span class="attr">age</span>: <span class="number">13</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="string">&quot;3&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;赵六&quot;</span>, <span class="attr">age</span>: <span class="number">14</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="string">&quot;2&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;孔七&quot;</span>, <span class="attr">age</span>: <span class="number">15</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">groupArrayByKey</span>(<span class="params">arr = [], key</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">t, v</span>) =&gt;</span> (!t[v[key]] &amp;&amp; (t[v[key]] = []), t[v[key]].<span class="title function_">push</span>(v), t), &#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">groupArrayByKey</span>(arr, <span class="string">&quot;id&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="动态加载-JS-文件"><a href="#动态加载-JS-文件" class="headerlink" title="动态加载 JS 文件"></a>动态加载 JS 文件</h2><p>在一些特殊的场景下，特别是一些库和框架的开发中，我们有时会去动态的加载 JS 文件并执行，下面是利用 Promise 进行了简单的封装。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">loadJS</span>(<span class="params">files, done</span>) &#123;</span><br><span class="line">  <span class="comment">// 获取head标签</span></span><br><span class="line">  <span class="keyword">const</span> head = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;head&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">all</span>(files.<span class="title function_">map</span>(<span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 创建script标签并添加到head</span></span><br><span class="line">      <span class="keyword">const</span> s = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">      s.<span class="property">type</span> = <span class="string">&quot;text/javascript&quot;</span>;</span><br><span class="line">      s.<span class="property">async</span> = <span class="literal">true</span>;</span><br><span class="line">      s.<span class="property">src</span> = file;</span><br><span class="line">      <span class="comment">// 监听load事件，如果加载完成则resolve</span></span><br><span class="line">      s.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> <span class="title function_">resolve</span>(), <span class="literal">false</span>);</span><br><span class="line">      head.<span class="title function_">appendChild</span>(s);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)).<span class="title function_">then</span>(done);  <span class="comment">// 所有均完成，执行用户的回调事件</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">loadJS</span>([<span class="string">&quot;test1.js&quot;</span>, <span class="string">&quot;test2.js&quot;</span>], <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 用户的回调逻辑</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="利用闭包实现函数只执行一次"><a href="#利用闭包实现函数只执行一次" class="headerlink" title="利用闭包实现函数只执行一次"></a>利用闭包实现函数只执行一次</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">once</span> (<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="comment">// 利用闭包判断函数是否执行过</span></span><br><span class="line">  <span class="keyword">let</span> called = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!called) &#123;</span><br><span class="line">      called = <span class="literal">true</span></span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现curring"><a href="#实现curring" class="headerlink" title="实现curring"></a>实现curring</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">currying</span>(<span class="params">fn, ...args</span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">curried</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (args.<span class="property">length</span> &gt;= fn.<span class="property">length</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...arg2</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> curried.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args.<span class="title function_">concat</span>(arg2));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> curried.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a1 = <span class="title function_">currying</span>(add, <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);<span class="comment">//6</span></span><br><span class="line"><span class="keyword">const</span> a2 = <span class="title function_">currying</span>(add)(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>);、、<span class="number">6</span></span><br></pre></td></tr></table></figure><h2 id="递归获取对象属性"><a href="#递归获取对象属性" class="headerlink" title="递归获取对象属性"></a>递归获取对象属性</h2><p>如果让我挑选一个用的最广泛的设计模式，我会选观察者模式，如果让我挑一个我所遇到的最多的算法思维，那肯定是递归，递归通过将原始问题分割为结构相同的子问题，然后依次解决这些子问题，组合子问题的结果最终获得原问题的答案。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  <span class="attr">info</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">address</span>: &#123; <span class="attr">home</span>: <span class="string">&quot;Shaanxi&quot;</span>, <span class="attr">company</span>: <span class="string">&quot;Xian&quot;</span> &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// obj是获取属性的对象，path是路径，fallback是默认值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">obj, path, fallback</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> parts = path.<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> key = parts.<span class="title function_">shift</span>();</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[key] !== <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> parts.<span class="property">length</span> &gt; <span class="number">0</span> ?</span><br><span class="line">      <span class="title function_">get</span>(obj[key], parts.<span class="title function_">join</span>(<span class="string">&quot;.&quot;</span>), fallback) :</span><br><span class="line">      obj[key];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果没有找到key返回fallback</span></span><br><span class="line">  <span class="keyword">return</span> fallback;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">get</span>(user, <span class="string">&quot;info.name&quot;</span>)); <span class="comment">// 张三</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">get</span>(user, <span class="string">&quot;info.address.home&quot;</span>)); <span class="comment">// Shaanxi</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">get</span>(user, <span class="string">&quot;info.address.company&quot;</span>)); <span class="comment">// Xian</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">get</span>(user, <span class="string">&quot;info.address.abc&quot;</span>, <span class="string">&quot;fallback&quot;</span>)); <span class="comment">// fallback</span></span><br></pre></td></tr></table></figure><h2 id="大屏前端自适应"><a href="#大屏前端自适应" class="headerlink" title="大屏前端自适应"></a>大屏前端自适应</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//公共方法</span></span><br><span class="line"><span class="comment">/* 根据浏览器大小推断缩放比例 */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getScale</span> = (<span class="params"><span class="attr">w</span>: <span class="built_in">number</span>, <span class="attr">h</span>: <span class="built_in">number</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> ww = <span class="variable language_">window</span>.<span class="property">innerWidth</span> / w;</span><br><span class="line">  <span class="keyword">const</span> wh = <span class="variable language_">window</span>.<span class="property">innerHeight</span> / h;</span><br><span class="line">  <span class="keyword">return</span> ww &lt; wh ? ww : wh;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 浏览器监听 resize 事件 */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">screeResize</span> = (<span class="params"><span class="attr">el</span>: <span class="title class_">HTMLDivElement</span>, <span class="attr">W</span>: <span class="built_in">number</span>, <span class="attr">H</span>: <span class="built_in">number</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (el) &#123;</span><br><span class="line">    el.<span class="property">style</span>.<span class="property">width</span> = <span class="string">`<span class="subst">$&#123;W&#125;</span>px`</span>;</span><br><span class="line">    el.<span class="property">style</span>.<span class="property">height</span> = <span class="string">`<span class="subst">$&#123;H&#125;</span>px`</span>;</span><br><span class="line">    el.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`scale(<span class="subst">$&#123;getScale(W, H)&#125;</span>) translate(-50% ,-50%)`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//应用</span></span><br><span class="line"><span class="keyword">import</span> &#123; debounce &#125; <span class="keyword">from</span> <span class="string">&quot;lodash&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; screeResize &#125; <span class="keyword">from</span> <span class="string">&quot;@/utils&quot;</span>;</span><br><span class="line"><span class="comment">/* @description:大屏自适应模块*/</span></span><br><span class="line"><span class="keyword">const</span> dataScreenRef = ref&lt;<span class="title class_">HTMLDivElement</span> | <span class="literal">null</span>&gt;(<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onResize</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">screeResize</span>(dataScreenRef.<span class="property">value</span> <span class="keyword">as</span> <span class="title class_">HTMLDivElement</span>, <span class="number">1920</span>, <span class="number">1080</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (dataScreenRef.<span class="property">value</span>) &#123;</span><br><span class="line">    <span class="title function_">onResize</span>();</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>, <span class="title function_">debounce</span>(onResize, <span class="number">150</span>));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//大屏容器样式</span><br><span class="line"><span class="selector-class">.screenContainer</span>&#123;</span><br><span class="line">    <span class="attribute">transform-origin</span>: left top;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1920px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">1080px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">user-select</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="js获取url中指定参数的值（兼容hash）"><a href="#js获取url中指定参数的值（兼容hash）" class="headerlink" title="js获取url中指定参数的值（兼容hash）"></a>js获取url中指定参数的值（兼容hash）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getQueryString</span> = (<span class="params">name, search</span>) =&gt; &#123;</span><br><span class="line">    search = search ||  <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>.<span class="title function_">substr</span>(<span class="number">1</span>) || <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hash</span>.<span class="title function_">split</span>(<span class="string">&quot;?&quot;</span>)[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;(^|&amp;)&quot;</span>+ name +<span class="string">&quot;=([^&amp;]*)(&amp;|$)&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> r = search?.<span class="title function_">match</span>(reg);</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="literal">null</span>) <span class="keyword">return</span>  <span class="built_in">unescape</span>(r[<span class="number">2</span>]); <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="elementUI-封装自定义视频上传"><a href="#elementUI-封装自定义视频上传" class="headerlink" title="elementUI 封装自定义视频上传"></a>elementUI 封装自定义视频上传</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-upload</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;upload&quot;</span> <span class="attr">:auto-upload</span>=<span class="string">&quot;false&quot;</span> <span class="attr">:file-list</span>=<span class="string">&quot;fileList&quot;</span> <span class="attr">list-type</span>=<span class="string">&quot;picture-card&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:limit</span>=<span class="string">&quot;2&quot;</span> <span class="attr">:on-change</span>=<span class="string">&quot;onFileChange&quot;</span> <span class="attr">:on-remove</span>=<span class="string">&quot;onFileRemove&quot;</span> <span class="attr">:on-exceed</span>=<span class="string">&quot;handleExceed&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-icon</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Plus</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//上传图片list</span></span><br><span class="line"><span class="keyword">const</span> fileList = <span class="title function_">ref</span>([]);</span><br><span class="line"><span class="comment">//文件状态改变时的钩子</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onFileChange</span> = (<span class="params">uploadFile, uploadFiles</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">//验证上传图片</span></span><br><span class="line">    <span class="keyword">let</span> uploadStatus = <span class="title function_">uploadVerify</span>(uploadFile);</span><br><span class="line">    <span class="keyword">if</span> (uploadStatus == <span class="literal">false</span>) &#123;</span><br><span class="line">        uploadFiles.<span class="title function_">splice</span>(uploadFiles.<span class="property">length</span> - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    fileList.<span class="property">value</span> = uploadFiles;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//文件移除时的钩子</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onFileRemove</span> = (<span class="params">uploadFile, uploadFiles</span>) =&gt; &#123;</span><br><span class="line">    fileList.<span class="property">value</span> = uploadFiles;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 上传超过</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleExceed</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title class_">ElMessage</span>.<span class="title function_">warning</span>(<span class="string">`最多上传2个图片`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//文件自定义上传</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onFileRequest</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">//获取没有上传的图片，已经上传的我会给图片加上fileId</span></span><br><span class="line">    <span class="keyword">let</span> noUploadList = fileList.<span class="property">value</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> !v.<span class="property">fileId</span>);</span><br><span class="line">    <span class="keyword">let</span> errorImgIndex = []; <span class="comment">//错误图片索引</span></span><br><span class="line">    <span class="keyword">if</span> (noUploadList.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> promiseArr = [];</span><br><span class="line">        noUploadList.<span class="title function_">forEach</span>(<span class="function">(<span class="params">v, index</span>) =&gt;</span> &#123;</span><br><span class="line">            promiseArr.<span class="title function_">push</span>(<span class="title function_">uploadHandle</span>(index, v.<span class="property">raw</span>, v.<span class="property">name</span>, <span class="string">&quot;景点图片&quot;</span>));</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">let</span> results = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(promiseArr);</span><br><span class="line">        dialogLoading.<span class="property">value</span> = <span class="literal">false</span></span><br><span class="line">        results.<span class="title function_">forEach</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (v.<span class="property">code</span> == <span class="string">&quot;1001&quot;</span>) &#123;</span><br><span class="line">                <span class="comment">//引用类型，直接赋值就行</span></span><br><span class="line">                noUploadList[v.<span class="property">index</span>].<span class="property">status</span> = <span class="string">&quot;success&quot;</span>;</span><br><span class="line">                noUploadList[v.<span class="property">index</span>].<span class="property">fileId</span> = v.<span class="property">data</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                errorImgIndex.<span class="title function_">push</span>(v.<span class="property">index</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (errorImgIndex.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">ElMessage</span>.<span class="title function_">warning</span>(</span><br><span class="line">            <span class="string">`第<span class="subst">$&#123;errorImgIndex.join(<span class="string">&quot;,&quot;</span>)&#125;</span>图片上传错误，请更改`</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//封装文件上传函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">uploadHandle</span> = (<span class="params">index, file, fileName, description = <span class="string">&quot;&quot;</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">async</span> resolve =&gt; &#123;</span><br><span class="line">        <span class="comment">//如果名称带逗号</span></span><br><span class="line">        <span class="keyword">let</span> splitName = fileName.<span class="title function_">split</span>(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (splitName.<span class="property">length</span> &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> fileType = fileName</span><br><span class="line">                .<span class="title function_">substring</span>(fileName.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;.&quot;</span>) + <span class="number">1</span>)</span><br><span class="line">                .<span class="title function_">toLowerCase</span>();</span><br><span class="line">            fileName = <span class="string">`<span class="subst">$&#123;splitName[<span class="number">0</span>] || <span class="string">&#x27;random&#x27;</span>&#125;</span>.<span class="subst">$&#123;fileType&#125;</span>`</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> uploadData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">        uploadData.<span class="title function_">append</span>(<span class="string">&quot;file&quot;</span>, file);</span><br><span class="line">        uploadData.<span class="title function_">append</span>(<span class="string">&quot;fileName&quot;</span>, fileName);</span><br><span class="line">        uploadData.<span class="title function_">append</span>(<span class="string">&quot;description&quot;</span>, description);</span><br><span class="line">        <span class="keyword">let</span> [res] = <span class="keyword">await</span> <span class="title function_">awaitWrap</span>(<span class="title function_">uploadPic</span>(uploadData))</span><br><span class="line">        res.<span class="property">index</span> = index; <span class="comment">//方便查找是哪一个</span></span><br><span class="line">        <span class="title function_">resolve</span>(res);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//封装图片上传验证逻辑</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">uploadVerify</span> = (<span class="params">file</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> uploadStatus = <span class="literal">true</span>; <span class="comment">//文件是否支持上传</span></span><br><span class="line">    <span class="keyword">let</span> fileType = file.<span class="property">name</span></span><br><span class="line">        .<span class="title function_">substring</span>(file.<span class="property">name</span>.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;.&quot;</span>) + <span class="number">1</span>)</span><br><span class="line">        .<span class="title function_">toLowerCase</span>();</span><br><span class="line">    <span class="keyword">let</span> restrictFileTypes = [<span class="string">&quot;jpg&quot;</span>, <span class="string">&quot;png&quot;</span>, <span class="string">&quot;jpeg&quot;</span>];</span><br><span class="line">    <span class="keyword">const</span> isLt2M = file.<span class="property">size</span> / <span class="number">1024</span> / <span class="number">1024</span> &lt; <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span> (!restrictFileTypes.<span class="title function_">includes</span>(fileType)) &#123;</span><br><span class="line">        <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&quot;上传图片只能是 jpg、png、jpeg 格式!&quot;</span>);</span><br><span class="line">        uploadStatus = <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isLt2M) &#123;</span><br><span class="line">        <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&quot;上传图片大小不能超过 10MB!&quot;</span>);</span><br><span class="line">        uploadStatus = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> uploadStatus;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;总结一下个人开发总封装的实用方法，以便后期开发方便&lt;/p&gt;
&lt;h1 id=&quot;方法&quot;&gt;&lt;a href=&quot;#方法&quot; class=&quot;headerl</summary>
      
    
    
    
    <category term="前端学习" scheme="https://halely.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JavaScript" scheme="https://halely.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>从零开始构建一个webPack-vue项目</title>
    <link href="https://halely.github.io/2023/11/15/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AAwebPack-vue%E9%A1%B9%E7%9B%AE/"/>
    <id>https://halely.github.io/2023/11/15/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AAwebPack-vue%E9%A1%B9%E7%9B%AE/</id>
    <published>2023-11-15T13:49:35.000Z</published>
    <updated>2025-09-15T07:18:53.495Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>为了加深我们对<code>webpack</code>的了解方便以后灵活运用<code>webpack</code>的技术,故以我们从零开始构建一个简单的<code>webpack-vue</code>项目.</p><h1 id="一、项目结构"><a href="#一、项目结构" class="headerlink" title="一、项目结构"></a>一、项目结构</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">├─dist</span><br><span class="line">├─node_modules</span><br><span class="line">│  └─...</span><br><span class="line">├─src</span><br><span class="line">│  ├─components</span><br><span class="line">│  ├─assets</span><br><span class="line">│  ├─views</span><br><span class="line">│  ├─App.vue</span><br><span class="line">│  └─main.ts</span><br><span class="line">├─public</span><br><span class="line">│  └─index.html</span><br><span class="line">├─.babelrc</span><br><span class="line">├─.gitignore</span><br><span class="line">├─package-lock.json</span><br><span class="line">├─package.json</span><br><span class="line">├─tsconfig.json</span><br><span class="line">├─webpack.config.js</span><br><span class="line">└─README.md</span><br></pre></td></tr></table></figure><h1 id="二、命令配置"><a href="#二、命令配置" class="headerlink" title="二、命令配置"></a>二、命令配置</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 配置项目文件</span><br><span class="line">npm init -y</span><br><span class="line">tsc --init</span><br><span class="line">#如果tsc没有则可以安装</span><br><span class="line">pnpm install typescript -D</span><br><span class="line"># 安装依赖 </span><br><span class="line">pnpm add webpack webpack-cli webpack-dev-server html-webpack-plugin typescript @vue/compiler-sfc friendly-errors-webpack-plugin -D</span><br><span class="line"># 配置安装loader解析器</span><br><span class="line">pnpm add ts-loader vue-loader style-loader css-loader sass-loader -D</span><br><span class="line">pnpm add vue -S</span><br></pre></td></tr></table></figure><p><strong>介绍依赖功能</strong></p><ul><li><code>webpack</code> 打包工具</li><li><code>webpack-cli</code> 命令行工具</li><li><code>webpack-dev-server</code> 开发服务器</li><li><code>html-webpack-plugin</code> 生成html文件</li><li><code>clean-webpack-plugin</code> 清除之前的打包文件</li><li><code>ts-loader</code> 解析ts文件</li><li><code>vue-loader</code> 解析vue文件</li><li><code>style-loader</code> 解析css</li><li><code>css-loader</code> 解析css</li><li><code>sass-loader</code> 解析sass</li><li><code>@vue/compiler-sfc</code> 解析vue</li><li><code>friendly-errors-webpack-plugin</code> 美化错误信息</li></ul><h1 id="三、配置文件"><a href="#三、配置文件" class="headerlink" title="三、配置文件"></a>三、配置文件</h1><h2 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a><code>webpack.config.js</code></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Configuration</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;webpack&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>); <span class="comment">//生成html文件</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CleanWebpackPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;clean-webpack-plugin&quot;</span>); <span class="comment">//清除之前的打包文件</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">VueLoaderPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;vue-loader/dist/index&quot;</span>); <span class="comment">//处理vue文件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">FriendlyErrorsWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;friendly-errors-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@type</span> &#123;<span class="type">Configuration</span>&#125; //配置智能提示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.ts&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;[hash].js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&quot;vue-loader&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>, <span class="comment">//解析ts</span></span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&quot;ts-loader&quot;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="attr">configFile</span>: <span class="title function_">resolve</span>(process.<span class="title function_">cwd</span>(), <span class="string">&quot;tsconfig.json&quot;</span>),</span><br><span class="line">          <span class="attr">appendTsSuffixTo</span>: [<span class="regexp">/\.vue$/</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="comment">//解析css</span></span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.sass$/</span>, <span class="comment">//解析sass</span></span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>,<span class="string">&quot;sass-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@&quot;</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&quot;src&quot;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//extensions: [&quot;.ts&quot;, &quot;.js&quot;, &quot;.vue&quot;], //自动解析扩展名</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="comment">// proxy: &#123;&#125;,</span></span><br><span class="line">    <span class="attr">port</span>: <span class="number">8008</span>,</span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">stats</span>:<span class="string">&quot;errors-only&quot;</span>,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./public/index.html&quot;</span>, <span class="comment">//以public/index.html为模板</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>(),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">VueLoaderPlugin</span>(),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">FriendlyErrorsWebpackPlugin</span>(</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">compilationSuccessInfo</span>:&#123; <span class="comment">//美化样式</span></span><br><span class="line">                <span class="attr">messages</span>:[<span class="string">&#x27;You application is running here http://localhost:8008&#x27;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 打包库文件时使用,压缩包体积，需要配合cdn使用</span></span><br><span class="line">  <span class="comment">//externals: &#123;</span></span><br><span class="line">  <span class="comment">// vue: &quot;Vue&quot;,</span></span><br><span class="line">  <span class="comment">//&#125;,</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = config;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;为了加深我们对&lt;code&gt;webpack&lt;/code&gt;的了解方便以后灵活运用&lt;code&gt;webpack&lt;/code&gt;的技术,故以我们从零开始</summary>
      
    
    
    
    <category term="前端学习" scheme="https://halely.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="webpack" scheme="https://halely.github.io/tags/webpack/"/>
    
    <category term="vue" scheme="https://halely.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>node介绍</title>
    <link href="https://halely.github.io/2023/10/07/node%E4%BB%8B%E7%BB%8D/"/>
    <id>https://halely.github.io/2023/10/07/node%E4%BB%8B%E7%BB%8D/</id>
    <published>2023-10-07T11:01:34.000Z</published>
    <updated>2025-09-15T07:18:53.494Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ol><li><a href="https://nodejs.org/zh-cn">nodejs</a> 并不是<code>JavaScript</code>应用，也不是编程语言，因为编程语言使用的<code>JavaScript</code>,<code>nodejs</code> 是 <code>JavaScript</code>的运行时环境。</li></ol><p>  <img src="/img/postImg/node.png"></p><ol start="2"><li><p><code>Nodejs</code>是构建在V8引擎之上的，V8引擎是由C/C++编写的，因此我们的JavaSCript代码需要由C/C++转化后再执行。</p></li><li><p><code>NodeJs</code>使用异步 I/O 和<a href="https://so.csdn.net/so/search?q=%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8">事件驱动</a>的设计理念，可以高效地处理大量并发请求，提供了非阻塞式 I/O 接口和事件循环机制，使得开发人员可以编写高性能、可扩展的应用程序,异步I/O最终都是由libuv 事件循环库去实现的。</p></li><li><p><code>NodeJs</code>使用npm 作为包管理工具类似于python的pip，或者是java的Maven，目前npm拥有上百万个模块。<br><a href="https://www.npmjs.com/">https://www.npmjs.com/</a></p></li><li><p><code>nodejs</code>适合干一些IO密集型应用，不适合CPU密集型应用，nodejsIO依靠libuv有很强的处理能力，而CPU因为nodejs单线程原因，容易造成CPU占用率高，如果非要做CPU密集型应用，可以使用C++插件编写 或者nodejs提供的<code>cluster</code>。(CPU密集型指的是图像的处理 或者音频处理需要大量数据结构 + 算法)</p></li></ol><h1 id="nodeJs-大致架构图"><a href="#nodeJs-大致架构图" class="headerlink" title="nodeJs 大致架构图"></a>nodeJs 大致架构图</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://nodejs.org/zh-cn&quot;&gt;nodejs&lt;/a&gt; 并不是&lt;code&gt;JavaScrip</summary>
      
    
    
    
    <category term="前端学习" scheme="https://halely.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JavaScript" scheme="https://halely.github.io/tags/JavaScript/"/>
    
    <category term="node" scheme="https://halely.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>浏览器输入url到底发生了什么</title>
    <link href="https://halely.github.io/2023/08/30/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5url%E5%88%B0%E5%BA%95%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/"/>
    <id>https://halely.github.io/2023/08/30/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5url%E5%88%B0%E5%BA%95%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/</id>
    <published>2023-08-30T14:20:27.000Z</published>
    <updated>2025-09-15T07:18:53.496Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在浏览器输入URL并获取响应的过程，其实就是浏览器和该url对应的服务器的网络通信过程。</p></blockquote><ol><li><p><code>URL解析</code>：判断是否是合法url、HSTS会强制判断是否是安全的协议、是否存在访问限制、检查本地是否有缓存</p></li><li><p><code>DNS解析</code>：浏览器将解析得到的域名发送给DNS服务器，以获取对应的IP地址。DNS服务器会返回一个或多个IP地址，浏览器会选择其中一个作为目标服务器的IP地址。</p></li><li><p><code>建立TCP连接</code>：浏览器使用HTTP协议与目标服务器建立TCP连接。这个过程涉及到三次握手，即客户端向服务器发送连接请求，服务器回复确认，最后客户端再次回复确认。</p></li><li><p><code>发送HTTP请求</code>：建立TCP连接后，浏览器会向服务器发送HTTP请求。请求中包含了请求方法（如GET、POST）、请求头（如User-Agent、Cookie）和请求体（对于POST请求）等信息。</p></li><li><p><code>服务器处理请求</code>：服务器接收到浏览器发送的HTTP请求后，会根据请求的内容进行处理。这可能涉及到读取文件、查询数据库或执行其他操作。</p></li><li><p><code>服务器发送HTTP响应</code>：服务器处理完请求后，会生成一个HTTP响应。响应中包含了状态码（如200表示成功、404表示未找到）和响应内容等信息。</p></li><li><p><code>接收HTTP响应</code>：浏览器接收到服务器发送的HTTP响应后，会根据响应的内容进行处理。这可能包括解析HTML、CSS和JavaScript等资源，并进行渲染。</p></li><li><p><code>关闭TCP连接</code>：浏览器在完成页面渲染后，会关闭与服务器的TCP连接。这个过程涉及到四次挥手，即客户端和服务器分别发送关闭连接的请求和确认。</p></li></ol><p>以上是浏览器输入URL后发生的主要步骤。在实际过程中还可能涉及到缓存、重定向、HTTPS加密等其他操作。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在浏览器输入URL并获取响应的过程，其实就是浏览器和该url对应的服务器的网络通信过程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;URL解析&lt;/code&gt;：判断是否是合法url、HSTS会强制判断是否是安全的协议、是</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Set和Map &amp; weakSet和weakMap</title>
    <link href="https://halely.github.io/2023/08/28/Set%E5%92%8CMap-weakSet%E5%92%8CweakMap/"/>
    <id>https://halely.github.io/2023/08/28/Set%E5%92%8CMap-weakSet%E5%92%8CweakMap/</id>
    <published>2023-08-28T15:03:45.000Z</published>
    <updated>2025-09-15T07:18:53.493Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在我们<code>ES5</code>的开发过程中，我们很多时间都在使用<code>array</code>和<code>object</code>,数组的去重对象的遍历等等都是为手熟尔，在<code>ES6</code>又添加了<code>Set和Map</code>和弱类型<code>weakSet和weakMap</code></p><h1 id="详情"><a href="#详情" class="headerlink" title="详情"></a>详情</h1><p><strong>1. Set</strong><br>集合是由一组无序且唯一(即不能重复)的项组成的，可以想象成集合是一个既没有重复元素，也没有顺序概念的数组<br>操作方法：</p><ul><li>add(value)：添加某个值，返回 Set 结构本身。</li><li>delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。</li><li>has(value)：返回一个布尔值，表示该值是否为 Set 的成员。</li><li>clear()：清除所有成员，无返回值。</li><li>size: 返回set数据结构的数据长度</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> setH=<span class="title class_">Set</span>&lt;<span class="built_in">number</span>&gt; =<span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]);</span><br><span class="line">setH.<span class="title function_">add</span>(<span class="number">5</span>);<span class="comment">//Set(5) &#123;1, 2, 3, 4, 5&#125;</span></span><br><span class="line">setH.<span class="title function_">has</span>(<span class="number">5</span>) <span class="comment">//true</span></span><br><span class="line">setH.<span class="title function_">delete</span>(<span class="number">5</span>);<span class="comment">//true</span></span><br><span class="line">setH.<span class="property">size</span> <span class="comment">//4</span></span><br><span class="line">setH.<span class="title function_">clear</span>(); <span class="comment">//清除</span></span><br><span class="line"><span class="comment">//去重操作</span></span><br><span class="line"><span class="keyword">let</span> arr = [...<span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>])]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">//[ 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure><p><strong>2. Map</strong><br>它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键，是一种更完善的 Hash 结构实现。如果你需要“键值对”的数据结构，Map 比 Object 更合适</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;haleLy&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">map</span>: <span class="title class_">Map</span>&lt;<span class="built_in">object</span>, <span class="title class_">Function</span>&gt; = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">map.<span class="title function_">set</span>(obj, <span class="function">() =&gt;</span> <span class="number">123</span>)</span><br><span class="line">map.<span class="title function_">get</span>(obj)</span><br><span class="line">map.<span class="title function_">has</span>(obj);<span class="comment">//true</span></span><br><span class="line">map.<span class="title function_">delete</span>(obj)<span class="comment">//true</span></span><br><span class="line">map.<span class="property">size</span>;<span class="comment">//0</span></span><br></pre></td></tr></table></figure><blockquote><p>操作方法同<code>Set</code>,区别是<code>Map</code>的添加为<code>set()</code>操作方法</p></blockquote><p><strong>3. weakSet和weakMap</strong></p><p>weak 在英文中是弱的异常，而weakSet和WeakMap的<strong>键</strong>都是<strong>弱引用</strong>，前提也是<strong>必须使用引用类型去定义</strong>，不会被计入垃圾回收机制。</p><blockquote><p>首先obj引用了这个对象 <code>+ 1</code>，aahph也引用了 <code>+ 1</code>，wmap也引用了，但是<strong>不会  + 1</strong>，应为他是弱引用，不会计入垃圾回收，因此 obj 和 aahph 释放了该引用 weakMap 也会随着消失的，但是有个问题你会发现控制台能输出，值是取不到的，应为V8的GC回收是需要一定时间的，你可以延长到500ms看一看，并且为了避免这个问题不允许读取键值，也不允许遍历，同理weakSet 也一样</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>:<span class="built_in">any</span> = &#123;<span class="attr">name</span>:<span class="string">&#x27;孙亚龙&#x27;</span>&#125; <span class="comment">//1</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">aahph</span>:<span class="built_in">any</span> = obj <span class="comment">//2</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">wMap</span>:<span class="title class_">WeakMap</span>&lt;<span class="built_in">object</span>,<span class="built_in">string</span>&gt; = <span class="keyword">new</span> <span class="title class_">WeakMap</span>()</span><br><span class="line"> </span><br><span class="line">wMap.<span class="title function_">set</span>(obj,<span class="string">&#x27;爱安徽潘慧&#x27;</span>) <span class="comment">//2 他的键是弱引用不会计数的</span></span><br><span class="line"> </span><br><span class="line">obj = <span class="literal">null</span> <span class="comment">// -1</span></span><br><span class="line">aahph = <span class="literal">null</span>;<span class="comment">//-1</span></span><br><span class="line"><span class="comment">//v8 GC 不稳定 最少200ms</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(wmap)</span><br><span class="line">&#125;,<span class="number">500</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在我们&lt;code&gt;ES5&lt;/code&gt;的开发过程中，我们很多时间都在使用&lt;code&gt;array&lt;/code&gt;和&lt;code&gt;object&lt;/c</summary>
      
    
    
    
    <category term="前端学习" scheme="https://halely.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JavaScript" scheme="https://halely.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript进阶</title>
    <link href="https://halely.github.io/2023/08/28/TypeScript%E8%BF%9B%E9%98%B6/"/>
    <id>https://halely.github.io/2023/08/28/TypeScript%E8%BF%9B%E9%98%B6/</id>
    <published>2023-08-28T11:47:34.000Z</published>
    <updated>2025-09-15T07:18:53.494Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类型兼容"><a href="#类型兼容" class="headerlink" title="类型兼容"></a>类型兼容</h1><p>所谓的<code>类型兼容性</code>，就是用于确定一个类型是否能赋值给其他的类型。<strong>TypeScript中的类型兼容性是基于结构类型的（也就是形状），如果A要兼容B 那么A至少具有B相同的属性</strong>。</p><h2 id="协变"><a href="#协变" class="headerlink" title="协变"></a>协变</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">isMan</span>: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> B &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: A = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;hale&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="attr">isMan</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: B = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;yzj&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a=b; //异常 类型 &quot;B&quot; 中缺少属性 &quot;isMan&quot;，但类型 &quot;A&quot; 中需要该属性。</span></span><br><span class="line">b=a;</span><br></pre></td></tr></table></figure><blockquote><p>A B 两个类型完全不同但是竟然可以赋值并无报错B类型充当A类型的子类型，当子类型里面的属性满足A类型就可以进行赋值，也就是说<strong>不能少可以多，这就是协变</strong>。</p></blockquote><h2 id="逆变"><a href="#逆变" class="headerlink" title="逆变"></a>逆变</h2><p> <strong>逆变一般发生于函数的参数上面</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">isMan</span>: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> B &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fnA</span> = (<span class="params"><span class="attr">paramA</span>: A</span>) =&gt; &#123; &#125;</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fnB</span> = (<span class="params"><span class="attr">paramB</span>: B</span>) =&gt; &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//fnB = fnA //异常不能将类型“(params: A) =&gt; void”分配给类型“(params: B) =&gt; void”。参数“paramA”和“paramB” 的类型不兼容。类型 &quot;B&quot; 中缺少属性 &quot;isMan&quot;，但类型 &quot;A&quot; 中需要该属性。</span></span><br><span class="line"></span><br><span class="line">fnA=fnB</span><br></pre></td></tr></table></figure><p>这里是和协变不一样的，协变是只能多不能少，但是<strong>逆变是只能少不能多</strong>，那么具体是什么原因呢？在我的理解下，不管这个函数如果赋值，其实执行的都是等号后面的函数，那么当<code>fnB = fnA</code>,执行的是<code>fnA</code>,而<code>fnB</code>对应的<code>类型B</code>不能完全覆盖<code>fnA</code>的<code>类型A</code>,所以TS认定这是不安全的，反之，<code>类型A</code>能够覆盖<code>类型B</code>,所以这样是安全的</p><blockquote><p>那么如何双向协变呢？<code>tsconfig =&gt; strictFunctionTypes</code> 设置<code>为false</code> 支持双向协变 <code>fnA</code> <code>fnB</code> 随便可以来回赋值.</p></blockquote><h1 id="内置进价用法"><a href="#内置进价用法" class="headerlink" title="内置进价用法"></a>内置进价用法</h1><p>TypeScript内置高级类型<code>Partial Pick</code> ，我们学习一下,</p><h2 id="Partial"><a href="#Partial" class="headerlink" title="Partial"></a>Partial</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//=========源码=========</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Make all properties in T optional</span></span><br><span class="line"><span class="comment">  将T中的所有属性设置为可选</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Partial</span>&lt;T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> keyof T]?: T[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//=========使用=========</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> p = <span class="title class_">Partial</span>&lt;<span class="title class_">Person</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//=========转换为=========</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> p = &#123;</span><br><span class="line">    <span class="attr">name</span>?: <span class="built_in">string</span> | <span class="literal">undefined</span>;</span><br><span class="line">    <span class="attr">age</span>?: <span class="built_in">number</span> | <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p><code>keyof</code> 是将一个接口对象的全部属性取出来变成联合类型</p></li><li><p><code>in</code> 我们可以理解成for in P 就是key 遍历  keyof T  就是联合类型的每一项</p></li><li><p><code>?</code> 这个操作就是将每一个属性变成可选项</p></li><li><p><code>T[P]</code> 索引访问操作符，与 JavaScript 种访问属性值的操作类似</p></li></ul><h2 id="Pick"><a href="#Pick" class="headerlink" title="Pick"></a>Pick</h2><p><strong>从类型定义T的属性中，选取指定一组属性，返回一个新的类型定义。</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//=========源码=========</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * From T, pick a set of properties whose keys are in the union K</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Pick</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> K]: T[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//=========使用=========</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">text</span>:<span class="built_in">string</span></span><br><span class="line">    <span class="attr">address</span>:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Ex</span> = <span class="string">&quot;text&quot;</span> | <span class="string">&quot;age&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> A = <span class="title class_">Pick</span>&lt;<span class="title class_">Person</span>,<span class="title class_">Ex</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//=========转换成=========</span></span><br><span class="line"><span class="keyword">type</span> A = &#123;</span><br><span class="line">    <span class="attr">age</span>:<span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">text</span>:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Readonly"><a href="#Readonly" class="headerlink" title="Readonly"></a>Readonly</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Make all properties in T readonly</span></span><br><span class="line"><span class="comment"> * 将T中的所有属性设置为只读</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Readonly</span>&lt;T&gt; = &#123;</span><br><span class="line">    <span class="keyword">readonly</span> [P <span class="keyword">in</span> keyof T]: T[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//=========使用=========</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Peron</span> =&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> p=<span class="title class_">Readonly</span>&lt;<span class="title class_">Peron</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//=========转换成=========</span></span><br><span class="line"><span class="keyword">type</span> p = &#123;</span><br><span class="line">    <span class="keyword">readonly</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">readonly</span> <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//=========源码=========</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Construct a type with a set of properties K of type T</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Record</span>&lt;K <span class="keyword">extends</span> keyof <span class="built_in">any</span>, T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> K]: T;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//=========使用=========</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Peron</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> A = <span class="string">&#x27;A&#x27;</span> | <span class="number">12</span> | <span class="string">&#x27;N&#x27;</span>;</span><br><span class="line"><span class="keyword">type</span> p = <span class="title class_">Record</span>&lt;A, <span class="title class_">Peron</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//=========转换成=========</span></span><br><span class="line"><span class="keyword">type</span> p = &#123;</span><br><span class="line">    <span class="attr">A</span>: <span class="title class_">Peron</span>;</span><br><span class="line">    <span class="number">12</span>: <span class="title class_">Peron</span>;</span><br><span class="line">    <span class="attr">N</span>: <span class="title class_">Peron</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="infer"><a href="#infer" class="headerlink" title="infer"></a>infer</h2><p>infer 是TypeScript 新增到的关键字 充当占位符</p><p>定义一个类型 如果是数组类型 就返回 数组元素的类型 否则 就传入什么类型 就返回什么类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个类型 如果是数组类型 就返回 数组元素的类型 否则 就传入什么类型 就返回什么类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">TYPE</span>&lt;T&gt; = T <span class="keyword">extends</span> <span class="title class_">Array</span>&lt;<span class="built_in">any</span>&gt; ? T[<span class="built_in">number</span>] : T;</span><br><span class="line"><span class="keyword">type</span> A=<span class="variable constant_">TYPE</span>&lt;(<span class="built_in">string</span> | <span class="built_in">number</span>)[]&gt;</span><br><span class="line"><span class="keyword">type</span> B=<span class="variable constant_">TYPE</span>&lt;<span class="built_in">string</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用inter修改</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">TYPE</span>&lt;T&gt; = T <span class="keyword">extends</span> <span class="title class_">Array</span>&lt;infer U&gt; ? U : T;</span><br><span class="line"><span class="keyword">type</span> A=<span class="variable constant_">TYPE</span>&lt;(<span class="built_in">string</span> | <span class="built_in">number</span>)[]&gt;</span><br><span class="line"><span class="keyword">type</span> B=<span class="variable constant_">TYPE</span>&lt;<span class="built_in">string</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>infer 类型提取</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Arr</span> = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"><span class="comment">//提取头部元素</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FirstType</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = T <span class="keyword">extends</span> [infer <span class="title class_">First</span>, ...<span class="built_in">any</span>[]] ? <span class="title class_">First</span> : <span class="built_in">never</span>;</span><br><span class="line"><span class="keyword">type</span> a = <span class="title class_">FirstType</span>&lt;<span class="title class_">Arr</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提取尾部元素</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">LastType</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = T <span class="keyword">extends</span> [...<span class="built_in">any</span>[], infer <span class="title class_">Last</span>] ? <span class="title class_">Last</span> : <span class="built_in">never</span>;</span><br><span class="line"><span class="keyword">type</span> b = <span class="title class_">LastType</span>&lt;<span class="title class_">Arr</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//剔除第一个元素 </span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">EliminateFirst</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = T <span class="keyword">extends</span> [<span class="built_in">unknown</span>, ...infer <span class="title class_">Rest</span>] ? <span class="title class_">Rest</span> : <span class="built_in">never</span>;</span><br><span class="line"><span class="keyword">type</span> c = <span class="title class_">EliminateFirst</span>&lt;<span class="title class_">Arr</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//剔除尾部元素</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">EliminateLast</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = T <span class="keyword">extends</span> [...infer <span class="title class_">Rest</span>, <span class="built_in">unknown</span>] ? <span class="title class_">Rest</span> : <span class="built_in">never</span>;</span><br><span class="line"><span class="keyword">type</span> d = <span class="title class_">EliminateLast</span>&lt;<span class="title class_">Arr</span>&gt;</span><br></pre></td></tr></table></figure><p><strong>infer 梯归</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ReverseArr</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt;=T <span class="keyword">extends</span> [infer <span class="title class_">First</span>,...infer rest] ? [...<span class="title class_">ReverseArr</span>&lt;rest&gt;,<span class="title class_">First</span>]:T;</span><br><span class="line"><span class="keyword">type</span> b=<span class="title class_">ReverseArr</span>&lt;a&gt;;<span class="comment">//type b = [4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;类型兼容&quot;&gt;&lt;a href=&quot;#类型兼容&quot; class=&quot;headerlink&quot; title=&quot;类型兼容&quot;&gt;&lt;/a&gt;类型兼容&lt;/h1&gt;&lt;p&gt;所谓的&lt;code&gt;类型兼容性&lt;/code&gt;，就是用于确定一个类型是否能赋值给其他的类型。&lt;strong&gt;TypeScript</summary>
      
    
    
    
    <category term="前端学习" scheme="https://halely.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JavaScript" scheme="https://halely.github.io/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://halely.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TS进阶用法proxy &amp; Reflect</title>
    <link href="https://halely.github.io/2023/08/24/TS%E8%BF%9B%E9%98%B6%E7%94%A8%E6%B3%95proxy-Reflect/"/>
    <id>https://halely.github.io/2023/08/24/TS%E8%BF%9B%E9%98%B6%E7%94%A8%E6%B3%95proxy-Reflect/</id>
    <published>2023-08-24T10:46:10.000Z</published>
    <updated>2025-09-15T07:18:53.493Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>对于接触过<code>Vue3</code>的开发差不多都知道<code>ES6</code>添加了<code>Proxy</code>新特性,数据响应的技术就是运用了<code>Proxy</code>的代理拦截,但是和<code>Proxy</code>共生的还有<code>Reflect(反射)</code>.</p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="proxy"><a href="#proxy" class="headerlink" title="proxy"></a>proxy</h2><blockquote><p>Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy 这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”。</p></blockquote><p>下面是 Proxy 支持的拦截操作一览，一共 13 种-<a href="https://es6.ruanyifeng.com/#docs/proxy">具体实例</a>。</p><ul><li><code>get(target, propKey, receiver)</code>：拦截对象属性的读取，比如<code>proxy.foo</code>和<code>proxy[&#39;foo&#39;]</code>。</li><li><code>set(target, propKey, value, receiver)</code>：拦截对象属性的设置，比如<code>proxy.foo = v</code>或<code>proxy[&#39;foo&#39;] = v</code>，返回一个布尔值。</li><li><code>has(target, propKey)</code>：拦截<code>propKey in proxy</code>的操作，返回一个布尔值。</li><li><code>deleteProperty(target, propKey)</code>：拦截<code>delete proxy[propKey]</code>的操作，返回一个布尔值。</li><li><code>ownKeys(target)</code>：拦截<code>Object.getOwnPropertyNames(proxy)</code>、<code>Object.getOwnPropertySymbols(proxy)</code>、<code>Object.keys(proxy)</code>、<code>for...in</code>循环，返回一个数组。该方法返回目标对象所有自身的属性的属性名，而<code>Object.keys()</code>的返回结果仅包括目标对象自身的可遍历属性。</li><li><code>getOwnPropertyDescriptor(target, propKey)</code>：拦截<code>Object.getOwnPropertyDescriptor(proxy, propKey)</code>，返回属性的描述对象。</li><li><code>defineProperty(target, propKey, propDesc)</code>：拦截<code>Object.defineProperty(proxy, propKey, propDesc）</code>、<code>Object.defineProperties(proxy, propDescs)</code>，返回一个布尔值。</li><li><code>preventExtensions(target)</code>：拦截<code>Object.preventExtensions(proxy)</code>，返回一个布尔值。</li><li><code>getPrototypeOf(target)</code>：拦截<code>Object.getPrototypeOf(proxy)</code>，返回一个对象。</li><li><code>isExtensible(target)</code>：拦截<code>Object.isExtensible(proxy)</code>，返回一个布尔值。</li><li><code>setPrototypeOf(target, proto)</code>：拦截<code>Object.setPrototypeOf(proxy, proto)</code>，返回一个布尔值。如果目标对象是函数，那么还有两种额外操作可以拦截。</li><li><code>apply(target, object, args)</code>：拦截 Proxy 实例作为<strong>函数调用的操作</strong>，比如<code>proxy(...args)</code>、<code>proxy.call(object, ...args)</code>、<code>proxy.apply(...)</code>。</li><li><code>construct(target, args)</code>：拦截 Proxy 实例作为<strong>构造函数调用</strong>的操作，比如<code>new proxy(...args)</code>。</li></ul><h2 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h2><p>对象与<code>Proxy</code>对象一样，也是<code>ES6</code>为了操作对象而提供的新<code>API</code>。<code>Reflect</code>对象的设计目的有这样几个。</p><ol><li>将<code>Object</code>对象的一些明显属于语言内部的方法（比如<code>Object.defineProperty</code>），放到<code>Reflec</code>t对象上。现阶段，某些方法同时在<code>Object</code>和<code>Reflect</code>对象上部署，未来的新方法将只部署在Reflect对象上。也就是说，从Reflect对象上可以拿到语言内部的方法。</li><li>修改某些<code>Object</code>方法的返回结果，让其变得更合理。比如，<code>Object.defineProperty(obj, name, desc)</code>在无法定义属性时，会抛出一个错误，而<code>Reflect.defineProperty(obj, name, desc)</code>则会返回false。</li><li>让<code>Object</code>操作都变成函数行为。某些<code>Object</code>操作是命令式，比如<code>name in obj</code>和<code>delete obj[name]</code>，而<code>Reflect.has(obj, name)</code>和<code>Reflect.deleteProperty(obj, name)</code>让它们变成了函数行为。</li><li><code>Reflect</code>对象的方法与Proxy对象的方法一一对应，<strong>只要是<code>Proxy</code>对象的方法，就能在<code>Reflect</code>对象上找到对应的方法</strong>。这就让<code>Proxy</code>对象可以方便地调用对应的<code>Reflect</code>方法，完成默认行为，作为修改行为的基础。<strong>也就是说，不管Proxy怎么修改默认行为，你总可以在Reflect上获取默认行为</strong>。</li></ol><p><code>Reflect</code>对象一共有 13 个静态方法-<a href="https://es6.ruanyifeng.com/#docs/reflect">具体实例</a>。</p><ul><li>Reflect.apply(target, thisArg, args)</li><li>Reflect.construct(target, args)</li><li>Reflect.get(target, name, receiver)</li><li>Reflect.set(target, name, value, receiver)</li><li>Reflect.defineProperty(target, name, desc)</li><li>Reflect.deleteProperty(target, name)</li><li>Reflect.has(target, name)</li><li>Reflect.ownKeys(target)</li><li>Reflect.isExtensible(target)</li><li>Reflect.preventExtensions(target)</li><li>Reflect.getOwnPropertyDescriptor(target, name)</li><li>Reflect.getPrototypeOf(target)</li><li>Reflect.setPrototypeOf(target, prototype)</li></ul><h2 id="使用Proxy和Reflect实现观察者模式"><a href="#使用Proxy和Reflect实现观察者模式" class="headerlink" title="使用Proxy和Reflect实现观察者模式"></a>使用Proxy和Reflect实现观察者模式</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @proxy 代理13个方法 参数一模一样</span></span><br><span class="line"><span class="comment"> * @Reflect 反射13个方法 参数一模一样</span></span><br><span class="line"><span class="comment"> * @mobx  实现observable</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//proxy 代理：拦截</span></span><br><span class="line"><span class="comment">//支撑对象 数组 函数 set map</span></span><br><span class="line"><span class="keyword">let</span> person = &#123; <span class="attr">name</span>: <span class="string">&#x27;haleLy&#x27;</span>, <span class="attr">age</span>:<span class="number">27</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">listFns</span>: <span class="title class_">Set</span>&lt;<span class="title class_">Function</span>&gt; = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">addAuthor</span> = (<span class="params"><span class="attr">cb</span>: <span class="title class_">Function</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!listFns.<span class="title function_">has</span>(cb)) &#123;</span><br><span class="line">        listFns.<span class="title function_">add</span>(cb)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> observable = &lt;T <span class="keyword">extends</span> <span class="built_in">object</span>&gt;<span class="function">(<span class="params"><span class="attr">params</span>: T</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(params, &#123;</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">target, key, value, receiver</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> result = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value, receiver);</span><br><span class="line">            listFns.<span class="title function_">forEach</span>(<span class="function"><span class="params">fn</span> =&gt;</span> <span class="title function_">fn</span>())</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personObservable = <span class="title function_">observable</span>(person);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(personObservable)</span><br><span class="line"><span class="title function_">addAuthor</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;变化触发了&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">personObservable.<span class="property">age</span> = <span class="number">28</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;对于接触过&lt;code&gt;Vue3&lt;/code&gt;的开发差不多都知道&lt;code&gt;ES6&lt;/code&gt;添加了&lt;code&gt;Proxy&lt;/code&gt;新特</summary>
      
    
    
    
    <category term="前端学习" scheme="https://halely.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JavaScript" scheme="https://halely.github.io/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://halely.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>实战TS编写发布订阅模式</title>
    <link href="https://halely.github.io/2023/08/23/%E5%AE%9E%E6%88%98TS%E7%BC%96%E5%86%99%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://halely.github.io/2023/08/23/%E5%AE%9E%E6%88%98TS%E7%BC%96%E5%86%99%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2023-08-23T15:12:55.000Z</published>
    <updated>2025-09-15T07:18:53.495Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>作为一个前端或多或少都知道<strong>发布订阅模式</strong>，那么他到底是什么呢？<br>其实我们在日常开发早已用到了发布订阅模式例如<code>addEventListener</code>，<code>Vue evnetBus</code></p><blockquote><p>发布订阅模式又叫观察者模式，它定义了一种一对多的关系，让多个订阅者对象同时监听某一个发布者，或者叫主题对象，这个主题对象的状态发生变化时就会通知所有订阅自己的订阅者对象，使得它们能够自动更新自己。</p></blockquote><p><strong>举例</strong>：比如我们刷b站，关注了一个up主，他直播或者发新动向都会提醒呢，然后你就知道，我们关注就是订阅或者叫注册，当他有新动向的时候会提醒你，这就是发布，这里面有三个角色：发布者（up主）、订阅者（你自己）、调度者（平台）。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>我们定义一个对象，对象有四个方法：</p><ul><li><code>on</code>:订阅/监听</li><li><code>emit</code>:发布/注册</li><li><code>once</code>:只执行一次</li><li><code>off</code>:解除绑定</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义类接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">EventFace</span> &#123;</span><br><span class="line">    <span class="attr">on</span>: <span class="function">(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">fn</span>: <span class="title class_">Function</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">    <span class="attr">emit</span>: <span class="function">(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, ...<span class="attr">arg</span>: <span class="title class_">Array</span>&lt;<span class="built_in">any</span>&gt;</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">    <span class="attr">off</span>: <span class="function">(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">fn</span>: <span class="title class_">Function</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">    <span class="attr">once</span>: <span class="function">(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">fn</span>: <span class="title class_">Function</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ListFn</span> &#123;</span><br><span class="line">    [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="title class_">Array</span>&lt;<span class="title class_">Function</span>&gt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建实现类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DisPatch</span> <span class="keyword">implements</span> <span class="title class_">EventFace</span> &#123;</span><br><span class="line">    <span class="attr">list</span>: <span class="title class_">ListFn</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">list</span> = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//订阅/监听</span></span><br><span class="line">    <span class="title function_">on</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">fn</span>: <span class="title class_">Function</span></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> callbackList = <span class="variable language_">this</span>.<span class="property">list</span>[name] || [];</span><br><span class="line">        callbackList.<span class="title function_">push</span>(fn)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">list</span>[name] = callbackList;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//发布/注册</span></span><br><span class="line">    <span class="title function_">emit</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, ...<span class="attr">arg</span>: <span class="title class_">Array</span>&lt;<span class="built_in">any</span>&gt;</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> eventNames = <span class="variable language_">this</span>.<span class="property">list</span>[name]</span><br><span class="line">        <span class="keyword">if</span> (eventNames) &#123;</span><br><span class="line">            eventNames.<span class="title function_">forEach</span>(<span class="function"><span class="params">el</span> =&gt;</span> &#123;</span><br><span class="line">                el.<span class="title function_">apply</span>(<span class="variable language_">this</span>, arg)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`名称错误<span class="subst">$&#123;name&#125;</span>`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//解除绑定</span></span><br><span class="line">    <span class="title function_">off</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">fn</span>: <span class="title class_">Function</span></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> eventNames = <span class="variable language_">this</span>.<span class="property">list</span>[name];</span><br><span class="line">        <span class="keyword">if</span> (eventNames &amp;&amp; fn) &#123;</span><br><span class="line">            <span class="keyword">let</span> index = eventNames.<span class="title function_">findIndex</span>(<span class="function"><span class="params">fns</span> =&gt;</span> fns === fn)</span><br><span class="line">            eventNames.<span class="title function_">splice</span>(index, <span class="number">1</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;该事件未监听&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//只执行一次</span></span><br><span class="line">    <span class="title function_">once</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">fn</span>: <span class="title class_">Function</span></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title function_">decor</span> = (<span class="params">...<span class="attr">args</span>: <span class="title class_">Array</span>&lt;<span class="built_in">any</span>&gt;</span>) =&gt; &#123;</span><br><span class="line">            fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">off</span>(name, decor)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">on</span>(name, decor)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建实例</span></span><br><span class="line"><span class="keyword">const</span> o = <span class="keyword">new</span> <span class="title class_">DisPatch</span>();</span><br><span class="line"><span class="comment">//注册订阅/监听</span></span><br><span class="line">o.<span class="title function_">on</span>(<span class="string">&#x27;post&#x27;</span>, <span class="function">(<span class="params">...res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>, res)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn2</span> = (<span class="params">...res</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>, res)</span><br><span class="line">&#125;</span><br><span class="line">o.<span class="title function_">on</span>(<span class="string">&#x27;post&#x27;</span>, fn2)</span><br><span class="line">o.<span class="title function_">once</span>(<span class="string">&#x27;post&#x27;</span>,<span class="function">(<span class="params">...res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>, res)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//发布/注册</span></span><br><span class="line">o.<span class="title function_">emit</span>(<span class="string">&#x27;post&#x27;</span>, <span class="number">1</span>, <span class="literal">false</span>, &#123; <span class="attr">name</span>: <span class="string">&#x27;hale&#x27;</span> &#125;)</span><br><span class="line">o.<span class="title function_">off</span>(<span class="string">&#x27;post&#x27;</span>, fn2)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;作为一个前端或多或少都知道&lt;strong&gt;发布订阅模式&lt;/strong&gt;，那么他到底是什么呢？&lt;br&gt;其实我们在日常开发早已用到了发布订阅模</summary>
      
    
    
    
    <category term="前端学习" scheme="https://halely.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JavaScript" scheme="https://halely.github.io/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://halely.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TS-Rollup封装插件实践</title>
    <link href="https://halely.github.io/2023/08/22/TS-Rollup%E5%B0%81%E8%A3%85%E6%8F%92%E4%BB%B6%E5%AE%9E%E8%B7%B5/"/>
    <id>https://halely.github.io/2023/08/22/TS-Rollup%E5%B0%81%E8%A3%85%E6%8F%92%E4%BB%B6%E5%AE%9E%E8%B7%B5/</id>
    <published>2023-08-22T17:23:07.000Z</published>
    <updated>2025-09-15T07:18:53.493Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用<code>cookie</code>是可以设置有效期的，但<code>localStorage</code>本身是没有该机制的，只能手动删除，否则会一直存放在浏览器当中，我们可以把localStorage跟cookie一样设置一个有效期进行二次封装实现该方案。</p><p>在存储的时候设置一个过期时间，并且存储的数据进行格式化方便统一校验，在读取的时候获取当前时间进行判断是否过期，如果过期进行删除即可。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /enum ts 定义枚举</span></span><br><span class="line"><span class="comment">//字典 Dictionaries    expire过期时间key    permanent永久不过期</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">enum</span> <span class="title class_">Dictionaries</span> &#123;</span><br><span class="line">    expire = <span class="string">&#x27;__expire__&#x27;</span>,</span><br><span class="line">    permanent = <span class="string">&#x27;permanent&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//type ts 定义类型</span></span><br><span class="line"><span class="comment">//expire  过期时间key  //permanent 永久不过期</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Dictionaries</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../enum&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">Str</span>=<span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">Expire</span> = <span class="title class_">Dictionaries</span>.<span class="property">permanent</span> | <span class="built_in">number</span> <span class="comment">//有效期类型</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Date</span>&lt;T&gt;&#123;</span><br><span class="line">   <span class="attr">value</span>:T,</span><br><span class="line">   [<span class="title class_">Dictionaries</span>.<span class="property">expire</span>]:<span class="title class_">Expire</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Result</span>&lt;T&gt; &#123; <span class="comment">//返回值类型</span></span><br><span class="line">    <span class="attr">message</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">value</span>: T | <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">StorageCls</span> &#123;</span><br><span class="line">    <span class="attr">get</span>: &lt;T&gt;<span class="function">(<span class="params"><span class="attr">key</span>:<span class="title class_">Str</span></span>) =&gt;</span> <span class="title class_">Result</span>&lt;T | <span class="literal">null</span>&gt;;</span><br><span class="line">    <span class="attr">set</span>: &lt;T&gt;<span class="function">(<span class="params"><span class="attr">key</span>:<span class="title class_">Str</span>,<span class="attr">value</span>:T,<span class="attr">expire</span>:<span class="title class_">Expire</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">    <span class="attr">remove</span>: <span class="function">(<span class="params"><span class="attr">key</span>: <span class="title class_">Str</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">    <span class="attr">clear</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.ts</span></span><br><span class="line"><span class="comment">//expire  过期时间key permanent 永久不过期</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">StorageCls</span>, <span class="title class_">Str</span>, <span class="title class_">Expire</span>, <span class="title class_">Date</span>, <span class="title class_">Result</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./type&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Dictionaries</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./enum&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Storage</span> <span class="keyword">implements</span> <span class="title class_">StorageCls</span> &#123;</span><br><span class="line">    <span class="comment">//获取localStorage</span></span><br><span class="line">    <span class="keyword">public</span>  get&lt;T = <span class="built_in">any</span>&gt;(<span class="attr">key</span>: <span class="title class_">Str</span>): <span class="title class_">Result</span>&lt;T | <span class="literal">null</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> value = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(key)</span><br><span class="line">        <span class="keyword">if</span> (value) &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="attr">data</span>: <span class="title class_">Date</span>&lt;T&gt; = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(value);</span><br><span class="line">            <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line">            <span class="comment">//有效并且是数组类型 并且过期了 进行删除和提示</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> data[<span class="title class_">Dictionaries</span>.<span class="property">expire</span>] == <span class="string">&#x27;number&#x27;</span> &amp;&amp; data[<span class="title class_">Dictionaries</span>.<span class="property">expire</span>] &lt; now) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">remove</span>(key)</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    <span class="attr">message</span>: <span class="string">`您的<span class="subst">$&#123;key&#125;</span>已过期`</span>,</span><br><span class="line">                    <span class="attr">value</span>: <span class="literal">null</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//否则成功返回</span></span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    <span class="attr">message</span>: <span class="string">&quot;成功读取&quot;</span>,</span><br><span class="line">                    <span class="attr">value</span>: data.<span class="property">value</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&#x27;值无效&#x27;</span>,</span><br><span class="line">            <span class="attr">value</span>: <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置localStorage和过期时间</span></span><br><span class="line">    set&lt;T = <span class="built_in">any</span>&gt;(<span class="attr">key</span>: <span class="title class_">Str</span>, <span class="attr">value</span>: T, <span class="attr">expire</span>: <span class="title class_">Expire</span> = <span class="title class_">Dictionaries</span>.<span class="property">permanent</span>) &#123;</span><br><span class="line">        <span class="comment">//格式化数据</span></span><br><span class="line">        <span class="keyword">const</span> <span class="attr">data</span>: <span class="title class_">Date</span>&lt;T&gt; = &#123;</span><br><span class="line">            value,</span><br><span class="line">            [<span class="title class_">Dictionaries</span>.<span class="property">expire</span>]: expire</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(key, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    <span class="title function_">remove</span>(<span class="params"><span class="attr">key</span>: <span class="title class_">Str</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//清除</span></span><br><span class="line">    <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">clear</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//rollup.config.js</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"><span class="keyword">import</span> ts <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-typescript2&#x27;</span><span class="comment">//识别入口ts文件</span></span><br><span class="line"><span class="keyword">import</span> &#123; terser &#125; <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-terser&#x27;</span><span class="comment">//代码压缩</span></span><br><span class="line"><span class="keyword">import</span> server <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-serve&#x27;</span><span class="comment">//启动服务</span></span><br><span class="line"><span class="keyword">import</span> livereload <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-livereload&#x27;</span><span class="comment">//热更新</span></span><br><span class="line"><span class="keyword">import</span> replace <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-replace&#x27;</span><span class="comment">//注册浏览器参数</span></span><br><span class="line"><span class="keyword">import</span> &#123; fileURLToPath &#125; <span class="keyword">from</span> <span class="string">&#x27;url&#x27;</span></span><br><span class="line"><span class="keyword">const</span> __filenameNew = <span class="title function_">fileURLToPath</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>)</span><br><span class="line"><span class="keyword">const</span> __dirnameNew = path.<span class="title function_">dirname</span>(__filenameNew)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isDev</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">input</span>: <span class="string">&#x27;./src/index.ts&#x27;</span>,<span class="comment">//入口</span></span><br><span class="line">    <span class="comment">//出口</span></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">file</span>: path.<span class="title function_">resolve</span>(__dirnameNew, <span class="string">&#x27;./lib/index.js&#x27;</span>),</span><br><span class="line">        <span class="comment">// format: &#x27;umd&#x27;,//输出格式</span></span><br><span class="line">        <span class="attr">sourcemap</span>: <span class="literal">true</span>,<span class="comment">//生成sourcemap文件，定位问题，否则定位的代码是打包后的文件</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="title function_">ts</span>(),</span><br><span class="line">        <span class="title function_">isDev</span>() &amp;&amp; <span class="title function_">livereload</span>(),<span class="comment">//热更新组件</span></span><br><span class="line">        <span class="title function_">terser</span>(&#123;</span><br><span class="line">            <span class="attr">compress</span>: &#123;</span><br><span class="line">                <span class="attr">drop_console</span>: !<span class="title function_">isDev</span>(),<span class="comment">//去除console</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),<span class="comment">//压缩文件</span></span><br><span class="line">        <span class="title function_">replace</span>(&#123;</span><br><span class="line">            <span class="string">&#x27;process.env.NODE_ENV&#x27;</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(process.<span class="property">env</span>.<span class="property">NODE_ENV</span>)<span class="comment">//因为process是在node环境的下的参数，在浏览器上是访问不了的，所以需要注册到浏览器上</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="title function_">isDev</span>() &amp;&amp; <span class="title function_">server</span>(&#123;</span><br><span class="line">            <span class="attr">open</span>: <span class="literal">true</span>,<span class="comment">//是否启动打开页面</span></span><br><span class="line">            <span class="attr">port</span>: <span class="number">1988</span>,<span class="comment">//配置端口号</span></span><br><span class="line">            <span class="attr">openPage</span>: <span class="string">&#x27;/public/index.html&#x27;</span>,<span class="comment">//打开的页面</span></span><br><span class="line">        &#125;),</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;使用&lt;code&gt;cookie&lt;/code&gt;是可以设置有效期的，但&lt;code&gt;localStorage&lt;/code&gt;本身是没有该机制的，只能手</summary>
      
    
    
    
    <category term="前端学习" scheme="https://halely.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JavaScript" scheme="https://halely.github.io/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://halely.github.io/tags/TypeScript/"/>
    
    <category term="Rollup" scheme="https://halely.github.io/tags/Rollup/"/>
    
  </entry>
  
  <entry>
    <title>四种常见的JS内存泄漏</title>
    <link href="https://halely.github.io/2023/07/25/%E5%9B%9B%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84JS%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/"/>
    <id>https://halely.github.io/2023/07/25/%E5%9B%9B%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84JS%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/</id>
    <published>2023-07-25T11:57:09.000Z</published>
    <updated>2025-09-15T07:18:53.495Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、意外的全局变量"><a href="#1、意外的全局变量" class="headerlink" title="1、意外的全局变量"></a>1、意外的全局变量</h3><p>未定义的变量会在全局对象创建一个新变量，如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">arg</span>) &#123;</span><br><span class="line">    bar = <span class="string">&quot;this is a hidden global variable&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数<code>foo</code>内部忘记使用<code>var</code>，实际上JS会把bar挂载到全局对象上，意外创建一个全局变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">arg</span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">bar</span> = <span class="string">&quot;this is an explicit global variable&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一个意外的全局变量可能由<code>this</code>创建。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">variable</span> = <span class="string">&quot;potential accidental global&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Foo 调用自己，this 指向了全局对象（window）</span></span><br><span class="line"><span class="comment">// 而不是 undefined</span></span><br><span class="line"><span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure><p><strong>解决方法</strong>：</p><p>在 JavaScript 文件头部加上<code>&#39;use strict&#39;</code>，使用严格模式避免意外的全局变量，此时**上例中的this指向<code>undefined</code>**。如果必须使用全局变量存储大量数据时，确保用完以后把它设置为 null 或者重新定义。</p><h3 id="被遗忘的计时器或回调函数"><a href="#被遗忘的计时器或回调函数" class="headerlink" title="被遗忘的计时器或回调函数"></a>被遗忘的计时器或回调函数</h3><p>计时器<code>setInterval</code>代码很常见</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> someResource = <span class="title function_">getData</span>();</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> node = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;Node&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(node) &#123;</span><br><span class="line">        <span class="comment">// 处理 node 和 someResource</span></span><br><span class="line">        node.<span class="property">innerHTML</span> = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(someResource));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>上面的例子表明，在节点node或者数据不再需要时，定时器依旧指向这些数据。所以哪怕当node节点被移除后，interval 仍旧存活并且垃圾回收器没办法回收，它的依赖也没办法被回收，除非终止定时器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onClick</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    element.<span class="property">innerHTML</span> = <span class="string">&#x27;text&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">element.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, onClick);</span><br></pre></td></tr></table></figure><p>对于上面观察者的例子，一旦它们不再需要（或者关联的对象变成不可达），明确地移除它们非常重要。老的 IE 6 是无法处理循环引用的。因为老版本的 IE 是无法检测 DOM 节点与 JavaScript 代码之间的循环引用，会导致内存泄漏。</p><p><strong>但是</strong>，现代的浏览器（包括 IE 和 Microsoft Edge）使用了更先进的垃圾回收算法（标记清除），已经可以正确检测和处理循环引用了。即回收节点内存时，不必非要调用<code>removeEventListener</code>了</p><h3 id="3、脱离-DOM-的引用"><a href="#3、脱离-DOM-的引用" class="headerlink" title="3、脱离 DOM 的引用"></a>3、脱离 DOM 的引用</h3><p>如果把DOM 存成字典（JSON 键值对）或者数组，此时，同样的 DOM 元素存在两个引用：一个在 DOM 树中，另一个在字典中。那么将来需要把两个引用都清除。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elements = &#123;</span><br><span class="line">    <span class="attr">button</span>: <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;button&#x27;</span>),</span><br><span class="line">    <span class="attr">image</span>: <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;image&#x27;</span>),</span><br><span class="line">    <span class="attr">text</span>: <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doStuff</span>(<span class="params"></span>) &#123;</span><br><span class="line">    image.<span class="property">src</span> = <span class="string">&#x27;http://some.url/image&#x27;</span>;</span><br><span class="line">    button.<span class="title function_">click</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(text.<span class="property">innerHTML</span>);</span><br><span class="line">    <span class="comment">// 更多逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">removeButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 按钮是 body 的后代元素</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;button&#x27;</span>));</span><br><span class="line">    <span class="comment">// 此时，仍旧存在一个全局的 #button 的引用</span></span><br><span class="line">    <span class="comment">// elements 字典。button 元素仍旧在内存中，不能被 GC 回收。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果代码中保存了表格某一个<code>&lt;td&gt;</code>的引用。将来决定删除整个表格的时候，直觉认为 GC 会回收除了已保存的<code>&lt;td&gt;</code>以外的其它节点。实际情况并非如此：此<code>&lt;td&gt;</code>是表格的子节点，子元素与父元素是引用关系。由于代码<strong>保留了<code>&lt;td&gt;</code>的引用</strong>，导致整个表格仍待在内存中。所以保存 DOM 元素引用的时候，要小心谨慎。</p><h3 id="4、闭包"><a href="#4、闭包" class="headerlink" title="4、闭包"></a>4、闭包</h3><p>闭包的关键是匿名函数可以访问父级作用域的变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> theThing = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> replaceThing = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> originalThing = theThing;</span><br><span class="line">  <span class="keyword">var</span> unused = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (originalThing)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">    </span><br><span class="line">  theThing = &#123;</span><br><span class="line">    <span class="attr">longStr</span>: <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1000000</span>).<span class="title function_">join</span>(<span class="string">&#x27;*&#x27;</span>),</span><br><span class="line">    <span class="attr">someMethod</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(someMessage);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setInterval</span>(replaceThing, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>每次调用<code>replaceThing</code>，<code>theThing</code>得到一个包含一个大数组和一个新闭包（<code>someMethod</code>）的新对象。同时，变量<code>unused</code>是一个引用<code>originalThing</code>的闭包（先前的<code>replaceThing</code>又调用了<code>theThing</code>）。<code>someMethod</code>可以通过<code>theThing</code>使用，<code>someMethod</code>与<code>unused</code>分享闭包作用域，尽管<code>unused</code>从未使用，它引用的<code>originalThing</code>迫使它保留在内存中（防止被回收）。</p><p><strong>解决方法</strong>：</p><p>在<code>replaceThing</code>的最后添加<code>originalThing = null</code>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、意外的全局变量&quot;&gt;&lt;a href=&quot;#1、意外的全局变量&quot; class=&quot;headerlink&quot; title=&quot;1、意外的全局变量&quot;&gt;&lt;/a&gt;1、意外的全局变量&lt;/h3&gt;&lt;p&gt;未定义的变量会在全局对象创建一个新变量，如下。&lt;/p&gt;
&lt;figure class=</summary>
      
    
    
    
    <category term="前端学习" scheme="https://halely.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JavaScript" scheme="https://halely.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Rollup构建TS项目 &amp; webpack构建TS项目 &amp; esbuild + swc</title>
    <link href="https://halely.github.io/2023/06/06/Rollup%E6%9E%84%E5%BB%BATS%E9%A1%B9%E7%9B%AE-webpack%E6%9E%84%E5%BB%BATS%E9%A1%B9%E7%9B%AE-esbuild-swc/"/>
    <id>https://halely.github.io/2023/06/06/Rollup%E6%9E%84%E5%BB%BATS%E9%A1%B9%E7%9B%AE-webpack%E6%9E%84%E5%BB%BATS%E9%A1%B9%E7%9B%AE-esbuild-swc/</id>
    <published>2023-06-06T15:32:12.000Z</published>
    <updated>2025-09-15T07:18:53.493Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Rollup构建TS项目"><a href="#Rollup构建TS项目" class="headerlink" title="Rollup构建TS项目"></a>Rollup构建TS项目</h1><p><a href="https://so.csdn.net/so/search?q=Rollup">Rollup</a> 打包很快,体积很小，学习一下</p><p><strong>配置环境</strong></p><ol><li><code>npm init -y</code> 生成 <code>package.json</code></li><li><code>tsc --init</code> 生成 <code>tsconfig.json</code></li><li>创建 <code>rollup.config.js</code></li><li>创建入口问题<code>/src/index.ts</code>文件和<code>public/index.html</code>文件</li></ol><p><strong>安装依赖</strong></p><ol><li>全局安装rollup <code>npm install rollup-g</code></li><li>安装TypeScript   <code>npm install typescript -D</code></li><li>安装TypeScript 转换器 <code>npm install rollup-plugin-typescript2 -D</code></li><li>安装代码压缩插件<code>npm install rollup-plugin-terser -D</code></li><li>安装rollupWeb服务 <code>npm install rollup-plugin-serve -D</code></li><li>安装热更新 <code>npm install rollup-plugin-livereload -D</code></li><li>引入外部依赖 <code>npm install rollup-plugin-node-resolve -D</code></li><li>安装配置环境变量用来区分本地和生产  <code>npm install cross-env -D</code></li><li>替换环境变量给浏览器使用 <code>npm install rollup-plugin-replace -D</code></li></ol><p><strong>配置文件</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rollupTs&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cross-env NODE_ENV=development rollup -c -w&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cross-env NODE_ENV=produaction rollup -c&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;cross-env&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.0.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rollup-plugin-livereload&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rollup-plugin-node-resolve&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rollup-plugin-replace&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rollup-plugin-serve&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rollup-plugin-terser&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.0.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rollup-plugin-typescript2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.31.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;typescript&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.5.5&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>rollup -c</code>:打包命令<br><code>rollup -c -w</code>:启动本地服务命令<br><code>cross-env NODE_ENV=development</code>:配置<strong>node</strong> <code>process.env</code>环境变量用来区分本地和生产，注意，这在浏览器中不能直接获取的，需要插件<code>replace</code>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//rollup.config.js</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"><span class="keyword">import</span> ts <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-typescript2&#x27;</span><span class="comment">//识别入口ts文件</span></span><br><span class="line"><span class="keyword">import</span> &#123; terser &#125; <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-terser&#x27;</span><span class="comment">//代码压缩</span></span><br><span class="line"><span class="keyword">import</span> server <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-serve&#x27;</span><span class="comment">//启动服务</span></span><br><span class="line"><span class="keyword">import</span> livereload <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-livereload&#x27;</span><span class="comment">//热更新</span></span><br><span class="line"><span class="keyword">import</span> replace <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-replace&#x27;</span><span class="comment">//注册浏览器参数</span></span><br><span class="line"><span class="keyword">import</span> &#123; fileURLToPath &#125; <span class="keyword">from</span> <span class="string">&#x27;url&#x27;</span></span><br><span class="line"><span class="keyword">const</span> __filenameNew = <span class="title function_">fileURLToPath</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>)</span><br><span class="line"><span class="keyword">const</span> __dirnameNew = path.<span class="title function_">dirname</span>(__filenameNew)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isDev</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">input</span>: <span class="string">&#x27;./src/index.ts&#x27;</span>,<span class="comment">//入口</span></span><br><span class="line">    <span class="comment">//出口</span></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="comment">//直接使用__dirname 会报错__dirname is not defined in ES module scope，因为rollup需要配置 &quot;type&quot;: &quot;module&quot;,，但是module不支持__dirname，故</span></span><br><span class="line">        <span class="comment">//需要创建__dirnameNew替代</span></span><br><span class="line">        <span class="attr">file</span>: path.<span class="title function_">resolve</span>(__dirnameNew, <span class="string">&#x27;./lib/index.js&#x27;</span>),</span><br><span class="line">        <span class="attr">format</span>: <span class="string">&#x27;umd&#x27;</span>,<span class="comment">//输出格式</span></span><br><span class="line">        <span class="attr">sourcemap</span>: <span class="literal">true</span>,<span class="comment">//生成sourcemap文件，定位问题，否则定位的代码是打包后的文件</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="title function_">ts</span>(),</span><br><span class="line">        <span class="title function_">isDev</span>() &amp;&amp; <span class="title function_">livereload</span>(),<span class="comment">//热更新组件</span></span><br><span class="line">        <span class="title function_">terser</span>(&#123;</span><br><span class="line">            <span class="attr">compress</span>: &#123;</span><br><span class="line">                <span class="attr">drop_console</span>: !<span class="title function_">isDev</span>(),<span class="comment">//去除console</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),<span class="comment">//压缩文件</span></span><br><span class="line">        <span class="title function_">replace</span>(&#123;</span><br><span class="line">            <span class="string">&#x27;process.env.NODE_ENV&#x27;</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(process.<span class="property">env</span>.<span class="property">NODE_ENV</span>)<span class="comment">//因为process是在node环境的下的参数，在浏览器上是访问不了的，所以需要注册到浏览器上</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="title function_">isDev</span>() &amp;&amp; <span class="title function_">server</span>(&#123;</span><br><span class="line">            <span class="attr">open</span>: <span class="literal">true</span>,<span class="comment">//是否启动打开页面</span></span><br><span class="line">            <span class="attr">port</span>: <span class="number">1988</span>,<span class="comment">//配置端口号</span></span><br><span class="line">            <span class="attr">openPage</span>: <span class="string">&#x27;/public/index.html&#x27;</span>,<span class="comment">//打开的页面</span></span><br><span class="line">        &#125;),</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>js代码使用环境变量</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">label</span>: string = <span class="string">&#x27;hale最喜欢八味&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(label)</span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;开发&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;生产&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(process.<span class="property">env</span>.<span class="property">NODE_ENV</span>)</span><br></pre></td></tr></table></figure><p><strong>TS配置需要注意的</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//tsconfig.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES2015&quot;</span><span class="punctuation">,</span> <span class="comment">//需要设置ts配置&quot;module&quot;为&quot;ES2015&quot;,CommonJS无法解析识别ts文件插件rollup-plugin-typescript2</span></span><br><span class="line"><span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">//生成sourcemap文件，定位问题，否则定位的代码是打包后的文件        </span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="Webpack构建TS项目"><a href="#Webpack构建TS项目" class="headerlink" title="Webpack构建TS项目"></a>Webpack构建TS项目</h1><p><strong>配置环境</strong></p><ol><li><code>npm init -y</code> 生成 <code>package.json</code></li><li>创建入口问题<code>/src/index.ts</code>文件和<code>public/index.html</code>文件</li><li><code>tsc --init</code> 生成 <code>tsconfig.json</code></li><li>创建 <code>webpack.config.js</code></li></ol><p><strong>安装依赖</strong></p><ol><li>安装webpack   <code>npm install webpack -D</code></li><li>webpack4以上需要 <code>npm install  webpack-cli -D</code></li><li>编译TS  <code>npm install ts-loader -D</code></li><li>TS环境 <code>npm install typescript -D</code></li><li>热更新服务 <code>npm install  webpack-dev-server -D</code></li><li>HTML模板 <code>npm install html-webpack-plugin -D</code></li></ol><p><strong>配置文件</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpackTs&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack-dev-server&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;html-webpack-plugin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.5.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ts-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^9.4.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;typescript&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.1.6&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;webpack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.88.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;webpack-cil&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.1-security&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;webpack-cli&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.1.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;webpack-dev-server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.15.1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> htmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;./src/index.ts&quot;</span>,<span class="comment">//入口</span></span><br><span class="line">    <span class="comment">//出口</span></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;index.js&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">    <span class="attr">stats</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">    <span class="comment">//配置文件引入</span></span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">extensions</span>: [<span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.js&#x27;</span>],</span><br><span class="line">        <span class="attr">alias</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;@&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./src&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//配置文件使用loader</span></span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">                <span class="attr">use</span>: <span class="string">&quot;ts-loader&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">port</span>: <span class="number">1995</span>,</span><br><span class="line">        <span class="attr">proxy</span>: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//插件</span></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title function_">htmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">template</span>: <span class="string">&quot;./public/index.html&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="esbuild-swc-构建ts项目"><a href="#esbuild-swc-构建ts项目" class="headerlink" title="esbuild + swc 构建ts项目"></a>esbuild + swc 构建ts项目</h1><p>前端工具层出不穷，之前有常用的打包工具<code>webpack</code>，现在有了速度更快的<code>vite</code>。 vite的开发模式是<strong>基于esBuild编译的,打包又是基于rollup</strong>,启动项目是很快的。</p><p><code>esbuild</code>为什么这么快<br>在esbuild的官方介绍中打包<code>threejs</code> 只需要0.37秒 无限接近于亚索的Q技能冷却时间可以说是很快了。</p><p><code>esbuild</code>是<code>go</code>语言编写的并且是多线程执行,性能是js的好几十倍，所以很快。</p><ul><li>无需缓存即可实现基础打包</li><li>支持 ES6 跟 CommonJS 模块</li><li>支持ES 6 Tree Shaking</li><li>体积小</li><li>插件化</li><li>其他</li><li>内置支持编译 jsx</li></ul><p><strong>SWC</strong><br><code>SWC</code>则宣称其比<code>Babel</code>快<strong>20</strong>倍(四核情况下可以快<strong>70</strong>倍)</p><p>wc是用<code>rust</code>写的，所实现的功能跟<code>babel</code>一样，es6语法转es5，但是速度比<code>babel</code>更快，前端基建工具使用rust的是越来越多了，未来可能还会有一个替代postCss的😂。<br>那如果把<code>esbuild + swc</code>结合起来构建那岂不是接近光速 我们来<code>try try</code></p><p><strong>配置环境</strong></p><ol><li><code>npm init -y</code> 生成 <code>package.json</code></li><li><code>tsc --init</code> 生成 <code>tsconfig.json</code></li><li>创建 <code>config.js</code></li><li>创建入口问题<code>/src/index.ts</code>文件和<code>public/index.html</code>文件</li></ol><p><strong>安装依赖</strong></p><ol><li>全局安装 <code>npm install @swc/core esbuild @swc/helpers</code></li><li>安装nodeTs声明 <code>npm install --save-dev @types/node</code></li></ol><p>其中，<code>@swc/core</code> 是 swc 的核心包，用于编译 JavaScript 和 TypeScript 代码；esbuild 是一个快速的 JavaScript 和 TypeScript 构建工具；<code>@swc/helpers</code> 是 swc 的辅助包，用于转换 JSX 代码。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//config.ts</span></span><br><span class="line"><span class="keyword">import</span> esbuild <span class="keyword">from</span> <span class="string">&#x27;esbuild&#x27;</span><span class="comment">//打包工具</span></span><br><span class="line"><span class="keyword">import</span> swc <span class="keyword">from</span> <span class="string">&#x27;@swc/core&#x27;</span><span class="comment">//类似于babel es6 转 es5</span></span><br><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">&#x27;node:fs&#x27;</span></span><br><span class="line"><span class="keyword">await</span> esbuild.<span class="title function_">build</span>(&#123;</span><br><span class="line">    <span class="attr">entryPoints</span>: [<span class="string">&#x27;./index.ts&#x27;</span>], <span class="comment">//入口文件</span></span><br><span class="line">    <span class="attr">bundle</span>: <span class="literal">true</span>, <span class="comment">//模块单独打包</span></span><br><span class="line">    <span class="attr">loader</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;.js&#x27;</span>: <span class="string">&#x27;js&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;.ts&#x27;</span>: <span class="string">&#x27;ts&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;.jsx&#x27;</span>: <span class="string">&#x27;jsx&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;.tsx&#x27;</span>: <span class="string">&#x27;tsx&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">treeShaking</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">define</span>: &#123;</span><br><span class="line">       <span class="string">&#x27;process.env.NODE_ENV&#x27;</span>: <span class="string">&#x27;&quot;production&quot;&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//实现自定义loader</span></span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;swc-loader&quot;</span>,</span><br><span class="line">            <span class="title function_">setup</span>(<span class="params">build</span>) &#123;</span><br><span class="line">                build.<span class="title function_">onLoad</span>(&#123; <span class="attr">filter</span>: <span class="regexp">/\.(js|ts|tsx|jsx)$/</span> &#125;, <span class="function">(<span class="params">args</span>) =&gt;</span> &#123;</span><br><span class="line">                   <span class="comment">// console.log(args);</span></span><br><span class="line">                    <span class="keyword">const</span> content = fs.<span class="title function_">readFileSync</span>(args.<span class="property">path</span>, <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">                    <span class="keyword">const</span> &#123; code &#125; = swc.<span class="title function_">transformSync</span>(content, &#123;</span><br><span class="line">                        <span class="attr">filename</span>: args.<span class="property">path</span></span><br><span class="line">                    &#125;)</span><br><span class="line">                    <span class="keyword">return</span> &#123;</span><br><span class="line">                        <span class="attr">contents</span>: code</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">outdir</span>: <span class="string">&quot;dist&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>测试demo</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">a</span>:<span class="built_in">number</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">b</span>:<span class="built_in">string</span> = <span class="string">&#x27;ikun&#x27;</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; <span class="number">123</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x,fn);</span><br></pre></td></tr></table></figure><p><strong>转移之后的</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> b = <span class="string">&quot;ikun&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x, fn);</span><br></pre></td></tr></table></figure><p>除了上述基本用法之外，swc 和 esbuild 还提供了许多高级用法，可以更好地满足我们的构建需求。</p><p><strong>插件系统</strong></p><p>swc 和 esbuild 都提供了插件系统，可以通过插件来扩展其功能。例如，swc 的插件可以用于优化代码，提高性能。esbuild 的插件则可以用于处理特定类型的文件，或自定义转换规则。</p><p><strong>缓存系统</strong></p><p>swc 和 esbuild 都提供了缓存系统，可以减少重复编译时间。当文件内容没有发生变化时，swc 和 esbuild 会从缓存中读取已编译的代码，以提高构建速度。</p><p><strong>Watch 模式</strong></p><p>swc 和 esbuild 都支持 Watch 模式，可以在文件发生变化时自动重新编译代码。Watch 模式可以减少手动运行构建命令的频率，提高开发效率。</p><p><strong>自定义插件</strong></p><p>最后，我们可以通过编写自定义插件来扩展 swc 和 esbuild 的功能。例如，可以编写一个插件来自动引入 CSS 文件，或者优化 JavaScript 代码。自定义插件可以根据实际需求进行编写，以更好地满足项目的构建需求。</p><p><strong>结论</strong></p><p>本文介绍了如何使用 swc 和 esbuild 来构建一个简单的 TypeScript 应用程序，并讨论了一些高级用法。swc 和 esbuild 都是现代前端构建工具中的代表，它们都提供了快速编译、代码压缩等功能，可以有效提高应用程序的性能。通过学习 swc 和 esbuild 的使用方法，我们可以更好地进行前端工程化开发，提高开发效率和代码质量。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Rollup构建TS项目&quot;&gt;&lt;a href=&quot;#Rollup构建TS项目&quot; class=&quot;headerlink&quot; title=&quot;Rollup构建TS项目&quot;&gt;&lt;/a&gt;Rollup构建TS项目&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://so.csdn.net/s</summary>
      
    
    
    
    <category term="前端学习" scheme="https://halely.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JavaScript" scheme="https://halely.github.io/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://halely.github.io/tags/TypeScript/"/>
    
    <category term="webPack" scheme="https://halely.github.io/tags/webPack/"/>
    
    <category term="Rollup" scheme="https://halely.github.io/tags/Rollup/"/>
    
  </entry>
  
  <entry>
    <title>TypeScrip-学习（七）命名空间、三斜线指令、声明文件、Mixins混入</title>
    <link href="https://halely.github.io/2023/05/27/TypeScrip-%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%83%EF%BC%89/"/>
    <id>https://halely.github.io/2023/05/27/TypeScrip-%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%83%EF%BC%89/</id>
    <published>2023-05-27T16:50:03.000Z</published>
    <updated>2025-09-15T07:18:53.494Z</updated>
    
    <content type="html"><![CDATA[<h1 id="命名空间-namespace"><a href="#命名空间-namespace" class="headerlink" title="命名空间 namespace"></a>命名空间 namespace</h1><p>在工作中无法避免全局变量造成的污染，<code>TypeScript</code>提供了<code>namespace</code> 避免这个问题出现</p><ul><li>内部模块，主要用于组织代码，避免命名冲突。</li><li>命名空间内的类默认私有</li><li>通过 export 暴露</li><li>通过 namespace 关键字定义</li></ul><blockquote><p><strong>TypeScript与ECMAScript 2015一样，任何包含顶级import或者export的文件都被当成一个模块。相反地，如果一个文件不带有顶级的import或者export声明，那么它的内容被视为全局可见的（因此对模块也是可见的）</strong></p></blockquote><p><code>实例</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//命名空间中通过export将想要暴露的部分导出,否则无法读取其值</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">a</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">Time</span>: <span class="built_in">number</span> = <span class="number">1000</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">const</span> fn = &lt;T&gt;(<span class="attr">arg</span>: T): <span class="function"><span class="params">T</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> arg</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fn</span>(<span class="title class_">Time</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">b</span> &#123;</span><br><span class="line">     <span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">Time</span>: <span class="built_in">number</span> = <span class="number">1000</span></span><br><span class="line">     <span class="keyword">export</span> <span class="keyword">const</span> fn = &lt;T&gt;(<span class="attr">arg</span>: T): <span class="function"><span class="params">T</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> arg</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fn</span>(<span class="title class_">Time</span>)</span><br><span class="line">&#125;</span><br><span class="line">a.<span class="property">Time</span></span><br></pre></td></tr></table></figure><p><code>嵌套命名</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">a</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">namespace</span> <span class="title class_">b</span> &#123;</span><br><span class="line">        <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Vue</span> &#123;</span><br><span class="line">            <span class="attr">parameters</span>: <span class="built_in">string</span></span><br><span class="line">            <span class="title function_">constructor</span>(<span class="params"><span class="attr">parameters</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">parameters</span> = parameters</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> v = a.<span class="property">b</span>.<span class="property">Vue</span></span><br><span class="line"><span class="keyword">new</span> <span class="title function_">v</span>(<span class="string">&#x27;1&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>抽离命名空间</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">const</span> a = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//b.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;A&#125; <span class="keyword">from</span> <span class="string">&#x27;./a.ts&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(A.<span class="property">a</span>)</span><br><span class="line"><span class="comment">//简化名称</span></span><br><span class="line"><span class="keyword">import</span> X=A.<span class="property">a</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x)</span><br></pre></td></tr></table></figure><p><code>合并命名空间</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重名的命名空间会合并</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">const</span> a = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">const</span> b =a</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 会合并</span></span><br></pre></td></tr></table></figure><h1 id="三斜线指令"><a href="#三斜线指令" class="headerlink" title="三斜线指令"></a>三斜线指令</h1><p>三斜线指令是包含单个XML标签的单行注释。 注释的内容会做为<strong>编译器指令使用</strong></p><blockquote><p>三斜线指令仅可放在包含它的文件的最顶端。 一个三斜线指令的前面只能出现单行或多行注释，这包括其它的三斜线指令。 如果它们出现在一个语句或声明之后，那么它们会被当做普通的单行注释，并且不具有特殊的涵义。</p></blockquote><p><code>/// &lt;reference path=&quot;...&quot; /&gt;</code>: 是三斜线指令中最常见的一种，它用于声明文件间的 依赖</p><p><strong>三斜线引用</strong>告诉编译器在编译过程中要引入的额外的文件，你也可以把它理解能<code>import</code>，它可以告诉编译器在编译过程中要<strong>引入的额外的文件</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.ts</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; <span class="string">&#x27;a&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//b.ts</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">fn2</span> = (<span class="params"></span>) =&gt; <span class="string">&#x27;b&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//c.ts</span></span><br><span class="line"><span class="comment">///&lt;reference path=&quot;./a.ts&quot; /&gt;</span></span><br><span class="line"><span class="comment">///&lt;reference path=&quot;./b.ts&quot; /&gt;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(A);</span><br></pre></td></tr></table></figure><p>当你想引入声明文件的时候可以使用，如引入<code>nodeJS</code> <code>/// &lt;reference types=&quot;node&quot; /&gt;</code></p><h1 id="声明文件-d-ts"><a href="#声明文件-d-ts" class="headerlink" title="声明文件 d.ts"></a>声明文件 d.ts</h1><p>在开发中我们现在会很频繁的使第三方库，但是我们如果使用TS开发，当使用第三方库时，我们需要引用它的声明文件，才能获得对应的代码补全、接口提示等功能。一般的声明我们需要使用关键字<code>declare</code>  。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">var</span> <span class="comment">//声明全局变量</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="comment">//声明全局方法</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">class</span> <span class="comment">//声明全局类</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">enum</span> <span class="comment">//声明全局枚举类型</span></span><br><span class="line"><span class="keyword">declare</span> namespace <span class="comment">//声明（含有子属性的）全局对象</span></span><br><span class="line"><span class="keyword">interface</span> 和 type //声明全局类型</span><br><span class="line">/// &lt;reference /&gt; 三斜线指令</span><br></pre></td></tr></table></figure><p>当我们使用第三方插件发现报错了，无法读取其值，那么有可能你的第三方没有提供声明文件列如<code>express</code> ，那么你可以尝试使用<code>npm install @types/node -D</code>去下载社区的声明文件，<br>当然也可以简单的手写</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">index.<span class="property">ts</span></span><br><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>, router)</span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/list&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">json</span>(&#123;</span><br><span class="line">        <span class="attr">code</span>: <span class="number">200</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">9001</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">9001</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//express.d.ts</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;express&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Router</span> &#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="attr">path</span>: <span class="built_in">string</span>, <span class="attr">cb</span>: <span class="function">(<span class="params"><span class="attr">req</span>: <span class="built_in">any</span>, <span class="attr">res</span>: <span class="built_in">any</span></span>) =&gt;</span> <span class="built_in">void</span>): <span class="built_in">void</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">App</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="title function_">use</span>(<span class="attr">path</span>: <span class="built_in">string</span>, <span class="attr">router</span>: <span class="built_in">any</span>): <span class="built_in">void</span></span><br><span class="line">        <span class="title function_">listen</span>(<span class="attr">port</span>: <span class="built_in">number</span>, <span class="attr">cb</span>?: <span class="function">() =&gt;</span> <span class="built_in">void</span>): <span class="built_in">void</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Express</span> &#123;</span><br><span class="line">        (): <span class="title class_">App</span></span><br><span class="line">        <span class="title class_">Router</span>(): <span class="title class_">Router</span></span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">express</span>: <span class="title class_">Express</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> express</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Mixins混入"><a href="#Mixins混入" class="headerlink" title="Mixins混入"></a>Mixins混入</h1><p>怎么说呢，就像是合并对象<br><code>对象混入</code><br>就可以使用 <code>Object.assign</code> 合并多个对象</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Name</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Age</span> &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Sex</span> &#123;</span><br><span class="line">    <span class="attr">sex</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> <span class="attr">people1</span>: <span class="title class_">Name</span> = &#123; <span class="attr">name</span>: <span class="string">&quot;小满&quot;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">people2</span>: <span class="title class_">Age</span> = &#123; <span class="attr">age</span>: <span class="number">20</span> &#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">people3</span>: <span class="title class_">Sex</span> = &#123; <span class="attr">sex</span>: <span class="number">1</span> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> people = <span class="title class_">Object</span>.<span class="title function_">assign</span>(people1,people2,people3);<span class="comment">//people 会被推断成一个交差类型 Name &amp; Age &amp; sex;</span></span><br></pre></td></tr></table></figure><p><code>类的混入</code></p><p>首先声明两个mixins类 <strong>（严格模式要关闭不然编译不过）</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="title function_">changeType</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">type</span> = !<span class="variable language_">this</span>.<span class="property">type</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line">    <span class="title function_">getName</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//首先应该注意到的是，没使用extends而是使用implements</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">implements</span> A,B&#123;</span><br><span class="line">    <span class="attr">type</span>:<span class="built_in">boolean</span></span><br><span class="line">    <span class="attr">changeType</span>:<span class="function">()=&gt;</span><span class="built_in">void</span>;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">getName</span>:<span class="function">()=&gt;</span> <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//然后创建帮助函数，做混入操作。 它会遍历mixins上的所有属性，并复制到目标上去，把之前的占位属性替换成真正的实现代码</span></span><br><span class="line"><span class="title class_">Mixins</span>(C, [A, B])</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Mixins</span>(<span class="params"><span class="attr">curCls</span>: <span class="built_in">any</span>, <span class="attr">itemCls</span>: <span class="built_in">any</span>[]</span>) &#123;</span><br><span class="line">    itemCls.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(item.<span class="property"><span class="keyword">prototype</span></span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">            curCls.<span class="property"><span class="keyword">prototype</span></span>[name] = item.<span class="property"><span class="keyword">prototype</span></span>[name]</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;命名空间-namespace&quot;&gt;&lt;a href=&quot;#命名空间-namespace&quot; class=&quot;headerlink&quot; title=&quot;命名空间 namespace&quot;&gt;&lt;/a&gt;命名空间 namespace&lt;/h1&gt;&lt;p&gt;在工作中无法避免全局变量造成的污染，&lt;cod</summary>
      
    
    
    
    <category term="前端学习" scheme="https://halely.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JavaScript" scheme="https://halely.github.io/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://halely.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScrip-学习（六）tsconfig.json配置</title>
    <link href="https://halely.github.io/2023/05/26/TypeScrip-%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%85%AD%EF%BC%89/"/>
    <id>https://halely.github.io/2023/05/26/TypeScrip-%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%85%AD%EF%BC%89/</id>
    <published>2023-05-26T16:50:03.000Z</published>
    <updated>2025-09-15T07:18:53.494Z</updated>
    
    <content type="html"><![CDATA[<p>学习TS必须要对TS的配置有一定了解</p><p><strong>生成tsconfig.json 文件</strong>  – <code>tsc --init</code>命令生成</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;incremental&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// TS编译器在第一次编译之后会生成一个存储编译信息的文件，第二次编译会在第一次的基础上进行增量编译，可以提高编译的速度</span></span><br><span class="line">  <span class="attr">&quot;tsBuildInfoFile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./buildFile&quot;</span><span class="punctuation">,</span> <span class="comment">// 增量编译文件的存储位置</span></span><br><span class="line">  <span class="attr">&quot;diagnostics&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 打印诊断信息 </span></span><br><span class="line">  <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES5&quot;</span><span class="punctuation">,</span> <span class="comment">// 目标语言的版本</span></span><br><span class="line">  <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CommonJS&quot;</span><span class="punctuation">,</span> <span class="comment">// 生成代码的模板标准</span></span><br><span class="line">  <span class="attr">&quot;outFile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./app.js&quot;</span><span class="punctuation">,</span> <span class="comment">// 将多个相互依赖的文件生成一个文件，可以用在AMD模块中，即开启时应设置&quot;module&quot;: &quot;AMD&quot;,</span></span><br><span class="line">  <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;DOM&quot;</span><span class="punctuation">,</span> <span class="string">&quot;ES2015&quot;</span><span class="punctuation">,</span> <span class="string">&quot;ScriptHost&quot;</span><span class="punctuation">,</span> <span class="string">&quot;ES2019.Array&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// TS需要引用的库，即声明文件，es5 默认引用dom、es5、scripthost,如需要使用es的高级版本特性，通常都需要配置，如es8的数组新特性需要引入&quot;ES2019.Array&quot;,</span></span><br><span class="line">  <span class="attr">&quot;allowJS&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 允许编译器编译JS，JSX文件</span></span><br><span class="line">  <span class="attr">&quot;checkJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 允许在JS文件中报错，通常与allowJS一起使用</span></span><br><span class="line">  <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist&quot;</span><span class="punctuation">,</span> <span class="comment">// 指定输出目录</span></span><br><span class="line">  <span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./&quot;</span><span class="punctuation">,</span> <span class="comment">// 指定输出文件目录(用于输出)，用于控制输出目录结构</span></span><br><span class="line">  <span class="attr">&quot;declaration&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 生成声明文件，开启后会自动生成声明文件</span></span><br><span class="line">  <span class="attr">&quot;declarationDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./file&quot;</span><span class="punctuation">,</span> <span class="comment">// 指定生成声明文件存放目录</span></span><br><span class="line">  <span class="attr">&quot;emitDeclarationOnly&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 只生成声明文件，而不会生成js文件</span></span><br><span class="line">  <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 生成目标文件的sourceMap文件</span></span><br><span class="line">  <span class="attr">&quot;inlineSourceMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 生成目标文件的inline SourceMap，inline SourceMap会包含在生成的js文件中</span></span><br><span class="line">  <span class="attr">&quot;declarationMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 为声明文件生成sourceMap</span></span><br><span class="line">  <span class="attr">&quot;typeRoots&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 声明文件目录，默认时node_modules/@types</span></span><br><span class="line">  <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 加载的声明文件包</span></span><br><span class="line">  <span class="attr">&quot;removeComments&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 删除注释 </span></span><br><span class="line">  <span class="attr">&quot;noEmit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 不输出文件,即编译后不会生成任何js文件</span></span><br><span class="line">  <span class="attr">&quot;noEmitOnError&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 发送错误时不输出任何文件</span></span><br><span class="line">  <span class="attr">&quot;noEmitHelpers&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 不生成helper函数，减小体积，需要额外安装，常配合importHelpers一起使用</span></span><br><span class="line">  <span class="attr">&quot;importHelpers&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 通过tslib引入helper函数，文件必须是模块</span></span><br><span class="line">  <span class="attr">&quot;downlevelIteration&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 降级遍历器实现，如果目标源是es3/5，那么遍历器会有降级的实现</span></span><br><span class="line">  <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 开启所有严格的类型检查</span></span><br><span class="line">  <span class="attr">&quot;alwaysStrict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 在代码中注入&#x27;use strict&#x27;</span></span><br><span class="line">  <span class="attr">&quot;noImplicitAny&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 不允许隐式的any类型</span></span><br><span class="line">  <span class="attr">&quot;strictNullChecks&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 不允许把null、undefined赋值给其他类型的变量</span></span><br><span class="line">  <span class="attr">&quot;strictFunctionTypes&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 不允许函数参数双向协变</span></span><br><span class="line">  <span class="attr">&quot;strictPropertyInitialization&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 类的实例属性必须初始化</span></span><br><span class="line">  <span class="attr">&quot;strictBindCallApply&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 严格的bind/call/apply检查</span></span><br><span class="line">  <span class="attr">&quot;noImplicitThis&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 不允许this有隐式的any类型</span></span><br><span class="line">  <span class="attr">&quot;noUnusedLocals&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 检查只声明、未使用的局部变量(只提示不报错)</span></span><br><span class="line">  <span class="attr">&quot;noUnusedParameters&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 检查未使用的函数参数(只提示不报错)</span></span><br><span class="line">  <span class="attr">&quot;noFallthroughCasesInSwitch&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 防止switch语句贯穿(即如果没有break语句后面不会执行)</span></span><br><span class="line">  <span class="attr">&quot;noImplicitReturns&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">//每个分支都会有返回值</span></span><br><span class="line">  <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 允许export=导出，由import from 导入</span></span><br><span class="line">  <span class="attr">&quot;allowUmdGlobalAccess&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 允许在模块中全局变量的方式访问umd模块</span></span><br><span class="line">  <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span> <span class="comment">// 模块解析策略，ts默认用node的解析策略，即相对的方式导入</span></span><br><span class="line">  <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./&quot;</span><span class="punctuation">,</span> <span class="comment">// 解析非相对模块的基地址，默认是当前目录</span></span><br><span class="line">  <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 路径映射，相对于baseUrl</span></span><br><span class="line">    <span class="comment">// 如使用jq时不想使用默认版本，而需要手动指定版本，可进行如下配置</span></span><br><span class="line">    <span class="attr">&quot;jquery&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;node_modules/jquery/dist/jquery.min.js&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;rootDirs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src&quot;</span><span class="punctuation">,</span><span class="string">&quot;out&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 将多个目录放在一个虚拟目录下，用于运行时，即编译后引入文件的位置可能发生变化，这也设置可以虚拟src和out在同一个目录下，不用再去改变路径也不会报错</span></span><br><span class="line">  <span class="attr">&quot;listEmittedFiles&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 打印输出文件</span></span><br><span class="line">  <span class="attr">&quot;listFiles&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="comment">// 打印编译的文件(包括引用的声明文件)</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 指定一个匹配列表（属于自动指定该路径下的所有ts相关文件）</span></span><br><span class="line"><span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">   <span class="string">&quot;src/**/*&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// 指定一个排除列表（include的反向操作）</span></span><br><span class="line"> <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">   <span class="string">&quot;demo.ts&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// 指定哪些文件使用该配置（属于手动一个个指定文件）</span></span><br><span class="line"> <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">   <span class="string">&quot;demo.ts&quot;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;学习TS必须要对TS的配置有一定了解&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;生成tsconfig.json 文件&lt;/strong&gt;  – &lt;code&gt;tsc --init&lt;/code&gt;命令生成&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;t</summary>
      
    
    
    
    <category term="前端学习" scheme="https://halely.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JavaScript" scheme="https://halely.github.io/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://halely.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 内存空间详解</title>
    <link href="https://halely.github.io/2023/05/16/JavaScript-%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%E8%AF%A6%E8%A7%A3/"/>
    <id>https://halely.github.io/2023/05/16/JavaScript-%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%E8%AF%A6%E8%A7%A3/</id>
    <published>2023-05-16T10:43:51.000Z</published>
    <updated>2025-09-15T07:18:53.493Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p>我们先看下面简单的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">foo</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure><p>这样就会报错<br><img src="http://resource.muyiy.cn/image/2019-07-24-060211.png"></p><p>某些情况下，调用堆栈中函数调用的数量超出了调用堆栈的实际大小，浏览器会抛出一个错误终止运行。上面的就是无限循环调用导致。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;引入&quot;&gt;&lt;a href=&quot;#引入&quot; class=&quot;headerlink&quot; title=&quot;引入&quot;&gt;&lt;/a&gt;引入&lt;/h1&gt;&lt;p&gt;我们先看下面简单的代码&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut</summary>
      
    
    
    
    <category term="前端学习" scheme="https://halely.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JavaScript" scheme="https://halely.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中执行上下文和执行栈</title>
    <link href="https://halely.github.io/2023/05/15/JavaScript-%E4%B8%AD%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E5%92%8C%E6%89%A7%E8%A1%8C%E6%A0%88/"/>
    <id>https://halely.github.io/2023/05/15/JavaScript-%E4%B8%AD%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E5%92%8C%E6%89%A7%E8%A1%8C%E6%A0%88/</id>
    <published>2023-05-15T10:54:25.000Z</published>
    <updated>2025-09-15T07:18:53.493Z</updated>
    
    <content type="html"><![CDATA[<h1 id="理解执行上下文"><a href="#理解执行上下文" class="headerlink" title="理解执行上下文"></a>理解执行上下文</h1><p> <strong>执行上下文</strong>是当前<code>JavaScript</code>代码<code>被解析</code>和<code>执行时所在环境</code>的<strong>抽象概念</strong></p><h2 id="执行上下文的类型"><a href="#执行上下文的类型" class="headerlink" title="执行上下文的类型"></a>执行上下文的类型</h2><p>执行上下文总共有三种类型</p><ul><li><strong>全局执行上下文</strong>：只有一个，浏览器中的全局对象就是 window 对象，this 指向这个全局对象。</li><li><strong>函数执行上下文</strong>：存在无数个，只有在函数被调用的时候才会被创建，每次调用函数都会创建一个新的执行上下文。</li><li><strong>Eval 函数执行上下文</strong>： 指的是运行在 eval 函数中的代码，很少用而且不建议使用</li></ul><h2 id="执行栈"><a href="#执行栈" class="headerlink" title="执行栈"></a>执行栈</h2><p>执行栈，也叫调用栈，具有<code>LIFO（后进先出）</code>结构，用于存储在代码执行期间创建的所有执行上下文。<br>首次运行JS代码时，会创建一个<strong>全局执行上下文</strong>并Push到当前的执行栈中。每当发生函数调用，引擎都会为该函数创建一个新的函数执行上下文并Push到当前执行栈的栈顶。<br>根据执行栈<code>LIFO</code>规则，当栈顶函数运行完成后，其对应的函数执行上下文将会从执行栈中Pop出，上下文控制权将移到当前执行栈的下一个执行上下文。</p><h2 id="执行上下文的创建"><a href="#执行上下文的创建" class="headerlink" title="执行上下文的创建"></a>执行上下文的创建</h2><p>执行上下文的创建分两个阶段:<strong>创建阶段</strong>、<strong>执行阶段</strong></p><p><strong>创建阶段</strong></p><ol><li><p>确定 this 的值，也被称为 <code>This Binding</code>。</p><ul><li><strong>全局</strong>执行上下文中，this 的值指向全局对象，在浏览器中this 的值指向 window对象，而在nodejs中指向这个文件的module对象。</li><li><strong>函数</strong>执行上下文中，this 的值取决于函数的调用方式。具体有：<code>默认绑定</code>、<code>隐式绑定</code>、<code>显式绑定（硬绑定）</code>、<code>new绑定</code>、<code>箭头函数</code></li></ul></li><li><p><code>LexicalEnvironment（词法环境）</code> 组件被创建。</p><ul><li><strong>环境记录</strong>：存储变量和函数声明的实际位置</li><li><strong>对外部环境的引用</strong>：可以访问其外部词法环境,全局环境外部环境引用为<code>null</code></li></ul></li><li><p><code>VariableEnvironment（变量环境）</code> 组件被创建。<br>变量环境也是一个词法环境，因此它具有上面定义的词法环境的所有属性。<br>在 ES6 中，<strong>词法环境</strong>和<strong>变量环境</strong>的区别在于前者用于存储<strong>函数声明和变量</strong> <code>let</code> <strong>和</strong> <code>const</code> <strong>绑定，而后者仅用于存储变量</strong><code>var</code>绑定。</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//伪代码</span></span><br><span class="line"><span class="title class_">ExecutionContext</span> = &#123;  </span><br><span class="line">    <span class="title class_">ThisBinding</span> = <span class="language-xml"><span class="tag">&lt;<span class="name">this</span> <span class="attr">value</span>&gt;</span>,     // 确定this </span></span><br><span class="line"><span class="language-xml">    LexicalEnvironment = &#123; ... &#125;,   // 词法环境</span></span><br><span class="line"><span class="language-xml">    VariableEnvironment = &#123; ... &#125;,  // 变量环境</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>加餐:变量提升的原因：在创建阶段，函数声明存储在环境中，而变量会被设置为 <code>undefined</code>（在 <code>var</code> 的情况下）或保持未初始化（在 <code>let</code> 和 <code>const</code> 的情况下）。所以这就是为什么可以在声明之前访问 <code>var</code> 定义的变量（尽管是 <code>undefined</code> ），但如果在声明之前访问 <code>let</code> 和 <code>const</code> 定义的变量就会提示引用错误的原因。这就是所谓的变量提升。<strong>函数提升&gt;变量提升</strong></p></blockquote><p><strong>执行阶段</strong></p><p>此阶段，完成对所有变量的分配，最后执行代码。<br>如果 <code>Javascript</code> 引擎在源代码中声明的实际位置找不到 <code>let</code> 变量的值，那么将为其分配 <code>undefined</code> 值</p><h1 id="深入之执行上下文栈和变量对象"><a href="#深入之执行上下文栈和变量对象" class="headerlink" title="深入之执行上下文栈和变量对象"></a>深入之执行上下文栈和变量对象</h1><p>JS是单线程的语言，执行顺序肯定是顺序执行，但是JS 引擎<strong>并不是</strong>一行一行地分析和执行程序，<strong>而是</strong>一段一段地分析执行，会先进行编译阶段然后才是执行阶段。</p><h2 id="执行上下文栈"><a href="#执行上下文栈" class="headerlink" title="执行上下文栈"></a>执行上下文栈</h2><p>因为JS引擎创建了很多的执行上下文，所以JS引擎创建了执行上下文栈（Execution context stack，ECS）来管理执行上下文。<br>当 JavaScript 初始化的时候会向执行上下文栈压入一个全局执行上下文，并且只有当整个应用程序结束的时候，执行栈才会被清空，所以程序结束之前， 执行栈最底部永远有个全局执行上下文。</p><h2 id="函数上下文"><a href="#函数上下文" class="headerlink" title="函数上下文"></a>函数上下文</h2><p>在函数上下文中，用活动对象(activation object, AO)来表示变量对象</p><ol><li><strong>变量对象（VO）</strong>是规范上或者是JS引擎上实现的，并不能在JS环境中直接访问。</li><li>当进入到一个执行上下文后，这个变量对象才会被激活，所以叫<strong>活动对象（AO）</strong>，这时候活动对象上的各种属性才能被访问。</li></ol><p>执行上下文的代码会分成两个阶段进行处理:1.<strong>进入执行上下文</strong>;2.<strong>代码执行</strong></p><p>进入执行上下文:很明显，这个时候还没有执行代码,此时的<strong>变量对象</strong>会包括（如下顺序初始化）</p><ul><li>函数的所有形参 (only函数上下文)：没有实参，属性值设为undefined。</li><li>函数声明：如果变量对象已经存在相同名称的属性，则完全替换这个属性。</li><li>变量声明：如果变量名称跟已经声明的形参或函数相同，则变量声明不会干扰已经存在的这类属性。</li></ul><p><strong>总结</strong>:</p><ol><li>全局上下文的变量对象初始化是全局对象</li><li>函数上下文的变量对象初始化只包括 Arguments 对象</li><li>在进入执行上下文时会给变量对象添加形参、函数声明、变量声明等初始的属性值</li><li>在代码执行阶段，会再次修改变量对象的属性值</li></ol><blockquote><p>借鉴<a href="https://muyiy.cn/blog/1/1.1.html#%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E7%9A%84%E7%B1%BB%E5%9E%8B">文章</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;理解执行上下文&quot;&gt;&lt;a href=&quot;#理解执行上下文&quot; class=&quot;headerlink&quot; title=&quot;理解执行上下文&quot;&gt;&lt;/a&gt;理解执行上下文&lt;/h1&gt;&lt;p&gt; &lt;strong&gt;执行上下文&lt;/strong&gt;是当前&lt;code&gt;JavaScript&lt;/code&gt;代</summary>
      
    
    
    
    <category term="前端学习" scheme="https://halely.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JavaScript" scheme="https://halely.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScrip-学习（八）装饰器Decorator</title>
    <link href="https://halely.github.io/2023/04/28/TypeScrip-%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%85%AB%EF%BC%89/"/>
    <id>https://halely.github.io/2023/04/28/TypeScrip-%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%85%AB%EF%BC%89/</id>
    <published>2023-04-28T16:07:38.000Z</published>
    <updated>2025-09-15T07:18:53.494Z</updated>
    
    <content type="html"><![CDATA[<h1 id="装饰器-Decorator"><a href="#装饰器-Decorator" class="headerlink" title="装饰器 Decorator"></a>装饰器 Decorator</h1><p>它是一项<strong>实验性特性</strong>，在未来的版本中可能会发生改变<br>它们不仅增加了代码的可读性，清晰地表达了意图，而且提供一种方便的手段，增加或修改类的功能</p><p>启用实验性的装饰器特性，必须在命令行或<code>tsconfig.json</code>里启用编译器选项</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="attr">&quot;experimentalDecorators&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>    </span><br><span class="line"><span class="attr">&quot;emitDecoratorMetadata&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>装饰器</strong>是一种特殊类型的声明，它能够被附加到<strong>类声明，方法， 访问符，属性或参数上</strong>。<br><strong>学习点</strong></p><ol><li>类装饰器：<code>ClassDecorator</code></li><li>方法装饰器：<code>MethodDecorator</code></li><li>属性装饰器：<code>PropertyDecorator</code></li><li>参数装饰器：<code>ParameterDecorator</code></li><li>装饰器工厂</li></ol><h2 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h2><p>定义一个类装饰器函数 他会把<code>Http</code>的构造函数传入你的<code>Base</code>函数当做第一个参数,注意是<strong>构造函数不是原型</strong></p><blockquote><p>优势：当原先的类有很多业务代码，无法全部理清，但是又需要添加新的方法或属性。因为迭代器返回的是构造函数，可以在回调方法中加入你所需要的业务，这是不影响原先业务</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Base</span>:<span class="title class_">ClassDecorator</span>=<span class="function">(<span class="params">target</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(target)</span><br><span class="line">  target.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">Name</span>=<span class="string">&#x27;hale&#x27;</span>;</span><br><span class="line">  target.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">fn</span>=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;本人单身&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Base</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Http</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> http=<span class="keyword">new</span> <span class="title class_">Http</span>() <span class="keyword">as</span> <span class="built_in">any</span>;</span><br><span class="line">http.<span class="title function_">fn</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(http.<span class="property">Name</span>)</span><br></pre></td></tr></table></figure><h2 id="方法装饰器"><a href="#方法装饰器" class="headerlink" title="方法装饰器"></a>方法装饰器</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Get</span> = (<span class="params"><span class="attr">url</span>: <span class="built_in">string</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">fn</span>: <span class="title class_">MethodDecorator</span> = <span class="function">(<span class="params">target, key, <span class="attr">descriptor</span>: <span class="title class_">PropertyDescriptor</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(target, key, descriptor)</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * @description 它的返回参数有三个：</span></span><br><span class="line"><span class="comment">    * @target 对于静态成员来说是类的构造函数，对于实例成员是类的原型对象</span></span><br><span class="line"><span class="comment">    * @key 成员的名字。</span></span><br><span class="line"><span class="comment">    * @descriptor 成员的属性描述符。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    axios.<span class="title function_">get</span>(url).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      descriptor.<span class="title function_">value</span>(res.<span class="property">data</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fn</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Http</span> &#123;</span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">&#x27;https://api.apiopen.top/api/getUserInfoForId/1&#x27;</span>)</span><br><span class="line">  <span class="title function_">getList</span>(<span class="params"><span class="attr">data</span>: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> http = <span class="keyword">new</span> <span class="title class_">Http</span>()</span><br></pre></td></tr></table></figure><h2 id="装饰器工厂"><a href="#装饰器工厂" class="headerlink" title="装饰器工厂"></a>装饰器工厂</h2><p>其实也就是一个高阶函数 外层的函数接受值,里层的函数最终接受类的构造函数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Base</span> = (<span class="params"><span class="attr">params</span>: <span class="built_in">string</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">fn</span>: <span class="title class_">ClassDecorator</span> = <span class="function">(<span class="params"><span class="attr">target</span>:<span class="title class_">Function</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(target)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(params)</span><br><span class="line">    target.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">Name</span> = <span class="string">&#x27;hale&#x27;</span>;</span><br><span class="line">    target.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getFn</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;本人单身&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fn</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Base</span>(<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Http</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> http=<span class="keyword">new</span> <span class="title class_">Http</span>() <span class="keyword">as</span> <span class="built_in">any</span>;</span><br><span class="line">http.<span class="title function_">fn</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(http.<span class="property">Name</span>)</span><br></pre></td></tr></table></figure><h2 id="参数装饰器"><a href="#参数装饰器" class="headerlink" title="参数装饰器"></a>参数装饰器</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;reflect-metadata&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Get</span> = (<span class="params"><span class="attr">url</span>: <span class="built_in">string</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">fn</span>: <span class="title class_">MethodDecorator</span> = <span class="function">(<span class="params">target, key, <span class="attr">descriptor</span>: <span class="title class_">PropertyDescriptor</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> metadata=<span class="title class_">Reflect</span>.<span class="title function_">getMetadata</span>(<span class="string">&#x27;key&#x27;</span>,target);<span class="comment">//获取元数据</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(metadata)</span><br><span class="line">    axios.<span class="title function_">get</span>(url).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      descriptor.<span class="title function_">value</span>(metadata?res[metadata]:res)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fn</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Result</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">fn</span>: <span class="title class_">ParameterDecorator</span> = <span class="function">(<span class="params">target, propertyKey, parameterIndex</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * @description 它的返回参数有三个：</span></span><br><span class="line"><span class="comment">    * @target 对于静态成员来说是类的构造函数，对于实例成员是类的原型对象</span></span><br><span class="line"><span class="comment">    * @key 成员的名字。</span></span><br><span class="line"><span class="comment">    * @parameterIndex 参数对应的索引</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">//设置元数据</span></span><br><span class="line">    <span class="title class_">Reflect</span>.<span class="title function_">defineMetadata</span>(<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;data&#x27;</span>, target)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fn</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Http</span> &#123;</span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">&#x27;https://api.apiopen.top/api/getUserInfoForId/1&#x27;</span>)</span><br><span class="line">  <span class="title function_">getList</span>(<span class="params"> <span class="meta">@Result</span>() <span class="attr">data</span>: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> http = <span class="keyword">new</span> <span class="title class_">Http</span>()</span><br></pre></td></tr></table></figure><blockquote><p>参数装饰器的优先级大于方法装饰器</p></blockquote><h2 id="属性装饰器"><a href="#属性装饰器" class="headerlink" title="属性装饰器"></a>属性装饰器</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Name</span>: <span class="title class_">PropertyDecorator</span> = <span class="function">(<span class="params">target, propertyKey</span>)=&gt;</span>&#123;</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * @description 它的返回参数有两个：</span></span><br><span class="line"><span class="comment">    * @target 对于静态成员来说是类的构造函数，对于实例成员是类的原型对象</span></span><br><span class="line"><span class="comment">    * @propertyKey 成员的名字。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(target, propertyKey)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Http</span> &#123;</span><br><span class="line">  <span class="meta">@Name</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;装饰器-Decorator&quot;&gt;&lt;a href=&quot;#装饰器-Decorator&quot; class=&quot;headerlink&quot; title=&quot;装饰器 Decorator&quot;&gt;&lt;/a&gt;装饰器 Decorator&lt;/h1&gt;&lt;p&gt;它是一项&lt;strong&gt;实验性特性&lt;/strong&gt;</summary>
      
    
    
    
    <category term="前端学习" scheme="https://halely.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="JavaScript" scheme="https://halely.github.io/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://halely.github.io/tags/TypeScript/"/>
    
  </entry>
  
</feed>
