<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不练剑的温不胜</title>
  
  <subtitle>这是一个流行离开的世界,但是我们都不擅长告别</subtitle>
  <link href="https://halely.github.io/atom.xml" rel="self"/>
  
  <link href="https://halely.github.io/"/>
  <updated>2023-10-07T03:12:59.314Z</updated>
  <id>https://halely.github.io/</id>
  
  <author>
    <name>haleLy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>node介绍</title>
    <link href="https://halely.github.io/2023/10/07/node%E4%BB%8B%E7%BB%8D/"/>
    <id>https://halely.github.io/2023/10/07/node%E4%BB%8B%E7%BB%8D/</id>
    <published>2023-10-07T03:01:34.000Z</published>
    <updated>2023-10-07T03:12:59.314Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ol><li><a href="https://nodejs.org/zh-cn">nodejs</a> 并不是<code>JavaScript</code>应用，也不是编程语言，因为编程语言使用的<code>JavaScript</code>,<code>nodejs</code> 是 <code>JavaScript</code>的运行时环境。</li></ol><p>  <img src="/img/postImg/node.png"></p><ol start="2"><li><p><code>Nodejs</code>是构建在V8引擎之上的，V8引擎是由C/C++编写的，因此我们的JavaSCript代码需要由C/C++转化后再执行。</p></li><li><p><code>NodeJs</code>使用异步 I/O 和<a href="https://so.csdn.net/so/search?q=%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8">事件驱动</a>的设计理念，可以高效地处理大量并发请求，提供了非阻塞式 I/O 接口和事件循环机制，使得开发人员可以编写高性能、可扩展的应用程序,异步I/O最终都是由libuv 事件循环库去实现的。</p></li><li><p><code>NodeJs</code>使用npm 作为包管理工具类似于python的pip，或者是java的Maven，目前npm拥有上百万个模块。<br><a href="https://www.npmjs.com/">https://www.npmjs.com/</a></p></li><li><p><code>nodejs</code>适合干一些IO密集型应用，不适合CPU密集型应用，nodejsIO依靠libuv有很强的处理能力，而CPU因为nodejs单线程原因，容易造成CPU占用率高，如果非要做CPU密集型应用，可以使用C++插件编写 或者nodejs提供的<code>cluster</code>。(CPU密集型指的是图像的处理 或者音频处理需要大量数据结构 + 算法)</p></li></ol><h1 id="nodeJs-大致架构图"><a href="#nodeJs-大致架构图" class="headerlink" title="nodeJs 大致架构图"></a>nodeJs 大致架构图</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://nodejs.org/zh-cn&quot;&gt;nodejs&lt;/a&gt; 并不是&lt;code&gt;JavaScrip</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="https://halely.github.io/tags/JavaScript/"/>
    
    <category term="node" scheme="https://halely.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>vue搭建和配置</title>
    <link href="https://halely.github.io/2023/08/30/vue%E6%90%AD%E5%BB%BA%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
    <id>https://halely.github.io/2023/08/30/vue%E6%90%AD%E5%BB%BA%E5%92%8C%E9%85%8D%E7%BD%AE/</id>
    <published>2023-08-30T09:44:26.000Z</published>
    <updated>2023-08-30T09:50:29.125Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue2"><a href="#vue2" class="headerlink" title="vue2"></a>vue2</h1><h1 id="vue3"><a href="#vue3" class="headerlink" title="vue3"></a>vue3</h1><p>Vue3内置的构建工具是Vite,<br>vite的优势：</p><ul><li><code>冷服务</code>   默认的构建目标浏览器是能 在 script 标签上支持原生 ESM 和 原生 ESM 动态导入</li><li><code>HMR</code>  速度快到惊人的 模块热更新（HMR）</li><li><code>Rollup打包</code>  它使用 Rollup 打包你的代码，并且它是预配置的 并且支持大部分rollup插件</li></ul><h2 id="vite构建"><a href="#vite构建" class="headerlink" title="vite构建"></a>vite构建</h2><p><em>npm</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init vite@latest</span><br></pre></td></tr></table></figure><p><em>yarn</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn create vite</span><br></pre></td></tr></table></figure><h2 id="vue直接构建"><a href="#vue直接构建" class="headerlink" title="vue直接构建"></a>vue直接构建</h2><p>这个配置比yarn配置会更详细一点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init vue@latest</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vue2&quot;&gt;&lt;a href=&quot;#vue2&quot; class=&quot;headerlink&quot; title=&quot;vue2&quot;&gt;&lt;/a&gt;vue2&lt;/h1&gt;&lt;h1 id=&quot;vue3&quot;&gt;&lt;a href=&quot;#vue3&quot; class=&quot;headerlink&quot; title=&quot;vue3&quot;&gt;&lt;/a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>浏览器输入url到底发生了什么</title>
    <link href="https://halely.github.io/2023/08/30/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5url%E5%88%B0%E5%BA%95%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/"/>
    <id>https://halely.github.io/2023/08/30/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5url%E5%88%B0%E5%BA%95%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/</id>
    <published>2023-08-30T06:20:27.000Z</published>
    <updated>2023-08-30T10:08:23.905Z</updated>
    
    <content type="html"><![CDATA[<p>1.URL 解析：判断是否是合法url、HSTS会强制判断是否是安全的协议、是否存在访问限制、检查本地是否有缓存<br>2.DNS查找柜子</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.URL 解析：判断是否是合法url、HSTS会强制判断是否是安全的协议、是否存在访问限制、检查本地是否有缓存&lt;br&gt;2.DNS查找柜子&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Set和Map &amp; weakSet和weakMap</title>
    <link href="https://halely.github.io/2023/08/28/Set%E5%92%8CMap-weakSet%E5%92%8CweakMap/"/>
    <id>https://halely.github.io/2023/08/28/Set%E5%92%8CMap-weakSet%E5%92%8CweakMap/</id>
    <published>2023-08-28T07:03:45.000Z</published>
    <updated>2023-08-31T02:00:18.301Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在我们<code>ES5</code>的开发过程中，我们很多时间都在使用<code>array</code>和<code>object</code>,数组的去重对象的遍历等等都是为手熟尔，在<code>ES6</code>又添加了<code>Set和Map</code>和弱类型<code>weakSet和weakMap</code></p><h1 id="详情"><a href="#详情" class="headerlink" title="详情"></a>详情</h1><p><strong>1. Set</strong><br>集合是由一组无序且唯一(即不能重复)的项组成的，可以想象成集合是一个既没有重复元素，也没有顺序概念的数组<br>操作方法：</p><ul><li>add(value)：添加某个值，返回 Set 结构本身。</li><li>delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。</li><li>has(value)：返回一个布尔值，表示该值是否为 Set 的成员。</li><li>clear()：清除所有成员，无返回值。</li><li>size: 返回set数据结构的数据长度</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> setH=<span class="built_in">Set</span>&lt;<span class="built_in">number</span>&gt; =<span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]);</span><br><span class="line">setH.add(<span class="number">5</span>);<span class="comment">//Set(5) &#123;1, 2, 3, 4, 5&#125;</span></span><br><span class="line">setH.has(<span class="number">5</span>) <span class="comment">//true</span></span><br><span class="line">setH.delete(<span class="number">5</span>);<span class="comment">//true</span></span><br><span class="line">setH.size <span class="comment">//4</span></span><br><span class="line">setH.clear(); <span class="comment">//清除</span></span><br><span class="line"><span class="comment">//去重操作</span></span><br><span class="line"><span class="keyword">let</span> arr = [...new <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>])]</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[ 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure><p><strong>2. Map</strong><br>它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键，是一种更完善的 Hash 结构实现。如果你需要“键值对”的数据结构，Map 比 Object 更合适</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;haleLy&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> map: <span class="built_in">Map</span>&lt;<span class="built_in">object</span>, <span class="built_in">Function</span>&gt; = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">map.set(obj, <span class="function">() =&gt;</span> <span class="number">123</span>)</span><br><span class="line">map.get(obj)</span><br><span class="line">map.has(obj);<span class="comment">//true</span></span><br><span class="line">map.delete(obj)<span class="comment">//true</span></span><br><span class="line">map.size;<span class="comment">//0</span></span><br></pre></td></tr></table></figure><blockquote><p>操作方法同<code>Set</code>,区别是<code>Map</code>的添加为<code>set()</code>操作方法</p></blockquote><p><strong>3. weakSet和weakMap</strong></p><p>weak 在英文中是弱的异常，而weakSet和WeakMap的<strong>键</strong>都是<strong>弱引用</strong>，前提也是<strong>必须使用引用类型去定义</strong>，不会被计入垃圾回收机制。</p><blockquote><p>首先obj引用了这个对象 <code>+ 1</code>，aahph也引用了 <code>+ 1</code>，wmap也引用了，但是<strong>不会  + 1</strong>，应为他是弱引用，不会计入垃圾回收，因此 obj 和 aahph 释放了该引用 weakMap 也会随着消失的，但是有个问题你会发现控制台能输出，值是取不到的，应为V8的GC回收是需要一定时间的，你可以延长到500ms看一看，并且为了避免这个问题不允许读取键值，也不允许遍历，同理weakSet 也一样</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj:<span class="built_in">any</span> = &#123;<span class="attr">name</span>:<span class="string">&#x27;孙亚龙&#x27;</span>&#125; <span class="comment">//1</span></span><br><span class="line"><span class="keyword">let</span> aahph:<span class="built_in">any</span> = obj <span class="comment">//2</span></span><br><span class="line"><span class="keyword">let</span> wMap:<span class="built_in">WeakMap</span>&lt;<span class="built_in">object</span>,<span class="built_in">string</span>&gt; = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span><br><span class="line"> </span><br><span class="line">wMap.set(obj,<span class="string">&#x27;爱安徽潘慧&#x27;</span>) <span class="comment">//2 他的键是弱引用不会计数的</span></span><br><span class="line"> </span><br><span class="line">obj = <span class="literal">null</span> <span class="comment">// -1</span></span><br><span class="line">aahph = <span class="literal">null</span>;<span class="comment">//-1</span></span><br><span class="line"><span class="comment">//v8 GC 不稳定 最少200ms</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(wmap)</span><br><span class="line">&#125;,<span class="number">500</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在我们&lt;code&gt;ES5&lt;/code&gt;的开发过程中，我们很多时间都在使用&lt;code&gt;array&lt;/code&gt;和&lt;code&gt;object&lt;/c</summary>
      
    
    
    
    
    <category term="Javascript" scheme="https://halely.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript进阶</title>
    <link href="https://halely.github.io/2023/08/28/TypeScript%E8%BF%9B%E9%98%B6/"/>
    <id>https://halely.github.io/2023/08/28/TypeScript%E8%BF%9B%E9%98%B6/</id>
    <published>2023-08-28T03:47:34.000Z</published>
    <updated>2023-08-29T08:55:23.235Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类型兼容"><a href="#类型兼容" class="headerlink" title="类型兼容"></a>类型兼容</h1><p>所谓的<code>类型兼容性</code>，就是用于确定一个类型是否能赋值给其他的类型。<strong>TypeScript中的类型兼容性是基于结构类型的（也就是形状），如果A要兼容B 那么A至少具有B相同的属性</strong>。</p><h2 id="协变"><a href="#协变" class="headerlink" title="协变"></a>协变</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">isMan</span>: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> B &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a: A = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;hale&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="attr">isMan</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b: B = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;yzj&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a=b; //异常 类型 &quot;B&quot; 中缺少属性 &quot;isMan&quot;，但类型 &quot;A&quot; 中需要该属性。</span></span><br><span class="line">b=a;</span><br></pre></td></tr></table></figure><blockquote><p>A B 两个类型完全不同但是竟然可以赋值并无报错B类型充当A类型的子类型，当子类型里面的属性满足A类型就可以进行赋值，也就是说<strong>不能少可以多，这就是协变</strong>。</p></blockquote><h2 id="逆变"><a href="#逆变" class="headerlink" title="逆变"></a>逆变</h2><p> <strong>逆变一般发生于函数的参数上面</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">isMan</span>: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> B &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fnA = <span class="function">(<span class="params">paramA: A</span>) =&gt;</span> &#123; &#125;</span><br><span class="line"><span class="keyword">let</span> fnB = <span class="function">(<span class="params">paramB: B</span>) =&gt;</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//fnB = fnA //异常不能将类型“(params: A) =&gt; void”分配给类型“(params: B) =&gt; void”。参数“paramA”和“paramB” 的类型不兼容。类型 &quot;B&quot; 中缺少属性 &quot;isMan&quot;，但类型 &quot;A&quot; 中需要该属性。</span></span><br><span class="line"></span><br><span class="line">fnA=fnB</span><br></pre></td></tr></table></figure><p>这里是和协变不一样的，协变是只能多不能少，但是<strong>逆变是只能少不能多</strong>，那么具体是什么原因呢？在我的理解下，不管这个函数如果赋值，其实执行的都是等号后面的函数，那么当<code>fnB = fnA</code>,执行的是<code>fnA</code>,而<code>fnB</code>对应的<code>类型B</code>不能完全覆盖<code>fnA</code>的<code>类型A</code>,所以TS认定这是不安全的，反之，<code>类型A</code>能够覆盖<code>类型B</code>,所以这样是安全的</p><blockquote><p>那么如何双向协变呢？<code>tsconfig =&gt; strictFunctionTypes</code> 设置<code>为false</code> 支持双向协变 <code>fnA</code> <code>fnB</code> 随便可以来回赋值.</p></blockquote><h1 id="内置进价用法"><a href="#内置进价用法" class="headerlink" title="内置进价用法"></a>内置进价用法</h1><p>TypeScript内置高级类型<code>Partial Pick</code> ，我们学习一下,</p><h2 id="Partial"><a href="#Partial" class="headerlink" title="Partial"></a>Partial</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//=========源码=========</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Make all properties in T optional</span></span><br><span class="line"><span class="comment">  将T中的所有属性设置为可选</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> Partial&lt;T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> keyof T]?: T[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//=========使用=========</span></span><br><span class="line"><span class="keyword">type</span> Person = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> p = Partial&lt;Person&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//=========转换为=========</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> p = &#123;</span><br><span class="line">    name?: <span class="built_in">string</span> | <span class="literal">undefined</span>;</span><br><span class="line">    age?: <span class="built_in">number</span> | <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p><code>keyof</code> 是将一个接口对象的全部属性取出来变成联合类型</p></li><li><p><code>in</code> 我们可以理解成for in P 就是key 遍历  keyof T  就是联合类型的每一项</p></li><li><p><code>?</code> 这个操作就是将每一个属性变成可选项</p></li><li><p><code>T[P]</code> 索引访问操作符，与 JavaScript 种访问属性值的操作类似</p></li></ul><h2 id="Pick"><a href="#Pick" class="headerlink" title="Pick"></a>Pick</h2><p><strong>从类型定义T的属性中，选取指定一组属性，返回一个新的类型定义。</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//=========源码=========</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * From T, pick a set of properties whose keys are in the union K</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> Pick&lt;T, K <span class="keyword">extends</span> keyof T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> K]: T[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//=========使用=========</span></span><br><span class="line"><span class="keyword">type</span> Person = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">text</span>:<span class="built_in">string</span></span><br><span class="line">    <span class="attr">address</span>:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> Ex = <span class="string">&quot;text&quot;</span> | <span class="string">&quot;age&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> A = Pick&lt;Person,Ex&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//=========转换成=========</span></span><br><span class="line"><span class="keyword">type</span> A = &#123;</span><br><span class="line">    <span class="attr">age</span>:<span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">text</span>:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Readonly"><a href="#Readonly" class="headerlink" title="Readonly"></a>Readonly</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Make all properties in T readonly</span></span><br><span class="line"><span class="comment"> * 将T中的所有属性设置为只读</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> Readonly&lt;T&gt; = &#123;</span><br><span class="line">    <span class="keyword">readonly</span> [P <span class="keyword">in</span> keyof T]: T[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//=========使用=========</span></span><br><span class="line"><span class="keyword">type</span> Peron =&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> p=Readonly&lt;Peron&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//=========转换成=========</span></span><br><span class="line"><span class="keyword">type</span> p = &#123;</span><br><span class="line">    <span class="keyword">readonly</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">readonly</span> age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//=========源码=========</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Construct a type with a set of properties K of type T</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> Record&lt;K <span class="keyword">extends</span> keyof <span class="built_in">any</span>, T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> K]: T;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//=========使用=========</span></span><br><span class="line"><span class="keyword">type</span> Peron = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> A = <span class="string">&#x27;A&#x27;</span> | <span class="number">12</span> | <span class="string">&#x27;N&#x27;</span>;</span><br><span class="line"><span class="keyword">type</span> p = Record&lt;A, Peron&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//=========转换成=========</span></span><br><span class="line"><span class="keyword">type</span> p = &#123;</span><br><span class="line">    <span class="attr">A</span>: Peron;</span><br><span class="line">    <span class="number">12</span>: Peron;</span><br><span class="line">    N: Peron;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="infer"><a href="#infer" class="headerlink" title="infer"></a>infer</h2><p>infer 是TypeScript 新增到的关键字 充当占位符</p><p>定义一个类型 如果是数组类型 就返回 数组元素的类型 否则 就传入什么类型 就返回什么类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个类型 如果是数组类型 就返回 数组元素的类型 否则 就传入什么类型 就返回什么类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> TYPE&lt;T&gt; = T <span class="keyword">extends</span> <span class="built_in">Array</span>&lt;<span class="built_in">any</span>&gt; ? T[<span class="built_in">number</span>] : T;</span><br><span class="line"><span class="keyword">type</span> A=TYPE&lt;(<span class="built_in">string</span> | <span class="built_in">number</span>)[]&gt;</span><br><span class="line"><span class="keyword">type</span> B=TYPE&lt;<span class="built_in">string</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用inter修改</span></span><br><span class="line"><span class="keyword">type</span> TYPE&lt;T&gt; = T <span class="keyword">extends</span> <span class="built_in">Array</span>&lt;infer U&gt; ? U : T;</span><br><span class="line"><span class="keyword">type</span> A=TYPE&lt;(<span class="built_in">string</span> | <span class="built_in">number</span>)[]&gt;</span><br><span class="line"><span class="keyword">type</span> B=TYPE&lt;<span class="built_in">string</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>infer 类型提取</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"><span class="comment">//提取头部元素</span></span><br><span class="line"><span class="keyword">type</span> FirstType&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = T <span class="keyword">extends</span> [infer First, ...any[]] ? First : <span class="built_in">never</span>;</span><br><span class="line"><span class="keyword">type</span> a = FirstType&lt;Arr&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提取尾部元素</span></span><br><span class="line"><span class="keyword">type</span> LastType&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = T <span class="keyword">extends</span> [...any[], infer Last] ? Last : <span class="built_in">never</span>;</span><br><span class="line"><span class="keyword">type</span> b = LastType&lt;Arr&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//剔除第一个元素 </span></span><br><span class="line"><span class="keyword">type</span> EliminateFirst&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = T <span class="keyword">extends</span> [unknown, ...infer Rest] ? Rest : <span class="built_in">never</span>;</span><br><span class="line"><span class="keyword">type</span> c = EliminateFirst&lt;Arr&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//剔除尾部元素</span></span><br><span class="line"><span class="keyword">type</span> EliminateLast&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = T <span class="keyword">extends</span> [...infer Rest, unknown] ? Rest : <span class="built_in">never</span>;</span><br><span class="line"><span class="keyword">type</span> d = EliminateLast&lt;Arr&gt;</span><br></pre></td></tr></table></figure><p><strong>infer 梯归</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">type</span> ReverseArr&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt;=T <span class="keyword">extends</span> [infer First,...infer rest] ? [...ReverseArr&lt;rest&gt;,First]:T;</span><br><span class="line"><span class="keyword">type</span> b=ReverseArr&lt;a&gt;;<span class="comment">//type b = [4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;类型兼容&quot;&gt;&lt;a href=&quot;#类型兼容&quot; class=&quot;headerlink&quot; title=&quot;类型兼容&quot;&gt;&lt;/a&gt;类型兼容&lt;/h1&gt;&lt;p&gt;所谓的&lt;code&gt;类型兼容性&lt;/code&gt;，就是用于确定一个类型是否能赋值给其他的类型。&lt;strong&gt;TypeScript</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="https://halely.github.io/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://halely.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TS进阶用法proxy &amp; Reflect</title>
    <link href="https://halely.github.io/2023/08/24/TS%E8%BF%9B%E9%98%B6%E7%94%A8%E6%B3%95proxy-Reflect/"/>
    <id>https://halely.github.io/2023/08/24/TS%E8%BF%9B%E9%98%B6%E7%94%A8%E6%B3%95proxy-Reflect/</id>
    <published>2023-08-24T02:46:10.000Z</published>
    <updated>2023-08-28T03:40:07.525Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>对于接触过<code>Vue3</code>的开发差不多都知道<code>ES6</code>添加了<code>Proxy</code>新特性,数据响应的技术就是运用了<code>Proxy</code>的代理拦截,但是和<code>Proxy</code>共生的还有<code>Reflect(反射)</code>.</p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="proxy"><a href="#proxy" class="headerlink" title="proxy"></a>proxy</h2><blockquote><p>Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy 这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”。</p></blockquote><p>下面是 Proxy 支持的拦截操作一览，一共 13 种-<a href="https://es6.ruanyifeng.com/#docs/proxy">具体实例</a>。</p><ul><li><code>get(target, propKey, receiver)</code>：拦截对象属性的读取，比如<code>proxy.foo</code>和<code>proxy[&#39;foo&#39;]</code>。</li><li><code>set(target, propKey, value, receiver)</code>：拦截对象属性的设置，比如<code>proxy.foo = v</code>或<code>proxy[&#39;foo&#39;] = v</code>，返回一个布尔值。</li><li><code>has(target, propKey)</code>：拦截<code>propKey in proxy</code>的操作，返回一个布尔值。</li><li><code>deleteProperty(target, propKey)</code>：拦截<code>delete proxy[propKey]</code>的操作，返回一个布尔值。</li><li><code>ownKeys(target)</code>：拦截<code>Object.getOwnPropertyNames(proxy)</code>、<code>Object.getOwnPropertySymbols(proxy)</code>、<code>Object.keys(proxy)</code>、<code>for...in</code>循环，返回一个数组。该方法返回目标对象所有自身的属性的属性名，而<code>Object.keys()</code>的返回结果仅包括目标对象自身的可遍历属性。</li><li><code>getOwnPropertyDescriptor(target, propKey)</code>：拦截<code>Object.getOwnPropertyDescriptor(proxy, propKey)</code>，返回属性的描述对象。</li><li><code>defineProperty(target, propKey, propDesc)</code>：拦截<code>Object.defineProperty(proxy, propKey, propDesc）</code>、<code>Object.defineProperties(proxy, propDescs)</code>，返回一个布尔值。</li><li><code>preventExtensions(target)</code>：拦截<code>Object.preventExtensions(proxy)</code>，返回一个布尔值。</li><li><code>getPrototypeOf(target)</code>：拦截<code>Object.getPrototypeOf(proxy)</code>，返回一个对象。</li><li><code>isExtensible(target)</code>：拦截<code>Object.isExtensible(proxy)</code>，返回一个布尔值。</li><li><code>setPrototypeOf(target, proto)</code>：拦截<code>Object.setPrototypeOf(proxy, proto)</code>，返回一个布尔值。如果目标对象是函数，那么还有两种额外操作可以拦截。</li><li><code>apply(target, object, args)</code>：拦截 Proxy 实例作为<strong>函数调用的操作</strong>，比如<code>proxy(...args)</code>、<code>proxy.call(object, ...args)</code>、<code>proxy.apply(...)</code>。</li><li><code>construct(target, args)</code>：拦截 Proxy 实例作为<strong>构造函数调用</strong>的操作，比如<code>new proxy(...args)</code>。</li></ul><h2 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h2><p>对象与<code>Proxy</code>对象一样，也是<code>ES6</code>为了操作对象而提供的新<code>API</code>。<code>Reflect</code>对象的设计目的有这样几个。</p><ol><li>将<code>Object</code>对象的一些明显属于语言内部的方法（比如<code>Object.defineProperty</code>），放到<code>Reflec</code>t对象上。现阶段，某些方法同时在<code>Object</code>和<code>Reflect</code>对象上部署，未来的新方法将只部署在Reflect对象上。也就是说，从Reflect对象上可以拿到语言内部的方法。</li><li>修改某些<code>Object</code>方法的返回结果，让其变得更合理。比如，<code>Object.defineProperty(obj, name, desc)</code>在无法定义属性时，会抛出一个错误，而<code>Reflect.defineProperty(obj, name, desc)</code>则会返回false。</li><li>让<code>Object</code>操作都变成函数行为。某些<code>Object</code>操作是命令式，比如<code>name in obj</code>和<code>delete obj[name]</code>，而<code>Reflect.has(obj, name)</code>和<code>Reflect.deleteProperty(obj, name)</code>让它们变成了函数行为。</li><li><code>Reflect</code>对象的方法与Proxy对象的方法一一对应，<strong>只要是<code>Proxy</code>对象的方法，就能在<code>Reflect</code>对象上找到对应的方法</strong>。这就让<code>Proxy</code>对象可以方便地调用对应的<code>Reflect</code>方法，完成默认行为，作为修改行为的基础。<strong>也就是说，不管Proxy怎么修改默认行为，你总可以在Reflect上获取默认行为</strong>。</li></ol><p><code>Reflect</code>对象一共有 13 个静态方法-<a href="https://es6.ruanyifeng.com/#docs/reflect">具体实例</a>。</p><ul><li>Reflect.apply(target, thisArg, args)</li><li>Reflect.construct(target, args)</li><li>Reflect.get(target, name, receiver)</li><li>Reflect.set(target, name, value, receiver)</li><li>Reflect.defineProperty(target, name, desc)</li><li>Reflect.deleteProperty(target, name)</li><li>Reflect.has(target, name)</li><li>Reflect.ownKeys(target)</li><li>Reflect.isExtensible(target)</li><li>Reflect.preventExtensions(target)</li><li>Reflect.getOwnPropertyDescriptor(target, name)</li><li>Reflect.getPrototypeOf(target)</li><li>Reflect.setPrototypeOf(target, prototype)</li></ul><h2 id="使用Proxy和Reflect实现观察者模式"><a href="#使用Proxy和Reflect实现观察者模式" class="headerlink" title="使用Proxy和Reflect实现观察者模式"></a>使用Proxy和Reflect实现观察者模式</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @proxy 代理13个方法 参数一模一样</span></span><br><span class="line"><span class="comment"> * @Reflect 反射13个方法 参数一模一样</span></span><br><span class="line"><span class="comment"> * @mobx  实现observable</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//proxy 代理：拦截</span></span><br><span class="line"><span class="comment">//支撑对象 数组 函数 set map</span></span><br><span class="line"><span class="keyword">let</span> person = &#123; <span class="attr">name</span>: <span class="string">&#x27;haleLy&#x27;</span>, <span class="attr">age</span>:<span class="number">27</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> listFns: <span class="built_in">Set</span>&lt;<span class="built_in">Function</span>&gt; = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"><span class="keyword">const</span> addAuthor = <span class="function">(<span class="params">cb: <span class="built_in">Function</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!listFns.has(cb)) &#123;</span><br><span class="line">        listFns.add(cb)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> observable = <span class="xml"><span class="tag">&lt;<span class="name">T</span> <span class="attr">extends</span> <span class="attr">object</span>&gt;</span>(params: T) =&gt; &#123;</span></span><br><span class="line"><span class="xml">    return new Proxy(params, &#123;</span></span><br><span class="line"><span class="xml">        set(target, key, value, receiver) &#123;</span></span><br><span class="line"><span class="xml">            let result = Reflect.set(target, key, value, receiver);</span></span><br><span class="line"><span class="xml">            listFns.forEach(fn =&gt; fn())</span></span><br><span class="line"><span class="xml">            return result</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    &#125;)</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">const personObservable = observable(person);</span></span><br><span class="line"><span class="xml">console.log(personObservable)</span></span><br><span class="line"><span class="xml">addAuthor(() =&gt; &#123;</span></span><br><span class="line"><span class="xml">    console.log(&#x27;变化触发了&#x27;)</span></span><br><span class="line"><span class="xml">&#125;)</span></span><br><span class="line"><span class="xml">personObservable.age = 28</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;对于接触过&lt;code&gt;Vue3&lt;/code&gt;的开发差不多都知道&lt;code&gt;ES6&lt;/code&gt;添加了&lt;code&gt;Proxy&lt;/code&gt;新特</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="https://halely.github.io/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://halely.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>实战TS编写发布订阅模式</title>
    <link href="https://halely.github.io/2023/08/23/%E5%AE%9E%E6%88%98TS%E7%BC%96%E5%86%99%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://halely.github.io/2023/08/23/%E5%AE%9E%E6%88%98TS%E7%BC%96%E5%86%99%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2023-08-23T07:12:55.000Z</published>
    <updated>2023-08-29T03:47:39.193Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>作为一个前端或多或少都知道<strong>发布订阅模式</strong>，那么他到底是什么呢？<br>其实我们在日常开发早已用到了发布订阅模式例如<code>addEventListener</code>，<code>Vue evnetBus</code></p><blockquote><p>发布订阅模式又叫观察者模式，它定义了一种一对多的关系，让多个订阅者对象同时监听某一个发布者，或者叫主题对象，这个主题对象的状态发生变化时就会通知所有订阅自己的订阅者对象，使得它们能够自动更新自己。</p></blockquote><p><strong>举例</strong>：比如我们刷b站，关注了一个up主，他直播或者发新动向都会提醒呢，然后你就知道，我们关注就是订阅或者叫注册，当他有新动向的时候会提醒你，这就是发布，这里面有三个角色：发布者（up主）、订阅者（你自己）、调度者（平台）。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>我们定义一个对象，对象有四个方法：</p><ul><li><code>on</code>:订阅/监听</li><li><code>emit</code>:发布/注册</li><li><code>once</code>:只执行一次</li><li><code>off</code>:解除绑定</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义类接口</span></span><br><span class="line"><span class="keyword">interface</span> EventFace &#123;</span><br><span class="line">    <span class="attr">on</span>: <span class="function">(<span class="params">name: <span class="built_in">string</span>, fn: <span class="built_in">Function</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">    emit: <span class="function">(<span class="params">name: <span class="built_in">string</span>, ...arg: <span class="built_in">Array</span>&lt;<span class="built_in">any</span>&gt;</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">    off: <span class="function">(<span class="params">name: <span class="built_in">string</span>, fn: <span class="built_in">Function</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">    once: <span class="function">(<span class="params">name: <span class="built_in">string</span>, fn: <span class="built_in">Function</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> ListFn &#123;</span><br><span class="line">    [key: <span class="built_in">string</span>]: <span class="built_in">Array</span>&lt;<span class="built_in">Function</span>&gt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DisPatch</span> <span class="title">implements</span> <span class="title">EventFace</span> </span>&#123;</span><br><span class="line">    <span class="attr">list</span>: ListFn</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.list = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//订阅/监听</span></span><br><span class="line">    <span class="function"><span class="title">on</span>(<span class="params">name: <span class="built_in">string</span>, fn: <span class="built_in">Function</span></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> callbackList = <span class="built_in">this</span>.list[name] || [];</span><br><span class="line">        callbackList.push(fn)</span><br><span class="line">        <span class="built_in">this</span>.list[name] = callbackList;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//发布/注册</span></span><br><span class="line">    <span class="function"><span class="title">emit</span>(<span class="params">name: <span class="built_in">string</span>, ...arg: <span class="built_in">Array</span>&lt;<span class="built_in">any</span>&gt;</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> eventNames = <span class="built_in">this</span>.list[name]</span><br><span class="line">        <span class="keyword">if</span> (eventNames) &#123;</span><br><span class="line">            eventNames.forEach(<span class="function"><span class="params">el</span> =&gt;</span> &#123;</span><br><span class="line">                el.apply(<span class="built_in">this</span>, arg)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.error(<span class="string">`名称错误<span class="subst">$&#123;name&#125;</span>`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//解除绑定</span></span><br><span class="line">    <span class="function"><span class="title">off</span>(<span class="params">name: <span class="built_in">string</span>, fn: <span class="built_in">Function</span></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> eventNames = <span class="built_in">this</span>.list[name];</span><br><span class="line">        <span class="keyword">if</span> (eventNames &amp;&amp; fn) &#123;</span><br><span class="line">            <span class="keyword">let</span> index = eventNames.findIndex(<span class="function"><span class="params">fns</span> =&gt;</span> fns === fn)</span><br><span class="line">            eventNames.splice(index, <span class="number">1</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.error(<span class="string">&#x27;该事件未监听&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//只执行一次</span></span><br><span class="line">    <span class="function"><span class="title">once</span>(<span class="params">name: <span class="built_in">string</span>, fn: <span class="built_in">Function</span></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> decor = <span class="function">(<span class="params">...args: <span class="built_in">Array</span>&lt;<span class="built_in">any</span>&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">            fn.apply(<span class="built_in">this</span>, args)</span><br><span class="line">            <span class="built_in">this</span>.off(name, decor)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.on(name, decor)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建实例</span></span><br><span class="line"><span class="keyword">const</span> o = <span class="keyword">new</span> DisPatch();</span><br><span class="line"><span class="comment">//注册订阅/监听</span></span><br><span class="line">o.on(<span class="string">&#x27;post&#x27;</span>, <span class="function">(<span class="params">...res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>, res)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> fn2 = <span class="function">(<span class="params">...res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>, res)</span><br><span class="line">&#125;</span><br><span class="line">o.on(<span class="string">&#x27;post&#x27;</span>, fn2)</span><br><span class="line">o.once(<span class="string">&#x27;post&#x27;</span>,<span class="function">(<span class="params">...res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>, res)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//发布/注册</span></span><br><span class="line">o.emit(<span class="string">&#x27;post&#x27;</span>, <span class="number">1</span>, <span class="literal">false</span>, &#123; <span class="attr">name</span>: <span class="string">&#x27;hale&#x27;</span> &#125;)</span><br><span class="line">o.off(<span class="string">&#x27;post&#x27;</span>, fn2)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;作为一个前端或多或少都知道&lt;strong&gt;发布订阅模式&lt;/strong&gt;，那么他到底是什么呢？&lt;br&gt;其实我们在日常开发早已用到了发布订阅模</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="https://halely.github.io/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://halely.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TS-Rollup封装插件实践</title>
    <link href="https://halely.github.io/2023/08/22/TS-Rollup%E5%B0%81%E8%A3%85%E6%8F%92%E4%BB%B6%E5%AE%9E%E8%B7%B5/"/>
    <id>https://halely.github.io/2023/08/22/TS-Rollup%E5%B0%81%E8%A3%85%E6%8F%92%E4%BB%B6%E5%AE%9E%E8%B7%B5/</id>
    <published>2023-08-22T09:23:07.000Z</published>
    <updated>2023-08-22T10:05:38.060Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用<code>cookie</code>是可以设置有效期的，但<code>localStorage</code>本身是没有该机制的，只能手动删除，否则会一直存放在浏览器当中，我们可以把localStorage跟cookie一样设置一个有效期进行二次封装实现该方案。</p><p>在存储的时候设置一个过期时间，并且存储的数据进行格式化方便统一校验，在读取的时候获取当前时间进行判断是否过期，如果过期进行删除即可。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /enum ts 定义枚举</span></span><br><span class="line"><span class="comment">//字典 Dictionaries    expire过期时间key    permanent永久不过期</span></span><br><span class="line"><span class="keyword">export</span> <span class="built_in">enum</span> Dictionaries &#123;</span><br><span class="line">    expire = <span class="string">&#x27;__expire__&#x27;</span>,</span><br><span class="line">    permanent = <span class="string">&#x27;permanent&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//type ts 定义类型</span></span><br><span class="line"><span class="comment">//expire  过期时间key  //permanent 永久不过期</span></span><br><span class="line"><span class="keyword">import</span> &#123; Dictionaries &#125; <span class="keyword">from</span> <span class="string">&quot;../enum&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> Str=<span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> Expire = Dictionaries.permanent | <span class="built_in">number</span> <span class="comment">//有效期类型</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> Date&lt;T&gt;&#123;</span><br><span class="line">   <span class="attr">value</span>:T,</span><br><span class="line">   [Dictionaries.expire]:Expire</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> Result&lt;T&gt; &#123; <span class="comment">//返回值类型</span></span><br><span class="line">    <span class="attr">message</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">value</span>: T | <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> StorageCls &#123;</span><br><span class="line">    <span class="attr">get</span>: &lt;T&gt;<span class="function">(<span class="params">key:Str</span>) =&gt;</span> Result&lt;T | <span class="literal">null</span>&gt;;</span><br><span class="line">    set: &lt;T&gt;<span class="function">(<span class="params">key:Str,value:T,expire:Expire</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">    remove: <span class="function">(<span class="params">key: Str</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">    clear: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.ts</span></span><br><span class="line"><span class="comment">//expire  过期时间key permanent 永久不过期</span></span><br><span class="line"><span class="keyword">import</span> &#123; StorageCls, Str, Expire, <span class="built_in">Date</span>, Result &#125; <span class="keyword">from</span> <span class="string">&quot;./type&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Dictionaries &#125; <span class="keyword">from</span> <span class="string">&quot;./enum&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Storage</span> <span class="title">implements</span> <span class="title">StorageCls</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取localStorage</span></span><br><span class="line">    <span class="keyword">public</span>  get&lt;T = <span class="built_in">any</span>&gt;(key: Str): Result&lt;T | <span class="literal">null</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> value = <span class="built_in">localStorage</span>.getItem(key)</span><br><span class="line">        <span class="keyword">if</span> (value) &#123;</span><br><span class="line">            <span class="keyword">const</span> data: <span class="built_in">Date</span>&lt;T&gt; = <span class="built_in">JSON</span>.parse(value);</span><br><span class="line">            <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">            <span class="comment">//有效并且是数组类型 并且过期了 进行删除和提示</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> data[Dictionaries.expire] == <span class="string">&#x27;number&#x27;</span> &amp;&amp; data[Dictionaries.expire] &lt; now) &#123;</span><br><span class="line">                <span class="built_in">this</span>.remove(key)</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    <span class="attr">message</span>: <span class="string">`您的<span class="subst">$&#123;key&#125;</span>已过期`</span>,</span><br><span class="line">                    <span class="attr">value</span>: <span class="literal">null</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//否则成功返回</span></span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    <span class="attr">message</span>: <span class="string">&quot;成功读取&quot;</span>,</span><br><span class="line">                    <span class="attr">value</span>: data.value</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&#x27;值无效&#x27;</span>,</span><br><span class="line">            <span class="attr">value</span>: <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置localStorage和过期时间</span></span><br><span class="line">    set&lt;T = <span class="built_in">any</span>&gt;(key: Str, <span class="attr">value</span>: T, <span class="attr">expire</span>: Expire = Dictionaries.permanent) &#123;</span><br><span class="line">        <span class="comment">//格式化数据</span></span><br><span class="line">        <span class="keyword">const</span> data: <span class="built_in">Date</span>&lt;T&gt; = &#123;</span><br><span class="line">            value,</span><br><span class="line">            [Dictionaries.expire]: expire</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">localStorage</span>.setItem(key, <span class="built_in">JSON</span>.stringify(data));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    <span class="function"><span class="title">remove</span>(<span class="params">key: Str</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">localStorage</span>.removeItem(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//清除</span></span><br><span class="line">    <span class="function"><span class="title">clear</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">localStorage</span>.clear()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//rollup.config.js</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"><span class="keyword">import</span> ts <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-typescript2&#x27;</span><span class="comment">//识别入口ts文件</span></span><br><span class="line"><span class="keyword">import</span> &#123; terser &#125; <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-terser&#x27;</span><span class="comment">//代码压缩</span></span><br><span class="line"><span class="keyword">import</span> server <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-serve&#x27;</span><span class="comment">//启动服务</span></span><br><span class="line"><span class="keyword">import</span> livereload <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-livereload&#x27;</span><span class="comment">//热更新</span></span><br><span class="line"><span class="keyword">import</span> replace <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-replace&#x27;</span><span class="comment">//注册浏览器参数</span></span><br><span class="line"><span class="keyword">import</span> &#123; fileURLToPath &#125; <span class="keyword">from</span> <span class="string">&#x27;url&#x27;</span></span><br><span class="line"><span class="keyword">const</span> __filenameNew = fileURLToPath(<span class="keyword">import</span>.meta.url)</span><br><span class="line"><span class="keyword">const</span> __dirnameNew = path.dirname(__filenameNew)</span><br><span class="line"><span class="keyword">const</span> isDev = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> process.env.NODE_ENV === <span class="string">&#x27;development&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">input</span>: <span class="string">&#x27;./src/index.ts&#x27;</span>,<span class="comment">//入口</span></span><br><span class="line">    <span class="comment">//出口</span></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">file</span>: path.resolve(__dirnameNew, <span class="string">&#x27;./lib/index.js&#x27;</span>),</span><br><span class="line">        <span class="comment">// format: &#x27;umd&#x27;,//输出格式</span></span><br><span class="line">        <span class="attr">sourcemap</span>: <span class="literal">true</span>,<span class="comment">//生成sourcemap文件，定位问题，否则定位的代码是打包后的文件</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        ts(),</span><br><span class="line">        isDev() &amp;&amp; livereload(),<span class="comment">//热更新组件</span></span><br><span class="line">        terser(&#123;</span><br><span class="line">            <span class="attr">compress</span>: &#123;</span><br><span class="line">                <span class="attr">drop_console</span>: !isDev(),<span class="comment">//去除console</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),<span class="comment">//压缩文件</span></span><br><span class="line">        replace(&#123;</span><br><span class="line">            <span class="string">&#x27;process.env.NODE_ENV&#x27;</span>: <span class="built_in">JSON</span>.stringify(process.env.NODE_ENV)<span class="comment">//因为process是在node环境的下的参数，在浏览器上是访问不了的，所以需要注册到浏览器上</span></span><br><span class="line">        &#125;),</span><br><span class="line">        isDev() &amp;&amp; server(&#123;</span><br><span class="line">            <span class="attr">open</span>: <span class="literal">true</span>,<span class="comment">//是否启动打开页面</span></span><br><span class="line">            <span class="attr">port</span>: <span class="number">1988</span>,<span class="comment">//配置端口号</span></span><br><span class="line">            <span class="attr">openPage</span>: <span class="string">&#x27;/public/index.html&#x27;</span>,<span class="comment">//打开的页面</span></span><br><span class="line">        &#125;),</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;使用&lt;code&gt;cookie&lt;/code&gt;是可以设置有效期的，但&lt;code&gt;localStorage&lt;/code&gt;本身是没有该机制的，只能手</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="https://halely.github.io/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://halely.github.io/tags/TypeScript/"/>
    
    <category term="Rollup" scheme="https://halely.github.io/tags/Rollup/"/>
    
  </entry>
  
  <entry>
    <title>四种常见的JS内存泄漏</title>
    <link href="https://halely.github.io/2023/07/25/%E5%9B%9B%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84JS%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/"/>
    <id>https://halely.github.io/2023/07/25/%E5%9B%9B%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84JS%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/</id>
    <published>2023-07-25T03:57:09.000Z</published>
    <updated>2023-07-25T05:36:56.745Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、意外的全局变量"><a href="#1、意外的全局变量" class="headerlink" title="1、意外的全局变量"></a>1、意外的全局变量</h3><p>未定义的变量会在全局对象创建一个新变量，如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    bar = <span class="string">&quot;this is a hidden global variable&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数<code>foo</code>内部忘记使用<code>var</code>，实际上JS会把bar挂载到全局对象上，意外创建一个全局变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.bar = <span class="string">&quot;this is an explicit global variable&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一个意外的全局变量可能由<code>this</code>创建。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.variable = <span class="string">&quot;potential accidental global&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Foo 调用自己，this 指向了全局对象（window）</span></span><br><span class="line"><span class="comment">// 而不是 undefined</span></span><br><span class="line">foo();</span><br></pre></td></tr></table></figure><p><strong>解决方法</strong>：</p><p>在 JavaScript 文件头部加上<code>&#39;use strict&#39;</code>，使用严格模式避免意外的全局变量，此时**上例中的this指向<code>undefined</code>**。如果必须使用全局变量存储大量数据时，确保用完以后把它设置为 null 或者重新定义。</p><h3 id="被遗忘的计时器或回调函数"><a href="#被遗忘的计时器或回调函数" class="headerlink" title="被遗忘的计时器或回调函数"></a>被遗忘的计时器或回调函数</h3><p>计时器<code>setInterval</code>代码很常见</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> someResource = getData();</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> node = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;Node&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(node) &#123;</span><br><span class="line">        <span class="comment">// 处理 node 和 someResource</span></span><br><span class="line">        node.innerHTML = <span class="built_in">JSON</span>.stringify(someResource));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>上面的例子表明，在节点node或者数据不再需要时，定时器依旧指向这些数据。所以哪怕当node节点被移除后，interval 仍旧存活并且垃圾回收器没办法回收，它的依赖也没办法被回收，除非终止定时器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onClick</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    element.innerHTML = <span class="string">&#x27;text&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">element.addEventListener(<span class="string">&#x27;click&#x27;</span>, onClick);</span><br></pre></td></tr></table></figure><p>对于上面观察者的例子，一旦它们不再需要（或者关联的对象变成不可达），明确地移除它们非常重要。老的 IE 6 是无法处理循环引用的。因为老版本的 IE 是无法检测 DOM 节点与 JavaScript 代码之间的循环引用，会导致内存泄漏。</p><p><strong>但是</strong>，现代的浏览器（包括 IE 和 Microsoft Edge）使用了更先进的垃圾回收算法（标记清除），已经可以正确检测和处理循环引用了。即回收节点内存时，不必非要调用<code>removeEventListener</code>了</p><h3 id="3、脱离-DOM-的引用"><a href="#3、脱离-DOM-的引用" class="headerlink" title="3、脱离 DOM 的引用"></a>3、脱离 DOM 的引用</h3><p>如果把DOM 存成字典（JSON 键值对）或者数组，此时，同样的 DOM 元素存在两个引用：一个在 DOM 树中，另一个在字典中。那么将来需要把两个引用都清除。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elements = &#123;</span><br><span class="line">    <span class="attr">button</span>: <span class="built_in">document</span>.getElementById(<span class="string">&#x27;button&#x27;</span>),</span><br><span class="line">    <span class="attr">image</span>: <span class="built_in">document</span>.getElementById(<span class="string">&#x27;image&#x27;</span>),</span><br><span class="line">    <span class="attr">text</span>: <span class="built_in">document</span>.getElementById(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doStuff</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    image.src = <span class="string">&#x27;http://some.url/image&#x27;</span>;</span><br><span class="line">    button.click();</span><br><span class="line">    <span class="built_in">console</span>.log(text.innerHTML);</span><br><span class="line">    <span class="comment">// 更多逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeButton</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 按钮是 body 的后代元素</span></span><br><span class="line">    <span class="built_in">document</span>.body.removeChild(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;button&#x27;</span>));</span><br><span class="line">    <span class="comment">// 此时，仍旧存在一个全局的 #button 的引用</span></span><br><span class="line">    <span class="comment">// elements 字典。button 元素仍旧在内存中，不能被 GC 回收。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果代码中保存了表格某一个<code>&lt;td&gt;</code>的引用。将来决定删除整个表格的时候，直觉认为 GC 会回收除了已保存的<code>&lt;td&gt;</code>以外的其它节点。实际情况并非如此：此<code>&lt;td&gt;</code>是表格的子节点，子元素与父元素是引用关系。由于代码<strong>保留了<code>&lt;td&gt;</code>的引用</strong>，导致整个表格仍待在内存中。所以保存 DOM 元素引用的时候，要小心谨慎。</p><h3 id="4、闭包"><a href="#4、闭包" class="headerlink" title="4、闭包"></a>4、闭包</h3><p>闭包的关键是匿名函数可以访问父级作用域的变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> theThing = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> replaceThing = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> originalThing = theThing;</span><br><span class="line">  <span class="keyword">var</span> unused = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (originalThing)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">    </span><br><span class="line">  theThing = &#123;</span><br><span class="line">    <span class="attr">longStr</span>: <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1000000</span>).join(<span class="string">&#x27;*&#x27;</span>),</span><br><span class="line">    <span class="attr">someMethod</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(someMessage);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setInterval</span>(replaceThing, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>每次调用<code>replaceThing</code>，<code>theThing</code>得到一个包含一个大数组和一个新闭包（<code>someMethod</code>）的新对象。同时，变量<code>unused</code>是一个引用<code>originalThing</code>的闭包（先前的<code>replaceThing</code>又调用了<code>theThing</code>）。<code>someMethod</code>可以通过<code>theThing</code>使用，<code>someMethod</code>与<code>unused</code>分享闭包作用域，尽管<code>unused</code>从未使用，它引用的<code>originalThing</code>迫使它保留在内存中（防止被回收）。</p><p><strong>解决方法</strong>：</p><p>在<code>replaceThing</code>的最后添加<code>originalThing = null</code>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、意外的全局变量&quot;&gt;&lt;a href=&quot;#1、意外的全局变量&quot; class=&quot;headerlink&quot; title=&quot;1、意外的全局变量&quot;&gt;&lt;/a&gt;1、意外的全局变量&lt;/h3&gt;&lt;p&gt;未定义的变量会在全局对象创建一个新变量，如下。&lt;/p&gt;
&lt;figure class=</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="https://halely.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Rollup构建TS项目 &amp; webpack构建TS项目 &amp; esbuild + swc</title>
    <link href="https://halely.github.io/2023/06/06/Rollup%E6%9E%84%E5%BB%BATS%E9%A1%B9%E7%9B%AE-webpack%E6%9E%84%E5%BB%BATS%E9%A1%B9%E7%9B%AE-esbuild-swc/"/>
    <id>https://halely.github.io/2023/06/06/Rollup%E6%9E%84%E5%BB%BATS%E9%A1%B9%E7%9B%AE-webpack%E6%9E%84%E5%BB%BATS%E9%A1%B9%E7%9B%AE-esbuild-swc/</id>
    <published>2023-06-06T07:32:12.000Z</published>
    <updated>2023-08-22T10:06:21.576Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Rollup构建TS项目"><a href="#Rollup构建TS项目" class="headerlink" title="Rollup构建TS项目"></a>Rollup构建TS项目</h1><p><a href="https://so.csdn.net/so/search?q=Rollup">Rollup</a> 打包很快,体积很小，学习一下</p><p><strong>配置环境</strong></p><ol><li><code>npm init -y</code> 生成 <code>package.json</code></li><li><code>tsc --init</code> 生成 <code>tsconfig.json</code></li><li>创建 <code>rollup.config.js</code></li><li>创建入口问题<code>/src/index.ts</code>文件和<code>public/index.html</code>文件</li></ol><p><strong>安装依赖</strong></p><ol><li>全局安装rollup <code>npm install rollup-g</code></li><li>安装TypeScript   <code>npm install typescript -D</code></li><li>安装TypeScript 转换器 <code>npm install rollup-plugin-typescript2 -D</code></li><li>安装代码压缩插件<code>npm install rollup-plugin-terser -D</code></li><li>安装rollupWeb服务 <code>npm install rollup-plugin-serve -D</code></li><li>安装热更新 <code>npm install rollup-plugin-livereload -D</code></li><li>引入外部依赖 <code>npm install rollup-plugin-node-resolve -D</code></li><li>安装配置环境变量用来区分本地和生产  <code>npm install cross-env -D</code></li><li>替换环境变量给浏览器使用 <code>npm install rollup-plugin-replace -D</code></li></ol><p><strong>配置文件</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;rollupTs&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;cross-env NODE_ENV=development rollup -c -w&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;cross-env NODE_ENV=produaction rollup -c&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;module&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;cross-env&quot;</span>: <span class="string">&quot;^7.0.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;rollup-plugin-livereload&quot;</span>: <span class="string">&quot;^2.0.5&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;rollup-plugin-node-resolve&quot;</span>: <span class="string">&quot;^5.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;rollup-plugin-replace&quot;</span>: <span class="string">&quot;^2.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;rollup-plugin-serve&quot;</span>: <span class="string">&quot;^1.1.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;rollup-plugin-terser&quot;</span>: <span class="string">&quot;^7.0.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;rollup-plugin-typescript2&quot;</span>: <span class="string">&quot;^0.31.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;typescript&quot;</span>: <span class="string">&quot;^4.5.5&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>rollup -c</code>:打包命令<br><code>rollup -c -w</code>:启动本地服务命令<br><code>cross-env NODE_ENV=development</code>:配置<strong>node</strong> <code>process.env</code>环境变量用来区分本地和生产，注意，这在浏览器中不能直接获取的，需要插件<code>replace</code>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//rollup.config.js</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"><span class="keyword">import</span> ts <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-typescript2&#x27;</span><span class="comment">//识别入口ts文件</span></span><br><span class="line"><span class="keyword">import</span> &#123; terser &#125; <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-terser&#x27;</span><span class="comment">//代码压缩</span></span><br><span class="line"><span class="keyword">import</span> server <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-serve&#x27;</span><span class="comment">//启动服务</span></span><br><span class="line"><span class="keyword">import</span> livereload <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-livereload&#x27;</span><span class="comment">//热更新</span></span><br><span class="line"><span class="keyword">import</span> replace <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-replace&#x27;</span><span class="comment">//注册浏览器参数</span></span><br><span class="line"><span class="keyword">import</span> &#123; fileURLToPath &#125; <span class="keyword">from</span> <span class="string">&#x27;url&#x27;</span></span><br><span class="line"><span class="keyword">const</span> __filenameNew = fileURLToPath(<span class="keyword">import</span>.meta.url)</span><br><span class="line"><span class="keyword">const</span> __dirnameNew = path.dirname(__filenameNew)</span><br><span class="line"><span class="keyword">const</span> isDev = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> process.env.NODE_ENV === <span class="string">&#x27;development&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">input</span>: <span class="string">&#x27;./src/index.ts&#x27;</span>,<span class="comment">//入口</span></span><br><span class="line">    <span class="comment">//出口</span></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="comment">//直接使用__dirname 会报错__dirname is not defined in ES module scope，因为rollup需要配置 &quot;type&quot;: &quot;module&quot;,，但是module不支持__dirname，故</span></span><br><span class="line">        <span class="comment">//需要创建__dirnameNew替代</span></span><br><span class="line">        <span class="attr">file</span>: path.resolve(__dirnameNew, <span class="string">&#x27;./lib/index.js&#x27;</span>),</span><br><span class="line">        <span class="attr">format</span>: <span class="string">&#x27;umd&#x27;</span>,<span class="comment">//输出格式</span></span><br><span class="line">        <span class="attr">sourcemap</span>: <span class="literal">true</span>,<span class="comment">//生成sourcemap文件，定位问题，否则定位的代码是打包后的文件</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        ts(),</span><br><span class="line">        isDev() &amp;&amp; livereload(),<span class="comment">//热更新组件</span></span><br><span class="line">        terser(&#123;</span><br><span class="line">            <span class="attr">compress</span>: &#123;</span><br><span class="line">                <span class="attr">drop_console</span>: !isDev(),<span class="comment">//去除console</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),<span class="comment">//压缩文件</span></span><br><span class="line">        replace(&#123;</span><br><span class="line">            <span class="string">&#x27;process.env.NODE_ENV&#x27;</span>: <span class="built_in">JSON</span>.stringify(process.env.NODE_ENV)<span class="comment">//因为process是在node环境的下的参数，在浏览器上是访问不了的，所以需要注册到浏览器上</span></span><br><span class="line">        &#125;),</span><br><span class="line">        isDev() &amp;&amp; server(&#123;</span><br><span class="line">            <span class="attr">open</span>: <span class="literal">true</span>,<span class="comment">//是否启动打开页面</span></span><br><span class="line">            <span class="attr">port</span>: <span class="number">1988</span>,<span class="comment">//配置端口号</span></span><br><span class="line">            <span class="attr">openPage</span>: <span class="string">&#x27;/public/index.html&#x27;</span>,<span class="comment">//打开的页面</span></span><br><span class="line">        &#125;),</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>js代码使用环境变量</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> label: string = <span class="string">&#x27;hale最喜欢八味&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(label)</span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">&#x27;development&#x27;</span>) &#123;</span><br><span class="line">    alert(<span class="string">&#x27;开发&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    alert(<span class="string">&#x27;生产&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(process.env.NODE_ENV)</span><br></pre></td></tr></table></figure><p><strong>TS配置需要注意的</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//tsconfig.json</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;module&quot;</span>: <span class="string">&quot;ES2015&quot;</span>, <span class="comment">//需要设置ts配置&quot;module&quot;为&quot;ES2015&quot;,CommonJS无法解析识别ts文件插件rollup-plugin-typescript2</span></span><br><span class="line"><span class="attr">&quot;sourceMap&quot;</span>: <span class="literal">true</span>, <span class="comment">//生成sourcemap文件，定位问题，否则定位的代码是打包后的文件        </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Webpack构建TS项目"><a href="#Webpack构建TS项目" class="headerlink" title="Webpack构建TS项目"></a>Webpack构建TS项目</h1><p><strong>配置环境</strong></p><ol><li><code>npm init -y</code> 生成 <code>package.json</code></li><li>创建入口问题<code>/src/index.ts</code>文件和<code>public/index.html</code>文件</li><li><code>tsc --init</code> 生成 <code>tsconfig.json</code></li><li>创建 <code>webpack.config.js</code></li></ol><p><strong>安装依赖</strong></p><ol><li>安装webpack   <code>npm install webpack -D</code></li><li>webpack4以上需要 <code>npm install  webpack-cli -D</code></li><li>编译TS  <code>npm install ts-loader -D</code></li><li>TS环境 <code>npm install typescript -D</code></li><li>热更新服务 <code>npm install  webpack-dev-server -D</code></li><li>HTML模板 <code>npm install html-webpack-plugin -D</code></li></ol><p><strong>配置文件</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;webpackTs&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;html-webpack-plugin&quot;</span>: <span class="string">&quot;^5.5.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;ts-loader&quot;</span>: <span class="string">&quot;^9.4.4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;typescript&quot;</span>: <span class="string">&quot;^5.1.6&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;webpack&quot;</span>: <span class="string">&quot;^5.88.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;webpack-cil&quot;</span>: <span class="string">&quot;0.0.1-security&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;webpack-cli&quot;</span>: <span class="string">&quot;^5.1.4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;webpack-dev-server&quot;</span>: <span class="string">&quot;^4.15.1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> htmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;./src/index.ts&quot;</span>,<span class="comment">//入口</span></span><br><span class="line">    <span class="comment">//出口</span></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;index.js&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">    <span class="attr">stats</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">    <span class="comment">//配置文件引入</span></span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">extensions</span>: [<span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.js&#x27;</span>],</span><br><span class="line">        <span class="attr">alias</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;@&#x27;</span>: path.resolve(__dirname, <span class="string">&#x27;./src&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//配置文件使用loader</span></span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">                use: <span class="string">&quot;ts-loader&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">port</span>: <span class="number">1995</span>,</span><br><span class="line">        <span class="attr">proxy</span>: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//插件</span></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> htmlWebpackPlugin(&#123;</span><br><span class="line">            <span class="attr">template</span>: <span class="string">&quot;./public/index.html&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="esbuild-swc-构建ts项目"><a href="#esbuild-swc-构建ts项目" class="headerlink" title="esbuild + swc 构建ts项目"></a>esbuild + swc 构建ts项目</h1><p>前端工具层出不穷，之前有常用的打包工具<code>webpack</code>，现在有了速度更快的<code>vite</code>。 vite的开发模式是<strong>基于esBuild编译的,打包又是基于rollup</strong>,启动项目是很快的。</p><p><code>esbuild</code>为什么这么快<br>在esbuild的官方介绍中打包<code>threejs</code> 只需要0.37秒 无限接近于亚索的Q技能冷却时间可以说是很快了。</p><p><code>esbuild</code>是<code>go</code>语言编写的并且是多线程执行,性能是js的好几十倍，所以很快。</p><ul><li>无需缓存即可实现基础打包</li><li>支持 ES6 跟 CommonJS 模块</li><li>支持ES 6 Tree Shaking</li><li>体积小</li><li>插件化</li><li>其他</li><li>内置支持编译 jsx</li></ul><p><strong>SWC</strong><br><code>SWC</code>则宣称其比<code>Babel</code>快<strong>20</strong>倍(四核情况下可以快<strong>70</strong>倍)</p><p>wc是用<code>rust</code>写的，所实现的功能跟<code>babel</code>一样，es6语法转es5，但是速度比<code>babel</code>更快，前端基建工具使用rust的是越来越多了，未来可能还会有一个替代postCss的😂。<br>那如果把<code>esbuild + swc</code>结合起来构建那岂不是接近光速 我们来<code>try try</code></p><p><strong>配置环境</strong></p><ol><li><code>npm init -y</code> 生成 <code>package.json</code></li><li><code>tsc --init</code> 生成 <code>tsconfig.json</code></li><li>创建 <code>config.js</code></li><li>创建入口问题<code>/src/index.ts</code>文件和<code>public/index.html</code>文件</li></ol><p><strong>安装依赖</strong></p><ol><li>全局安装 <code>npm install @swc/core esbuild @swc/helpers</code></li><li>安装nodeTs声明 <code>npm install --save-dev @types/node</code></li></ol><p>其中，<code>@swc/core</code> 是 swc 的核心包，用于编译 JavaScript 和 TypeScript 代码；esbuild 是一个快速的 JavaScript 和 TypeScript 构建工具；<code>@swc/helpers</code> 是 swc 的辅助包，用于转换 JSX 代码。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//config.ts</span></span><br><span class="line"><span class="keyword">import</span> esbuild <span class="keyword">from</span> <span class="string">&#x27;esbuild&#x27;</span><span class="comment">//打包工具</span></span><br><span class="line"><span class="keyword">import</span> swc <span class="keyword">from</span> <span class="string">&#x27;@swc/core&#x27;</span><span class="comment">//类似于babel es6 转 es5</span></span><br><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">&#x27;node:fs&#x27;</span></span><br><span class="line"><span class="keyword">await</span> esbuild.build(&#123;</span><br><span class="line">    <span class="attr">entryPoints</span>: [<span class="string">&#x27;./index.ts&#x27;</span>], <span class="comment">//入口文件</span></span><br><span class="line">    <span class="attr">bundle</span>: <span class="literal">true</span>, <span class="comment">//模块单独打包</span></span><br><span class="line">    <span class="attr">loader</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;.js&#x27;</span>: <span class="string">&#x27;js&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;.ts&#x27;</span>: <span class="string">&#x27;ts&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;.jsx&#x27;</span>: <span class="string">&#x27;jsx&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;.tsx&#x27;</span>: <span class="string">&#x27;tsx&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">treeShaking</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">define</span>: &#123;</span><br><span class="line">       <span class="string">&#x27;process.env.NODE_ENV&#x27;</span>: <span class="string">&#x27;&quot;production&quot;&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//实现自定义loader</span></span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;swc-loader&quot;</span>,</span><br><span class="line">            <span class="function"><span class="title">setup</span>(<span class="params">build</span>)</span> &#123;</span><br><span class="line">                build.onLoad(&#123; <span class="attr">filter</span>: <span class="regexp">/\.(js|ts|tsx|jsx)$/</span> &#125;, <span class="function">(<span class="params">args</span>) =&gt;</span> &#123;</span><br><span class="line">                   <span class="comment">// console.log(args);</span></span><br><span class="line">                    <span class="keyword">const</span> content = fs.readFileSync(args.path, <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">                    <span class="keyword">const</span> &#123; code &#125; = swc.transformSync(content, &#123;</span><br><span class="line">                        <span class="attr">filename</span>: args.path</span><br><span class="line">                    &#125;)</span><br><span class="line">                    <span class="keyword">return</span> &#123;</span><br><span class="line">                        <span class="attr">contents</span>: code</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">outdir</span>: <span class="string">&quot;dist&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>测试demo</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> a:<span class="built_in">number</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> b:<span class="built_in">string</span> = <span class="string">&#x27;ikun&#x27;</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="function">() =&gt;</span> <span class="number">123</span></span><br><span class="line"><span class="built_in">console</span>.log(x,fn);</span><br></pre></td></tr></table></figure><p><strong>转移之后的</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> b = <span class="string">&quot;ikun&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(x, fn);</span><br></pre></td></tr></table></figure><p>除了上述基本用法之外，swc 和 esbuild 还提供了许多高级用法，可以更好地满足我们的构建需求。</p><p><strong>插件系统</strong></p><p>swc 和 esbuild 都提供了插件系统，可以通过插件来扩展其功能。例如，swc 的插件可以用于优化代码，提高性能。esbuild 的插件则可以用于处理特定类型的文件，或自定义转换规则。</p><p><strong>缓存系统</strong></p><p>swc 和 esbuild 都提供了缓存系统，可以减少重复编译时间。当文件内容没有发生变化时，swc 和 esbuild 会从缓存中读取已编译的代码，以提高构建速度。</p><p><strong>Watch 模式</strong></p><p>swc 和 esbuild 都支持 Watch 模式，可以在文件发生变化时自动重新编译代码。Watch 模式可以减少手动运行构建命令的频率，提高开发效率。</p><p><strong>自定义插件</strong></p><p>最后，我们可以通过编写自定义插件来扩展 swc 和 esbuild 的功能。例如，可以编写一个插件来自动引入 CSS 文件，或者优化 JavaScript 代码。自定义插件可以根据实际需求进行编写，以更好地满足项目的构建需求。</p><p><strong>结论</strong></p><p>本文介绍了如何使用 swc 和 esbuild 来构建一个简单的 TypeScript 应用程序，并讨论了一些高级用法。swc 和 esbuild 都是现代前端构建工具中的代表，它们都提供了快速编译、代码压缩等功能，可以有效提高应用程序的性能。通过学习 swc 和 esbuild 的使用方法，我们可以更好地进行前端工程化开发，提高开发效率和代码质量。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Rollup构建TS项目&quot;&gt;&lt;a href=&quot;#Rollup构建TS项目&quot; class=&quot;headerlink&quot; title=&quot;Rollup构建TS项目&quot;&gt;&lt;/a&gt;Rollup构建TS项目&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://so.csdn.net/s</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="https://halely.github.io/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://halely.github.io/tags/TypeScript/"/>
    
    <category term="webPack" scheme="https://halely.github.io/tags/webPack/"/>
    
    <category term="Rollup" scheme="https://halely.github.io/tags/Rollup/"/>
    
  </entry>
  
  <entry>
    <title>TypeScrip-学习（八）</title>
    <link href="https://halely.github.io/2023/06/02/TypeScrip-%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%85%AB%EF%BC%89/"/>
    <id>https://halely.github.io/2023/06/02/TypeScrip-%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%85%AB%EF%BC%89/</id>
    <published>2023-06-02T08:07:38.000Z</published>
    <updated>2023-10-10T03:00:45.698Z</updated>
    
    <content type="html"><![CDATA[<h1 id="装饰器-Decorator"><a href="#装饰器-Decorator" class="headerlink" title="装饰器 Decorator"></a>装饰器 Decorator</h1><p>它是一项<strong>实验性特性</strong>，在未来的版本中可能会发生改变<br>它们不仅增加了代码的可读性，清晰地表达了意图，而且提供一种方便的手段，增加或修改类的功能</p><p>启用实验性的装饰器特性，必须在命令行或<code>tsconfig.json</code>里启用编译器选项</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="attr">&quot;experimentalDecorators&quot;</span>: <span class="literal">true</span>,    </span><br><span class="line"><span class="attr">&quot;emitDecoratorMetadata&quot;</span>: <span class="literal">true</span>, </span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>装饰器</strong>是一种特殊类型的声明，它能够被附加到<strong>类声明，方法， 访问符，属性或参数上</strong>。<br><strong>学习点</strong></p><ol><li>类装饰器：<code>ClassDecorator</code></li><li>方法装饰器：<code>MethodDecorator</code></li><li>属性装饰器：<code>PropertyDecorator</code></li><li>参数装饰器：<code>ParameterDecorator</code></li><li>装饰器工厂</li></ol><h2 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h2><p>定义一个类装饰器函数 他会把<code>Http</code>的构造函数传入你的<code>Base</code>函数当做第一个参数,注意是<strong>构造函数不是原型</strong></p><blockquote><p>优势：当原先的类有很多业务代码，无法全部理清，但是又需要添加新的方法或属性。因为迭代器返回的是构造函数，可以在回调方法中加入你所需要的业务，这是不影响原先业务</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Base:ClassDecorator=<span class="function">(<span class="params">target</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(target)</span><br><span class="line">  target.prototype.Name=<span class="string">&#x27;hale&#x27;</span>;</span><br><span class="line">  target.prototype.fn=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;本人单身&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Base</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Http</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> http=<span class="keyword">new</span> Http() <span class="keyword">as</span> <span class="built_in">any</span>;</span><br><span class="line">http.fn()</span><br><span class="line"><span class="built_in">console</span>.log(http.Name)</span><br></pre></td></tr></table></figure><h2 id="方法装饰器"><a href="#方法装饰器" class="headerlink" title="方法装饰器"></a>方法装饰器</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> Get = <span class="function">(<span class="params">url: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> fn: MethodDecorator = <span class="function">(<span class="params">target, key, descriptor: PropertyDescriptor</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(target, key, descriptor)</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * @description 它的返回参数有三个：</span></span><br><span class="line"><span class="comment">    * @target 对于静态成员来说是类的构造函数，对于实例成员是类的原型对象</span></span><br><span class="line"><span class="comment">    * @key 成员的名字。</span></span><br><span class="line"><span class="comment">    * @descriptor 成员的属性描述符。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    axios.get(url).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      descriptor.value(res.data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fn</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Http</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">&#x27;https://api.apiopen.top/api/getUserInfoForId/1&#x27;</span>)</span><br><span class="line">  <span class="function"><span class="title">getList</span>(<span class="params">data: <span class="built_in">any</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> http = <span class="keyword">new</span> Http()</span><br></pre></td></tr></table></figure><h2 id="装饰器工厂"><a href="#装饰器工厂" class="headerlink" title="装饰器工厂"></a>装饰器工厂</h2><p>其实也就是一个高阶函数 外层的函数接受值,里层的函数最终接受类的构造函数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Base = <span class="function">(<span class="params">params: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> fn: ClassDecorator = <span class="function">(<span class="params">target:<span class="built_in">Function</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(target)</span><br><span class="line">    <span class="built_in">console</span>.log(params)</span><br><span class="line">    target.prototype.Name = <span class="string">&#x27;hale&#x27;</span>;</span><br><span class="line">    target.prototype.getFn = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;本人单身&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fn</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Base</span>(<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Http</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> http=<span class="keyword">new</span> Http() <span class="keyword">as</span> <span class="built_in">any</span>;</span><br><span class="line">http.fn()</span><br><span class="line"><span class="built_in">console</span>.log(http.Name)</span><br></pre></td></tr></table></figure><h2 id="参数装饰器"><a href="#参数装饰器" class="headerlink" title="参数装饰器"></a>参数装饰器</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;reflect-metadata&#x27;</span></span><br><span class="line"><span class="keyword">const</span> Get = <span class="function">(<span class="params">url: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> fn: MethodDecorator = <span class="function">(<span class="params">target, key, descriptor: PropertyDescriptor</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> metadata=<span class="built_in">Reflect</span>.getMetadata(<span class="string">&#x27;key&#x27;</span>,target);<span class="comment">//获取元数据</span></span><br><span class="line">    <span class="built_in">console</span>.log(metadata)</span><br><span class="line">    axios.get(url).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      descriptor.value(metadata?res[metadata]:res)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fn</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> Result = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> fn: ParameterDecorator = <span class="function">(<span class="params">target, propertyKey, parameterIndex</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * @description 它的返回参数有三个：</span></span><br><span class="line"><span class="comment">    * @target 对于静态成员来说是类的构造函数，对于实例成员是类的原型对象</span></span><br><span class="line"><span class="comment">    * @key 成员的名字。</span></span><br><span class="line"><span class="comment">    * @parameterIndex 参数对应的索引</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">//设置元数据</span></span><br><span class="line">    <span class="built_in">Reflect</span>.defineMetadata(<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;data&#x27;</span>, target)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fn</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Http</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">&#x27;https://api.apiopen.top/api/getUserInfoForId/1&#x27;</span>)</span><br><span class="line">  <span class="function"><span class="title">getList</span>(<span class="params"> <span class="meta">@Result</span>() data: <span class="built_in">any</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> http = <span class="keyword">new</span> Http()</span><br></pre></td></tr></table></figure><blockquote><p>参数装饰器的优先级大于方法装饰器</p></blockquote><h2 id="属性装饰器"><a href="#属性装饰器" class="headerlink" title="属性装饰器"></a>属性装饰器</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Name: PropertyDecorator = <span class="function">(<span class="params">target, propertyKey</span>)=&gt;</span>&#123;</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * @description 它的返回参数有两个：</span></span><br><span class="line"><span class="comment">    * @target 对于静态成员来说是类的构造函数，对于实例成员是类的原型对象</span></span><br><span class="line"><span class="comment">    * @propertyKey 成员的名字。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="built_in">console</span>.log(target, propertyKey)</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Http</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Name</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;装饰器-Decorator&quot;&gt;&lt;a href=&quot;#装饰器-Decorator&quot; class=&quot;headerlink&quot; title=&quot;装饰器 Decorator&quot;&gt;&lt;/a&gt;装饰器 Decorator&lt;/h1&gt;&lt;p&gt;它是一项&lt;strong&gt;实验性特性&lt;/strong&gt;</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="https://halely.github.io/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://halely.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScrip-学习（七）</title>
    <link href="https://halely.github.io/2023/05/27/TypeScrip-%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%83%EF%BC%89/"/>
    <id>https://halely.github.io/2023/05/27/TypeScrip-%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%83%EF%BC%89/</id>
    <published>2023-05-27T08:50:03.000Z</published>
    <updated>2023-06-02T08:08:27.593Z</updated>
    
    <content type="html"><![CDATA[<h1 id="命名空间-namespace"><a href="#命名空间-namespace" class="headerlink" title="命名空间 namespace"></a>命名空间 namespace</h1><p>在工作中无法避免全局变量造成的污染，<code>TypeScript</code>提供了<code>namespace</code> 避免这个问题出现</p><ul><li>内部模块，主要用于组织代码，避免命名冲突。</li><li>命名空间内的类默认私有</li><li>通过 export 暴露</li><li>通过 namespace 关键字定义</li></ul><blockquote><p><strong>TypeScript与ECMAScript 2015一样，任何包含顶级import或者export的文件都被当成一个模块。相反地，如果一个文件不带有顶级的import或者export声明，那么它的内容被视为全局可见的（因此对模块也是可见的）</strong></p></blockquote><p><code>实例</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//命名空间中通过export将想要暴露的部分导出,否则无法读取其值</span></span><br><span class="line"><span class="keyword">namespace</span> a &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">const</span> Time: <span class="built_in">number</span> = <span class="number">1000</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">const</span> fn = &lt;T&gt;(arg: T): <span class="function"><span class="params">T</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> arg</span><br><span class="line">    &#125;</span><br><span class="line">    fn(Time)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> b &#123;</span><br><span class="line">     <span class="keyword">export</span> <span class="keyword">const</span> Time: <span class="built_in">number</span> = <span class="number">1000</span></span><br><span class="line">     <span class="keyword">export</span> <span class="keyword">const</span> fn = &lt;T&gt;(arg: T): <span class="function"><span class="params">T</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> arg</span><br><span class="line">    &#125;</span><br><span class="line">    fn(Time)</span><br><span class="line">&#125;</span><br><span class="line">a.Time</span><br></pre></td></tr></table></figure><p><code>嵌套命名</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> a &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">namespace</span> b &#123;</span><br><span class="line">        <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line">            <span class="attr">parameters</span>: <span class="built_in">string</span></span><br><span class="line">            <span class="function"><span class="title">constructor</span>(<span class="params">parameters: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.parameters = parameters</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> v = a.b.Vue</span><br><span class="line"><span class="keyword">new</span> v(<span class="string">&#x27;1&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>抽离命名空间</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> A &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">const</span> a = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//b.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;A&#125; <span class="keyword">from</span> <span class="string">&#x27;./a.ts&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(A.a)</span><br><span class="line"><span class="comment">//简化名称</span></span><br><span class="line"><span class="keyword">import</span> X=A.a;</span><br><span class="line"><span class="built_in">console</span>.log(x)</span><br></pre></td></tr></table></figure><p><code>合并命名空间</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重名的命名空间会合并</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> A &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">const</span> a = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> A &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">const</span> b =a</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 会合并</span></span><br></pre></td></tr></table></figure><h1 id="三斜线指令"><a href="#三斜线指令" class="headerlink" title="三斜线指令"></a>三斜线指令</h1><p>三斜线指令是包含单个XML标签的单行注释。 注释的内容会做为<strong>编译器指令使用</strong></p><blockquote><p>三斜线指令仅可放在包含它的文件的最顶端。 一个三斜线指令的前面只能出现单行或多行注释，这包括其它的三斜线指令。 如果它们出现在一个语句或声明之后，那么它们会被当做普通的单行注释，并且不具有特殊的涵义。</p></blockquote><p><code>/// &lt;reference path=&quot;...&quot; /&gt;</code>: 是三斜线指令中最常见的一种，它用于声明文件间的 依赖</p><p><strong>三斜线引用</strong>告诉编译器在编译过程中要引入的额外的文件，你也可以把它理解能<code>import</code>，它可以告诉编译器在编译过程中要<strong>引入的额外的文件</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.ts</span></span><br><span class="line"><span class="keyword">namespace</span> A &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">const</span> fn = <span class="function">() =&gt;</span> <span class="string">&#x27;a&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//b.ts</span></span><br><span class="line"><span class="keyword">namespace</span> A &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">const</span> fn2 = <span class="function">() =&gt;</span> <span class="string">&#x27;b&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//c.ts</span></span><br><span class="line"><span class="comment">///&lt;reference path=&quot;./a.ts&quot; /&gt;</span></span><br><span class="line"><span class="comment">///&lt;reference path=&quot;./b.ts&quot; /&gt;</span></span><br><span class="line"><span class="built_in">console</span>.log(A);</span><br></pre></td></tr></table></figure><p>当你想引入声明文件的时候可以使用，如引入<code>nodeJS</code> <code>/// &lt;reference types=&quot;node&quot; /&gt;</code></p><h1 id="声明文件-d-ts"><a href="#声明文件-d-ts" class="headerlink" title="声明文件 d.ts"></a>声明文件 d.ts</h1><p>在开发中我们现在会很频繁的使第三方库，但是我们如果使用TS开发，当使用第三方库时，我们需要引用它的声明文件，才能获得对应的代码补全、接口提示等功能。一般的声明我们需要使用关键字<code>declare</code>  。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">var</span> <span class="comment">//声明全局变量</span></span><br><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> //声明全局方法</span></span><br><span class="line"><span class="function"><span class="title">declare</span> <span class="title">class</span> //声明全局类</span></span><br><span class="line"><span class="function"><span class="title">declare</span> <span class="title">enum</span> //声明全局枚举类型</span></span><br><span class="line"><span class="function"><span class="title">declare</span> <span class="title">namespace</span> //声明（含有子属性的）全局对象</span></span><br><span class="line"><span class="function"><span class="title">interface</span> 和 <span class="title">type</span> //声明全局类型</span></span><br><span class="line"><span class="function">/// &lt;<span class="title">reference</span> /&gt; 三斜线指令</span></span><br></pre></td></tr></table></figure><p>当我们使用第三方插件发现报错了，无法读取其值，那么有可能你的第三方没有提供声明文件列如<code>express</code> ，那么你可以尝试使用<code>npm install @types/node -D</code>去下载社区的声明文件，<br>当然也可以简单的手写</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">index.ts</span><br><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="keyword">const</span> router = express.Router()</span><br><span class="line">app.use(<span class="string">&#x27;/api&#x27;</span>, router)</span><br><span class="line">router.get(<span class="string">&#x27;/list&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.json(&#123;</span><br><span class="line">        <span class="attr">code</span>: <span class="number">200</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">9001</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">9001</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//express.d.ts</span></span><br><span class="line"><span class="keyword">declare</span> <span class="built_in">module</span> <span class="string">&#x27;express&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">interface</span> Router &#123;</span><br><span class="line">        get(path: <span class="built_in">string</span>, <span class="attr">cb</span>: <span class="function">(<span class="params">req: <span class="built_in">any</span>, res: <span class="built_in">any</span></span>) =&gt;</span> <span class="built_in">void</span>): <span class="built_in">void</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">interface</span> App &#123;</span><br><span class="line"> </span><br><span class="line">        use(path: <span class="built_in">string</span>, <span class="attr">router</span>: <span class="built_in">any</span>): <span class="built_in">void</span></span><br><span class="line">        listen(port: <span class="built_in">number</span>, cb?: <span class="function">() =&gt;</span> <span class="built_in">void</span>): <span class="built_in">void</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">interface</span> Express &#123;</span><br><span class="line">        (): App</span><br><span class="line">        Router(): Router</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> express: Express</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> express</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Mixins混入"><a href="#Mixins混入" class="headerlink" title="Mixins混入"></a>Mixins混入</h1><p>怎么说呢，就像是合并对象<br><code>对象混入</code><br>就可以使用 <code>Object.assign</code> 合并多个对象</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Name &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Age &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Sex &#123;</span><br><span class="line">    <span class="attr">sex</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> people1: Name = &#123; <span class="attr">name</span>: <span class="string">&quot;小满&quot;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> people2: Age = &#123; <span class="attr">age</span>: <span class="number">20</span> &#125;</span><br><span class="line"><span class="keyword">let</span> people3: Sex = &#123; <span class="attr">sex</span>: <span class="number">1</span> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> people = <span class="built_in">Object</span>.assign(people1,people2,people3);<span class="comment">//people 会被推断成一个交差类型 Name &amp; Age &amp; sex;</span></span><br></pre></td></tr></table></figure><p><code>类的混入</code></p><p>首先声明两个mixins类 <strong>（严格模式要关闭不然编译不过）</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="function"><span class="title">changeType</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.type = !<span class="built_in">this</span>.type</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line">    getName(): <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//首先应该注意到的是，没使用extends而是使用implements</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="title">implements</span> <span class="title">A</span>,<span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="attr">type</span>:<span class="built_in">boolean</span></span><br><span class="line">    <span class="attr">changeType</span>:<span class="function">()=&gt;</span><span class="built_in">void</span>;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    getName:<span class="function">()=&gt;</span> <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//然后创建帮助函数，做混入操作。 它会遍历mixins上的所有属性，并复制到目标上去，把之前的占位属性替换成真正的实现代码</span></span><br><span class="line">Mixins(C, [A, B])</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Mixins</span>(<span class="params">curCls: <span class="built_in">any</span>, itemCls: <span class="built_in">any</span>[]</span>) </span>&#123;</span><br><span class="line">    itemCls.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">Object</span>.getOwnPropertyNames(item.prototype).forEach(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">            curCls.prototype[name] = item.prototype[name]</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;命名空间-namespace&quot;&gt;&lt;a href=&quot;#命名空间-namespace&quot; class=&quot;headerlink&quot; title=&quot;命名空间 namespace&quot;&gt;&lt;/a&gt;命名空间 namespace&lt;/h1&gt;&lt;p&gt;在工作中无法避免全局变量造成的污染，&lt;cod</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="https://halely.github.io/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://halely.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScrip-学习（六）</title>
    <link href="https://halely.github.io/2023/05/26/TypeScrip-%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%85%AD%EF%BC%89/"/>
    <id>https://halely.github.io/2023/05/26/TypeScrip-%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%85%AD%EF%BC%89/</id>
    <published>2023-05-26T08:50:03.000Z</published>
    <updated>2023-05-29T07:27:52.815Z</updated>
    
    <content type="html"><![CDATA[<p>学习TS必须要对TS的配置有一定了解</p><p><strong>生成tsconfig.json 文件</strong>  – <code>tsc --init</code>命令生成</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;incremental&quot;</span>: <span class="literal">true</span>, <span class="comment">// TS编译器在第一次编译之后会生成一个存储编译信息的文件，第二次编译会在第一次的基础上进行增量编译，可以提高编译的速度</span></span><br><span class="line">  <span class="attr">&quot;tsBuildInfoFile&quot;</span>: <span class="string">&quot;./buildFile&quot;</span>, <span class="comment">// 增量编译文件的存储位置</span></span><br><span class="line">  <span class="attr">&quot;diagnostics&quot;</span>: <span class="literal">true</span>, <span class="comment">// 打印诊断信息 </span></span><br><span class="line">  <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;ES5&quot;</span>, <span class="comment">// 目标语言的版本</span></span><br><span class="line">  <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;CommonJS&quot;</span>, <span class="comment">// 生成代码的模板标准</span></span><br><span class="line">  <span class="attr">&quot;outFile&quot;</span>: <span class="string">&quot;./app.js&quot;</span>, <span class="comment">// 将多个相互依赖的文件生成一个文件，可以用在AMD模块中，即开启时应设置&quot;module&quot;: &quot;AMD&quot;,</span></span><br><span class="line">  <span class="attr">&quot;lib&quot;</span>: [<span class="string">&quot;DOM&quot;</span>, <span class="string">&quot;ES2015&quot;</span>, <span class="string">&quot;ScriptHost&quot;</span>, <span class="string">&quot;ES2019.Array&quot;</span>], <span class="comment">// TS需要引用的库，即声明文件，es5 默认引用dom、es5、scripthost,如需要使用es的高级版本特性，通常都需要配置，如es8的数组新特性需要引入&quot;ES2019.Array&quot;,</span></span><br><span class="line">  <span class="attr">&quot;allowJS&quot;</span>: <span class="literal">true</span>, <span class="comment">// 允许编译器编译JS，JSX文件</span></span><br><span class="line">  <span class="attr">&quot;checkJs&quot;</span>: <span class="literal">true</span>, <span class="comment">// 允许在JS文件中报错，通常与allowJS一起使用</span></span><br><span class="line">  <span class="attr">&quot;outDir&quot;</span>: <span class="string">&quot;./dist&quot;</span>, <span class="comment">// 指定输出目录</span></span><br><span class="line">  <span class="attr">&quot;rootDir&quot;</span>: <span class="string">&quot;./&quot;</span>, <span class="comment">// 指定输出文件目录(用于输出)，用于控制输出目录结构</span></span><br><span class="line">  <span class="attr">&quot;declaration&quot;</span>: <span class="literal">true</span>, <span class="comment">// 生成声明文件，开启后会自动生成声明文件</span></span><br><span class="line">  <span class="attr">&quot;declarationDir&quot;</span>: <span class="string">&quot;./file&quot;</span>, <span class="comment">// 指定生成声明文件存放目录</span></span><br><span class="line">  <span class="attr">&quot;emitDeclarationOnly&quot;</span>: <span class="literal">true</span>, <span class="comment">// 只生成声明文件，而不会生成js文件</span></span><br><span class="line">  <span class="attr">&quot;sourceMap&quot;</span>: <span class="literal">true</span>, <span class="comment">// 生成目标文件的sourceMap文件</span></span><br><span class="line">  <span class="attr">&quot;inlineSourceMap&quot;</span>: <span class="literal">true</span>, <span class="comment">// 生成目标文件的inline SourceMap，inline SourceMap会包含在生成的js文件中</span></span><br><span class="line">  <span class="attr">&quot;declarationMap&quot;</span>: <span class="literal">true</span>, <span class="comment">// 为声明文件生成sourceMap</span></span><br><span class="line">  <span class="attr">&quot;typeRoots&quot;</span>: [], <span class="comment">// 声明文件目录，默认时node_modules/@types</span></span><br><span class="line">  <span class="attr">&quot;types&quot;</span>: [], <span class="comment">// 加载的声明文件包</span></span><br><span class="line">  <span class="attr">&quot;removeComments&quot;</span>:<span class="literal">true</span>, <span class="comment">// 删除注释 </span></span><br><span class="line">  <span class="attr">&quot;noEmit&quot;</span>: <span class="literal">true</span>, <span class="comment">// 不输出文件,即编译后不会生成任何js文件</span></span><br><span class="line">  <span class="attr">&quot;noEmitOnError&quot;</span>: <span class="literal">true</span>, <span class="comment">// 发送错误时不输出任何文件</span></span><br><span class="line">  <span class="attr">&quot;noEmitHelpers&quot;</span>: <span class="literal">true</span>, <span class="comment">// 不生成helper函数，减小体积，需要额外安装，常配合importHelpers一起使用</span></span><br><span class="line">  <span class="attr">&quot;importHelpers&quot;</span>: <span class="literal">true</span>, <span class="comment">// 通过tslib引入helper函数，文件必须是模块</span></span><br><span class="line">  <span class="attr">&quot;downlevelIteration&quot;</span>: <span class="literal">true</span>, <span class="comment">// 降级遍历器实现，如果目标源是es3/5，那么遍历器会有降级的实现</span></span><br><span class="line">  <span class="attr">&quot;strict&quot;</span>: <span class="literal">true</span>, <span class="comment">// 开启所有严格的类型检查</span></span><br><span class="line">  <span class="attr">&quot;alwaysStrict&quot;</span>: <span class="literal">true</span>, <span class="comment">// 在代码中注入&#x27;use strict&#x27;</span></span><br><span class="line">  <span class="attr">&quot;noImplicitAny&quot;</span>: <span class="literal">true</span>, <span class="comment">// 不允许隐式的any类型</span></span><br><span class="line">  <span class="attr">&quot;strictNullChecks&quot;</span>: <span class="literal">true</span>, <span class="comment">// 不允许把null、undefined赋值给其他类型的变量</span></span><br><span class="line">  <span class="attr">&quot;strictFunctionTypes&quot;</span>: <span class="literal">true</span>, <span class="comment">// 不允许函数参数双向协变</span></span><br><span class="line">  <span class="attr">&quot;strictPropertyInitialization&quot;</span>: <span class="literal">true</span>, <span class="comment">// 类的实例属性必须初始化</span></span><br><span class="line">  <span class="attr">&quot;strictBindCallApply&quot;</span>: <span class="literal">true</span>, <span class="comment">// 严格的bind/call/apply检查</span></span><br><span class="line">  <span class="attr">&quot;noImplicitThis&quot;</span>: <span class="literal">true</span>, <span class="comment">// 不允许this有隐式的any类型</span></span><br><span class="line">  <span class="attr">&quot;noUnusedLocals&quot;</span>: <span class="literal">true</span>, <span class="comment">// 检查只声明、未使用的局部变量(只提示不报错)</span></span><br><span class="line">  <span class="attr">&quot;noUnusedParameters&quot;</span>: <span class="literal">true</span>, <span class="comment">// 检查未使用的函数参数(只提示不报错)</span></span><br><span class="line">  <span class="attr">&quot;noFallthroughCasesInSwitch&quot;</span>: <span class="literal">true</span>, <span class="comment">// 防止switch语句贯穿(即如果没有break语句后面不会执行)</span></span><br><span class="line">  <span class="attr">&quot;noImplicitReturns&quot;</span>: <span class="literal">true</span>, <span class="comment">//每个分支都会有返回值</span></span><br><span class="line">  <span class="attr">&quot;esModuleInterop&quot;</span>: <span class="literal">true</span>, <span class="comment">// 允许export=导出，由import from 导入</span></span><br><span class="line">  <span class="attr">&quot;allowUmdGlobalAccess&quot;</span>: <span class="literal">true</span>, <span class="comment">// 允许在模块中全局变量的方式访问umd模块</span></span><br><span class="line">  <span class="attr">&quot;moduleResolution&quot;</span>: <span class="string">&quot;node&quot;</span>, <span class="comment">// 模块解析策略，ts默认用node的解析策略，即相对的方式导入</span></span><br><span class="line">  <span class="attr">&quot;baseUrl&quot;</span>: <span class="string">&quot;./&quot;</span>, <span class="comment">// 解析非相对模块的基地址，默认是当前目录</span></span><br><span class="line">  <span class="attr">&quot;paths&quot;</span>: &#123; <span class="comment">// 路径映射，相对于baseUrl</span></span><br><span class="line">    <span class="comment">// 如使用jq时不想使用默认版本，而需要手动指定版本，可进行如下配置</span></span><br><span class="line">    <span class="attr">&quot;jquery&quot;</span>: [<span class="string">&quot;node_modules/jquery/dist/jquery.min.js&quot;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;rootDirs&quot;</span>: [<span class="string">&quot;src&quot;</span>,<span class="string">&quot;out&quot;</span>], <span class="comment">// 将多个目录放在一个虚拟目录下，用于运行时，即编译后引入文件的位置可能发生变化，这也设置可以虚拟src和out在同一个目录下，不用再去改变路径也不会报错</span></span><br><span class="line">  <span class="attr">&quot;listEmittedFiles&quot;</span>: <span class="literal">true</span>, <span class="comment">// 打印输出文件</span></span><br><span class="line">  <span class="attr">&quot;listFiles&quot;</span>: <span class="literal">true</span><span class="comment">// 打印编译的文件(包括引用的声明文件)</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 指定一个匹配列表（属于自动指定该路径下的所有ts相关文件）</span></span><br><span class="line"><span class="string">&quot;include&quot;</span>: [</span><br><span class="line">   <span class="string">&quot;src/**/*&quot;</span></span><br><span class="line">],</span><br><span class="line"><span class="comment">// 指定一个排除列表（include的反向操作）</span></span><br><span class="line"> <span class="string">&quot;exclude&quot;</span>: [</span><br><span class="line">   <span class="string">&quot;demo.ts&quot;</span></span><br><span class="line">],</span><br><span class="line"><span class="comment">// 指定哪些文件使用该配置（属于手动一个个指定文件）</span></span><br><span class="line"> <span class="string">&quot;files&quot;</span>: [</span><br><span class="line">   <span class="string">&quot;demo.ts&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;学习TS必须要对TS的配置有一定了解&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;生成tsconfig.json 文件&lt;/strong&gt;  – &lt;code&gt;tsc --init&lt;/code&gt;命令生成&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;t</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="https://halely.github.io/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://halely.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 内存空间详解</title>
    <link href="https://halely.github.io/2023/05/16/JavaScript-%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%E8%AF%A6%E8%A7%A3/"/>
    <id>https://halely.github.io/2023/05/16/JavaScript-%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%E8%AF%A6%E8%A7%A3/</id>
    <published>2023-05-16T02:43:51.000Z</published>
    <updated>2023-05-18T01:57:28.517Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p>我们先看下面简单的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    foo();</span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br></pre></td></tr></table></figure><p>这样就会报错<br><img src="http://resource.muyiy.cn/image/2019-07-24-060211.png"></p><p>某些情况下，调用堆栈中函数调用的数量超出了调用堆栈的实际大小，浏览器会抛出一个错误终止运行。上面的就是无限循环调用导致。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;引入&quot;&gt;&lt;a href=&quot;#引入&quot; class=&quot;headerlink&quot; title=&quot;引入&quot;&gt;&lt;/a&gt;引入&lt;/h1&gt;&lt;p&gt;我们先看下面简单的代码&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="https://halely.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中执行上下文和执行栈</title>
    <link href="https://halely.github.io/2023/05/15/JavaScript-%E4%B8%AD%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E5%92%8C%E6%89%A7%E8%A1%8C%E6%A0%88/"/>
    <id>https://halely.github.io/2023/05/15/JavaScript-%E4%B8%AD%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E5%92%8C%E6%89%A7%E8%A1%8C%E6%A0%88/</id>
    <published>2023-05-15T02:54:25.000Z</published>
    <updated>2023-05-16T02:40:31.049Z</updated>
    
    <content type="html"><![CDATA[<h1 id="理解执行上下文"><a href="#理解执行上下文" class="headerlink" title="理解执行上下文"></a>理解执行上下文</h1><p> <strong>执行上下文</strong>是当前<code>JavaScript</code>代码<code>被解析</code>和<code>执行时所在环境</code>的<strong>抽象概念</strong></p><h2 id="执行上下文的类型"><a href="#执行上下文的类型" class="headerlink" title="执行上下文的类型"></a>执行上下文的类型</h2><p>执行上下文总共有三种类型</p><ul><li><strong>全局执行上下文</strong>：只有一个，浏览器中的全局对象就是 window 对象，this 指向这个全局对象。</li><li><strong>函数执行上下文</strong>：存在无数个，只有在函数被调用的时候才会被创建，每次调用函数都会创建一个新的执行上下文。</li><li><strong>Eval 函数执行上下文</strong>： 指的是运行在 eval 函数中的代码，很少用而且不建议使用</li></ul><h2 id="执行栈"><a href="#执行栈" class="headerlink" title="执行栈"></a>执行栈</h2><p>执行栈，也叫调用栈，具有<code>LIFO（后进先出）</code>结构，用于存储在代码执行期间创建的所有执行上下文。<br>首次运行JS代码时，会创建一个<strong>全局执行上下文</strong>并Push到当前的执行栈中。每当发生函数调用，引擎都会为该函数创建一个新的函数执行上下文并Push到当前执行栈的栈顶。<br>根据执行栈<code>LIFO</code>规则，当栈顶函数运行完成后，其对应的函数执行上下文将会从执行栈中Pop出，上下文控制权将移到当前执行栈的下一个执行上下文。</p><h2 id="执行上下文的创建"><a href="#执行上下文的创建" class="headerlink" title="执行上下文的创建"></a>执行上下文的创建</h2><p>执行上下文的创建分两个阶段:<strong>创建阶段</strong>、<strong>执行阶段</strong></p><p><strong>创建阶段</strong></p><ol><li><p>确定 this 的值，也被称为 <code>This Binding</code>。</p><ul><li><strong>全局</strong>执行上下文中，this 的值指向全局对象，在浏览器中this 的值指向 window对象，而在nodejs中指向这个文件的module对象。</li><li><strong>函数</strong>执行上下文中，this 的值取决于函数的调用方式。具体有：<code>默认绑定</code>、<code>隐式绑定</code>、<code>显式绑定（硬绑定）</code>、<code>new绑定</code>、<code>箭头函数</code></li></ul></li><li><p><code>LexicalEnvironment（词法环境）</code> 组件被创建。</p><ul><li><strong>环境记录</strong>：存储变量和函数声明的实际位置</li><li><strong>对外部环境的引用</strong>：可以访问其外部词法环境,全局环境外部环境引用为<code>null</code></li></ul></li><li><p><code>VariableEnvironment（变量环境）</code> 组件被创建。<br>变量环境也是一个词法环境，因此它具有上面定义的词法环境的所有属性。<br>在 ES6 中，<strong>词法环境</strong>和<strong>变量环境</strong>的区别在于前者用于存储<strong>函数声明和变量</strong> <code>let</code> <strong>和</strong> <code>const</code> <strong>绑定，而后者仅用于存储变量</strong><code>var</code>绑定。</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//伪代码</span></span><br><span class="line">ExecutionContext = &#123;  </span><br><span class="line">    ThisBinding = <span class="xml"><span class="tag">&lt;<span class="name">this</span> <span class="attr">value</span>&gt;</span>,     // 确定this </span></span><br><span class="line"><span class="xml">    LexicalEnvironment = &#123; ... &#125;,   // 词法环境</span></span><br><span class="line"><span class="xml">    VariableEnvironment = &#123; ... &#125;,  // 变量环境</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>加餐:变量提升的原因：在创建阶段，函数声明存储在环境中，而变量会被设置为 <code>undefined</code>（在 <code>var</code> 的情况下）或保持未初始化（在 <code>let</code> 和 <code>const</code> 的情况下）。所以这就是为什么可以在声明之前访问 <code>var</code> 定义的变量（尽管是 <code>undefined</code> ），但如果在声明之前访问 <code>let</code> 和 <code>const</code> 定义的变量就会提示引用错误的原因。这就是所谓的变量提升。<strong>函数提升&gt;变量提升</strong></p></blockquote><p><strong>执行阶段</strong></p><p>此阶段，完成对所有变量的分配，最后执行代码。<br>如果 <code>Javascript</code> 引擎在源代码中声明的实际位置找不到 <code>let</code> 变量的值，那么将为其分配 <code>undefined</code> 值</p><h1 id="深入之执行上下文栈和变量对象"><a href="#深入之执行上下文栈和变量对象" class="headerlink" title="深入之执行上下文栈和变量对象"></a>深入之执行上下文栈和变量对象</h1><p>JS是单线程的语言，执行顺序肯定是顺序执行，但是JS 引擎<strong>并不是</strong>一行一行地分析和执行程序，<strong>而是</strong>一段一段地分析执行，会先进行编译阶段然后才是执行阶段。</p><h2 id="执行上下文栈"><a href="#执行上下文栈" class="headerlink" title="执行上下文栈"></a>执行上下文栈</h2><p>因为JS引擎创建了很多的执行上下文，所以JS引擎创建了执行上下文栈（Execution context stack，ECS）来管理执行上下文。<br>当 JavaScript 初始化的时候会向执行上下文栈压入一个全局执行上下文，并且只有当整个应用程序结束的时候，执行栈才会被清空，所以程序结束之前， 执行栈最底部永远有个全局执行上下文。</p><h2 id="函数上下文"><a href="#函数上下文" class="headerlink" title="函数上下文"></a>函数上下文</h2><p>在函数上下文中，用活动对象(activation object, AO)来表示变量对象</p><ol><li><strong>变量对象（VO）</strong>是规范上或者是JS引擎上实现的，并不能在JS环境中直接访问。</li><li>当进入到一个执行上下文后，这个变量对象才会被激活，所以叫<strong>活动对象（AO）</strong>，这时候活动对象上的各种属性才能被访问。</li></ol><p>执行上下文的代码会分成两个阶段进行处理:1.<strong>进入执行上下文</strong>;2.<strong>代码执行</strong></p><p>进入执行上下文:很明显，这个时候还没有执行代码,此时的<strong>变量对象</strong>会包括（如下顺序初始化）</p><ul><li>函数的所有形参 (only函数上下文)：没有实参，属性值设为undefined。</li><li>函数声明：如果变量对象已经存在相同名称的属性，则完全替换这个属性。</li><li>变量声明：如果变量名称跟已经声明的形参或函数相同，则变量声明不会干扰已经存在的这类属性。</li></ul><p><strong>总结</strong>:</p><ol><li>全局上下文的变量对象初始化是全局对象</li><li>函数上下文的变量对象初始化只包括 Arguments 对象</li><li>在进入执行上下文时会给变量对象添加形参、函数声明、变量声明等初始的属性值</li><li>在代码执行阶段，会再次修改变量对象的属性值</li></ol><blockquote><p>借鉴<a href="https://muyiy.cn/blog/1/1.1.html#%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E7%9A%84%E7%B1%BB%E5%9E%8B">文章</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;理解执行上下文&quot;&gt;&lt;a href=&quot;#理解执行上下文&quot; class=&quot;headerlink&quot; title=&quot;理解执行上下文&quot;&gt;&lt;/a&gt;理解执行上下文&lt;/h1&gt;&lt;p&gt; &lt;strong&gt;执行上下文&lt;/strong&gt;是当前&lt;code&gt;JavaScript&lt;/code&gt;代</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="https://halely.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScrip-学习（五）</title>
    <link href="https://halely.github.io/2023/04/27/TypeScrip-%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%94%EF%BC%89/"/>
    <id>https://halely.github.io/2023/04/27/TypeScrip-%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%94%EF%BC%89/</id>
    <published>2023-04-27T03:20:00.000Z</published>
    <updated>2023-05-26T08:51:22.812Z</updated>
    
    <content type="html"><![CDATA[<h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p><strong>泛型</strong>在TypeScript 是很重要的东西,个人理解类似于类型入参</p><p><code>函数泛型</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通类型函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">num</span> (<span class="params">a:<span class="built_in">number</span>,b:<span class="built_in">number</span></span>) : <span class="title">Array</span>&lt;<span class="title">number</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [a ,b];</span><br><span class="line">&#125;</span><br><span class="line">num(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str</span> (<span class="params">a:<span class="built_in">string</span>,b:<span class="built_in">string</span></span>) : <span class="title">Array</span>&lt;<span class="title">string</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [a ,b];</span><br><span class="line">&#125;</span><br><span class="line">str(<span class="string">&#x27;独孤&#x27;</span>,<span class="string">&#x27;求败&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数优化</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Add</span>&lt;<span class="title">T</span>&gt;(<span class="params">a: T, b: T</span>): <span class="title">Array</span>&lt;<span class="title">T</span>&gt;  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [a,b]</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">Add&lt;<span class="built_in">number</span>&gt;(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">Add&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;独孤&#x27;</span>,<span class="string">&#x27;求败&#x27;</span>)</span><br><span class="line"><span class="comment">//也可以使用不同的泛型参数名，只要在数量上和使用方式上能对应上就可以</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>&lt;<span class="title">T</span>,<span class="title">U</span>&gt;(<span class="params">a:T,b:U</span>):<span class="title">Array</span>&lt;<span class="title">T</span>|<span class="title">U</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> params:<span class="built_in">Array</span>&lt;T|U&gt; = [a,b]</span><br><span class="line">    <span class="keyword">return</span> params</span><br><span class="line">&#125;</span><br><span class="line">Sub&lt;<span class="built_in">Boolean</span>,<span class="built_in">number</span>&gt;(<span class="literal">false</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><code>泛型接口</code><br>声明接口的时候 在名字后面加一个&lt;参数&gt;</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Data&lt;T&gt; &#123;</span><br><span class="line">   <span class="attr">str</span>: T</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> MyInter&lt;T&gt; &#123;</span><br><span class="line">   (arg: T): T</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义接口对象</span></span><br><span class="line"><span class="keyword">let</span> data: Data&lt;<span class="built_in">string</span>&gt;=&#123;</span><br><span class="line">    <span class="attr">str</span>:<span class="string">&#x27;张三&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Inter</span>&lt;<span class="title">T</span>&gt;(<span class="params">num: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result: MyInter&lt;<span class="built_in">number</span>&gt; = Inter</span><br><span class="line">result(<span class="number">121</span>)</span><br></pre></td></tr></table></figure><p><code>对象字面量泛型</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo: &#123; &lt;T&gt;(arg: T): T &#125;</span><br><span class="line">foo = <span class="function"><span class="keyword">function</span> &lt;<span class="title">T</span>&gt;(<span class="params">arg:T</span>):<span class="title">T</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">123</span>)</span><br></pre></td></tr></table></figure><p><code>泛型约束</code><br>我们期望在一个泛型的变量上面，获取其<code>length</code>参数，但是，有的数据类型是没有<code>length</code>属性的</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLegnth</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg:T</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg.length;</span><br><span class="line">  <span class="comment">//这会报错，可能不存在length</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候我们就可以使用<strong>泛型约束</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Len &#123;</span><br><span class="line">   <span class="attr">length</span>:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">Len</span>&gt;(<span class="params">arg:T</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg.length</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">getLength&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;123&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>keyof 约束对象</code></p><p>其中使用了TS泛型和泛型约束。首先定义了T类型并使用<code>extends</code>关键字继承object类型的子类型，然后使用<code>keyof</code>操作符获取<code>T</code>类型的所有键，它的返回类型是<strong>联合类型</strong>，最后利用<code>extends</code>关键字约束 K类型必须为<code>keyof</code> <code>T</code>联合类型的子类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> objData = &#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&#x27;123456789&#x27;</span>,</span><br><span class="line">    <span class="attr">num</span>: <span class="number">12</span>,</span><br><span class="line">    <span class="attr">isMan</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PropFn</span>&lt;<span class="title">T</span>,<span class="title">K</span> <span class="title">extends</span> <span class="title">keyof</span> <span class="title">T</span>&gt;(<span class="params">obj:T,key:K</span>):<span class="title">T</span>[<span class="title">K</span>]</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> obj[key]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> data=PropFn(objData,<span class="string">&#x27;isMan&#x27;</span>);<span class="comment">//boolean</span></span><br><span class="line"><span class="keyword">let</span> num=PropFn(objData,<span class="string">&#x27;num&#x27;</span>);<span class="comment">//number</span></span><br><span class="line"><span class="keyword">let</span> newStr=PropFn(objData,<span class="string">&#x27;bbt&#x27;</span>)<span class="comment">//报错</span></span><br></pre></td></tr></table></figure><p><code>泛型类</code><br>声明方法跟函数类似名称后面定义&lt;类型&gt;</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">   <span class="attr">attr</span>: T[] = [];</span><br><span class="line">   add (a:T):T[] &#123;</span><br><span class="line">      <span class="keyword">return</span> [a]</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> Sub&lt;<span class="built_in">number</span>&gt;()</span><br><span class="line">s.attr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">s.add(<span class="number">123</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> str = <span class="keyword">new</span> Sub&lt;<span class="built_in">string</span>&gt;()</span><br><span class="line">str.attr = [<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>]</span><br><span class="line">str.add(<span class="string">&#x27;123&#x27;</span>)</span><br></pre></td></tr></table></figure><p>高阶方式</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Data &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">isMan</span>: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Options&lt;T <span class="keyword">extends</span> <span class="built_in">Object</span>&gt; = &#123;</span><br><span class="line">    [Key <span class="keyword">in</span> keyof T]?: T[Key]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> B=Options&lt;Data&gt;</span><br></pre></td></tr></table></figure><p>例子:封装一个简单的<code>axios</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> axios = &#123;</span><br><span class="line">    get&lt;T&gt;(url: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, rejects</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//创建对象</span></span><br><span class="line">            <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            <span class="comment">//连接接口</span></span><br><span class="line">            xhr.open(<span class="string">&#x27;GET&#x27;</span>, url);</span><br><span class="line">            <span class="comment">// 只要 readyState 属性发生变化，就会调用相应的</span></span><br><span class="line">            xhr.onreadystatechange = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * @description readyState 属性返回一个 XMLHttpRequest 代理当前所处的状态。一个 XHR 代理总是处于下列状态中的一</span></span><br><span class="line"><span class="comment">                 * @ 0 UNSENT 代理被创建，但尚未调用 open() 方法。</span></span><br><span class="line"><span class="comment">                 * @ 1  OPENED open() 方法已经被调用。</span></span><br><span class="line"><span class="comment">                 * @ 2  HEADERS_RECEIVED send() 方法已经被调用，并且头部和状态已经可获得。</span></span><br><span class="line"><span class="comment">                 * @ 3  LOADING 下载中；responseText 属性已经包含部分数据。</span></span><br><span class="line"><span class="comment">                 * @ 4  DONE 下载操作已完成。</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line">                    resolve(<span class="built_in">JSON</span>.parse(xhr.responseText));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            xhr.send(<span class="literal">null</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> ResultData&#123;</span><br><span class="line">    <span class="attr">data</span>:<span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">num</span>:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line">axios.get&lt;ResultData&gt;(<span class="string">&#x27;../data/json&#x27;</span>).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    res.num</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;泛型&quot;&gt;&lt;a href=&quot;#泛型&quot; class=&quot;headerlink&quot; title=&quot;泛型&quot;&gt;&lt;/a&gt;泛型&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;泛型&lt;/strong&gt;在TypeScript 是很重要的东西,个人理解类似于类型入参&lt;/p&gt;
&lt;p&gt;&lt;code&gt;函数泛型&lt;/</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="https://halely.github.io/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://halely.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScrip-学习（四）</title>
    <link href="https://halely.github.io/2023/04/26/TypeScrip-%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <id>https://halely.github.io/2023/04/26/TypeScrip-%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89/</id>
    <published>2023-04-26T08:37:00.000Z</published>
    <updated>2023-05-26T05:55:59.644Z</updated>
    
    <content type="html"><![CDATA[<h1 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1><p>在<code>JavaScript</code>中是没有枚举的概念的TS帮定义了枚举这个类型,定义通过<code>enum</code>关键字</p><ul><li><p><code>数字枚举</code></p>  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">enum</span> Types&#123;</span><br><span class="line">    Red,</span><br><span class="line">    Green,</span><br><span class="line">    BLue</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//简单的定义默认为数字枚举，那么什么是数字枚举呢，即：枚举值是数字，如果你不设置默认值，那么每一个组员默认都是从0开始的自增数</span></span><br><span class="line"><span class="built_in">console</span>.log(Types.Red);<span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(Types.Green);<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(Types.BLue);<span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>  <strong>增长枚举</strong>：细心的我们能发现数字枚举是会<code>自增</code>的，那么如果我们给上一个设置了一个默认值，下一个是自动增加</p>  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">enum</span> Types&#123;</span><br><span class="line">    Red = <span class="number">1</span>,</span><br><span class="line">    Green,</span><br><span class="line">    BLue</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Types.Red);<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(Types.Green);<span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(Types.BLue);<span class="comment">//3</span></span><br></pre></td></tr></table></figure></li><li><p><code>字符串枚举</code><br> 字符串枚举的概念很简单。 在一个字符串枚举里，每个成员都必须用字符串字面量，或另外一个字符串枚举成员进行初始化。</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">enum</span> Types&#123;</span><br><span class="line"> Red = <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line"> Green = <span class="string">&#x27;green&#x27;</span>,</span><br><span class="line"> BLue = <span class="string">&#x27;blue&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 由于字符串枚举没有自增长的行为，字符串枚举可以很好的序列化。 换句话说，如果你正在调试并且必须要读一个数字枚举的运行时的值，这个值通常是很难读的 - 它并不能表达有用的信息，字符串枚举允许你提供一个运行时有意义的并且可读的值，独立于枚举成员的名字。</p></li><li><p><code>异构枚举</code><br>  枚举可以混合字符串和数字成员</p>  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">enum</span> Types&#123;</span><br><span class="line">    No = <span class="string">&quot;No&quot;</span>,</span><br><span class="line">    Yes = <span class="number">1</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="类型别名-type"><a href="#类型别名-type" class="headerlink" title="类型别名 type"></a>类型别名 type</h1><p><code>type</code> 关键字（可以给一个类型定义一个名字）多用于复合类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义类型别名</span></span><br><span class="line"><span class="keyword">type</span> str = <span class="built_in">string</span></span><br><span class="line"><span class="keyword">let</span> s:str = <span class="string">&quot;我是字符串&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(s);</span><br><span class="line"><span class="comment">// 定义函数别名</span></span><br><span class="line"><span class="keyword">type</span> fn = <span class="function">() =&gt;</span> <span class="built_in">string</span></span><br><span class="line"><span class="keyword">let</span> f: fn = <span class="function">() =&gt;</span> <span class="string">&quot;我是函数&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(f);</span><br><span class="line"><span class="keyword">type</span> str = <span class="built_in">string</span> | <span class="built_in">number</span></span><br><span class="line"><span class="comment">//定义联合类型别名</span></span><br><span class="line"><span class="keyword">type</span> strOrNmu = <span class="built_in">string</span> | <span class="built_in">number</span></span><br><span class="line"><span class="keyword">let</span> text1: strOrNmu = <span class="number">123</span></span><br><span class="line"><span class="keyword">let</span> text2: strOrNmu = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(text1,text2);</span><br><span class="line"><span class="comment">//定义值的别名</span></span><br><span class="line"><span class="keyword">type</span> value = <span class="built_in">boolean</span> | <span class="number">0</span> | <span class="string">&#x27;213&#x27;</span></span><br><span class="line"><span class="keyword">let</span> text3:value = <span class="literal">true</span></span><br><span class="line"><span class="comment">//变量text3的值只能是上面value定义的值</span></span><br></pre></td></tr></table></figure><p><code>type</code> 和 <code>interface</code>是有区别的</p><ol><li><code>interface</code>是定义对象类型的，<code>type</code>是类型别名,他只是一个别名！！</li><li><code>interface</code>可以继承,<code>type</code>只能通过 &amp; 交叉类型合并</li><li><code>type</code>可以定义 联合类型 和 可以使用一些操作符 <code>interface</code>不行</li><li><code>interface</code> 遇到重名的会合并 type 不行,而且不能重复定义</li></ol><p><strong>type高级用法</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//右边是否包含左边</span></span><br><span class="line"><span class="keyword">type</span> a1 = <span class="number">1</span> <span class="keyword">extends</span> <span class="built_in">number</span> ? <span class="number">1</span> : <span class="number">0</span> <span class="comment">//1</span></span><br><span class="line"><span class="keyword">type</span> a2 = <span class="number">1</span> <span class="keyword">extends</span> <span class="built_in">Number</span> ? <span class="number">1</span> : <span class="number">0</span> <span class="comment">//1</span></span><br><span class="line"><span class="keyword">type</span> a3= <span class="number">1</span> <span class="keyword">extends</span> <span class="built_in">Object</span> ? <span class="number">1</span> : <span class="number">0</span> <span class="comment">//1</span></span><br><span class="line"><span class="keyword">type</span> a4 = <span class="number">1</span> <span class="keyword">extends</span> <span class="built_in">any</span> ? <span class="number">1</span> : <span class="number">0</span> <span class="comment">//1</span></span><br><span class="line"><span class="keyword">type</span> a5 = <span class="number">1</span> <span class="keyword">extends</span> unknow ? <span class="number">1</span> : <span class="number">0</span> <span class="comment">//1</span></span><br><span class="line"><span class="keyword">type</span> a6 = <span class="number">1</span> <span class="keyword">extends</span> <span class="built_in">never</span> ? <span class="number">1</span> : <span class="number">0</span> <span class="comment">//0</span></span><br></pre></td></tr></table></figure><p><strong>TS类型层级图</strong><br><img src="/img/postImg/tsLevel.png" alt="GIF"></p><h1 id="never类型"><a href="#never类型" class="headerlink" title="never类型"></a>never类型</h1><p><code>TypeScript</code> 将使用 never 类型来表示不应该存在的状态(很抽象是不是)</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回never的函数必须存在无法达到的终点</span></span><br><span class="line"><span class="comment">// 因为必定抛出异常，所以 error 将不会有返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 因为存在死循环，所以 loop 将不会有返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loop</span>(<span class="params"></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>never 与 void 的差异</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//void类型只是没有返回值 但本身不会出错</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Void</span>(<span class="params"></span>):<span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//只会抛出异常没有返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Never</span>(<span class="params"></span>):<span class="title">never</span> </span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//差异2   当我们鼠标移上去的时候会发现 只有void和number    never在联合类型中会被直接移除</span></span><br><span class="line"><span class="keyword">type</span> A = <span class="built_in">void</span> | <span class="built_in">number</span> | <span class="built_in">never</span></span><br></pre></td></tr></table></figure><blockquote><p>任何类型都不能赋值给<code>never</code> 类型</p></blockquote><h1 id="symbol类型"><a href="#symbol类型" class="headerlink" title="symbol类型"></a>symbol类型</h1><p><code>symbol</code>成为了一种新的原生类型，就像<code>number</code>和<code>string</code>一样。<code>symbol</code>类型的值是通过<code>Symbol</code>构造函数创建的。可以传递参做为唯一标识 只支持 <code>string</code> 和<code>number</code>类型的参数</p><p>Symbol的值是唯一的</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s1 = <span class="built_in">Symbol</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">const</span> s2 = <span class="built_in">Symbol</span>(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// s1 === s2 =&gt;false</span></span><br></pre></td></tr></table></figure><blockquote><p>一般来说<code>Symbol</code>是创建唯一值，但是可以调用<code>for</code>来创建<code>Symbol</code>,<code>console.log(Symbol.for(&#39;key&#39;)==Symbol.for(&#39;key&#39;))</code>为<code>true</code>，因为for是查找<code>Symbol</code>有没有注册对应的<code>key</code>值(<strong>key为string类型</strong>)，如果有就返回，如果没有就创建，故是相同的</p></blockquote><p><strong>使用symbol定义的属性，是不能通过如下方式遍历拿到的</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> symbol1 = <span class="built_in">Symbol</span>(<span class="string">&#x27;hale&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> symbol2 = <span class="built_in">Symbol</span>(<span class="string">&#x27;ton&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> obj= &#123;</span><br><span class="line">   [symbol1]: <span class="string">&#x27;hale&#x27;</span>,</span><br><span class="line">   [symbol2]: <span class="string">&#x27;ton&#x27;</span>,</span><br><span class="line">   <span class="attr">age</span>: <span class="number">27</span>,</span><br><span class="line">   <span class="attr">sex</span>: <span class="string">&#x27;man&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 for in 遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(key);<span class="comment">//// 注意在console看key,是不是没有遍历到symbol1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2 Object.keys 遍历</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(obj))</span><br><span class="line"><span class="comment">// 3 getOwnPropertyNames</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyNames(obj))</span><br><span class="line"><span class="comment">// 4 JSON.stringify 克隆是无法克隆symbol的数据的</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(obj))</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取方式 */</span></span><br><span class="line"><span class="comment">// 1 拿到具体的symbol 属性,对象中有几个就会拿到几个</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertySymbols(obj))</span><br><span class="line"><span class="comment">// 2 es6 的 Reflect 拿到对象的所有属性</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Reflect</span>.ownKeys(obj))</span><br></pre></td></tr></table></figure><p><strong>Symbol.iterator 迭代器 和 生成器 for of</strong></p><p>在es6中有<code>iterator</code>(迭代器)概念，遍历大部分类型迭代器 <code>arr</code> <code>nodeList</code> <code>函数的 arguments 对象</code> <code>set</code> <code>map</code> 等</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr:<span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> iterator = arr[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());  <span class="comment">//&#123; value: 1, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());  <span class="comment">//&#123; value: 2, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());  <span class="comment">//&#123; value: 3, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());  <span class="comment">//&#123; value: 4, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());  <span class="comment">//&#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure><p><code>ES6</code> 规定，默认的 <code>Iterator</code> 接口部署在数据结构的<code>Symbol.iterator</code>属性，或者说，一个数据结构只要具有<code>Symbol.iterator</code>属性，就可以认为是<strong>可遍历的</strong><br>象 <strong>（Object）</strong> 之所以没有默认部署 Iterator 接口，是因为对象的哪个属性先遍历，哪个属性后遍历是不确定的，需要开发者手动指定。本质上，遍历器是一种线性处理，对于任何非线性的数据结构，部署遍历器接口，就等于部署一种线性转换。不过，严格地说，对象部署遍历器接口并不是很必要，因为这时对象实际上被当作 <code>Map 结构使用，ES5</code> 没有 <code>Map</code> 结构，而 <code>ES6</code> 原生提供了。下面是es6对应的知识点:</p><ol><li><p><strong>生成器</strong></p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">getApp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;hale&#x27;</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;24&#x27;</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="built_in">Promise</span>.resolve(<span class="string">&#x27;你好&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;man&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> app = getApp()</span><br><span class="line"><span class="built_in">console</span>.log(app.next())</span><br><span class="line"><span class="built_in">console</span>.log(app.next())</span><br><span class="line"><span class="built_in">console</span>.log(app.next())</span><br><span class="line"><span class="built_in">console</span>.log(app.next())</span><br><span class="line"><span class="built_in">console</span>.log(app.next())</span><br></pre></td></tr></table></figure></li><li><p><strong>迭代器利用</strong></p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map: <span class="built_in">Map</span>&lt;<span class="built_in">any</span>, <span class="built_in">any</span>&gt; = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">&#x27;hale&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>])</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> each = <span class="function">(<span class="params">value: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> It: <span class="built_in">any</span> = value[<span class="built_in">Symbol</span>.iterator]()</span><br><span class="line">    <span class="keyword">let</span> next: <span class="built_in">any</span> = &#123; <span class="attr">done</span>: <span class="literal">false</span> &#125;</span><br><span class="line">    <span class="keyword">while</span> (!next.done) &#123;</span><br><span class="line">        next = It.next();</span><br><span class="line">        <span class="keyword">if</span> (!next.done) <span class="built_in">console</span>.log(next.value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">each(map)</span><br><span class="line">each(arr)</span><br><span class="line">each(set)</span><br></pre></td></tr></table></figure></li><li><p><strong><code>for of</code> 就是迭代器的语法糖，就是上面内置的<code>each</code>方法</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map: <span class="built_in">Map</span>&lt;<span class="built_in">any</span>, <span class="built_in">any</span>&gt; = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">&#x27;hale&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>])</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> set)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>数组的解构</strong></p><p> 数组的解构或者<code>[...]</code>利用的就是迭代器，如果需要数组方法解构对象，可以自己封装</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">currentIndex</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">maxIndex</span>: <span class="number">5</span>,</span><br><span class="line">    [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">currentIndex</span>: <span class="built_in">this</span>.currentIndex,</span><br><span class="line">            <span class="attr">maxIndex</span>: <span class="built_in">this</span>.maxIndex,</span><br><span class="line">            <span class="function"><span class="title">next</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.maxIndex == <span class="built_in">this</span>.currentIndex) &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;</span><br><span class="line">                        <span class="attr">value</span>: <span class="literal">undefined</span>,</span><br><span class="line">                        <span class="attr">done</span>: <span class="literal">true</span>,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;</span><br><span class="line">                        <span class="attr">value</span>: <span class="built_in">this</span>.currentIndex++,</span><br><span class="line">                        done: <span class="literal">false</span>,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> ad=[...obj]</span><br><span class="line"><span class="built_in">console</span>.log(ad) <span class="comment">//[ 0, 1, 2, 3, 4 ]</span></span><br></pre></td></tr></table></figure><blockquote><p>注意这是数组的解构原理，对应的解构有自己的原理</p></blockquote><p> 以下为这些symbols的列表：</p></li></ol><p><strong>Symbol.hasInstance</strong><br>方法，会被instanceof运算符调用。构造器对象用来识别一个对象是否是其实例。</p><p><strong>Symbol.isConcatSpreadable</strong><br>布尔值，表示当在一个对象上调用Array.prototype.concat时，这个对象的数组元素是否可展开。</p><p><strong>Symbol.iterator</strong><br>方法，被for-of语句调用。返回对象的默认迭代器。</p><p><strong>Symbol.match</strong><br>方法，被String.prototype.match调用。正则表达式用来匹配字符串。</p><p><strong>Symbol.replace</strong><br>方法，被String.prototype.replace调用。正则表达式用来替换字符串中匹配的子串。</p><p><strong>Symbol.search</strong><br>方法，被String.prototype.search调用。正则表达式返回被匹配部分在字符串中的索引。</p><p><strong>Symbol.species</strong><br>函数值，为一个构造函数。用来创建派生对象。</p><p><strong>Symbol.split</strong><br>方法，被String.prototype.split调用。正则表达式来用分割字符串。</p><p><strong>Symbol.toPrimitive</strong><br>方法，被ToPrimitive抽象操作调用。把对象转换为相应的原始值。</p><p><strong>Symbol.toStringTag</strong><br>方法，被内置方法Object.prototype.toString调用。返回创建对象时默认的字符串描述。</p><p><strong>Symbol.unscopables</strong><br>对象，它自己拥有的属性会被with作用域排除在外。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;枚举&quot;&gt;&lt;a href=&quot;#枚举&quot; class=&quot;headerlink&quot; title=&quot;枚举&quot;&gt;&lt;/a&gt;枚举&lt;/h1&gt;&lt;p&gt;在&lt;code&gt;JavaScript&lt;/code&gt;中是没有枚举的概念的TS帮定义了枚举这个类型,定义通过&lt;code&gt;enum&lt;/code&gt;关键</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="https://halely.github.io/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://halely.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScrip-学习（三）</title>
    <link href="https://halely.github.io/2023/04/25/TypeScrip-%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>https://halely.github.io/2023/04/25/TypeScrip-%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/</id>
    <published>2023-04-25T08:45:59.000Z</published>
    <updated>2023-04-26T07:41:23.471Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h1><h2 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">//在TypeScript是不允许直接在constructor 定义变量的 需要在constructor上面先声明</span></span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span> = <span class="number">11</span></span>)</span> &#123;</span><br><span class="line">        <span class="comment">//你如果了定义了变量不用 也会报错 通常是给个默认值 或者 进行赋值</span></span><br><span class="line">       <span class="built_in">this</span>.name=name</span><br><span class="line">       <span class="built_in">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">run</span>(<span class="params"></span>)</span> &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> item=<span class="keyword">new</span> Person(<span class="string">&#x27;张三&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="类的修饰符"><a href="#类的修饰符" class="headerlink" title="类的修饰符"></a>类的修饰符</h2><ol><li><p><code>访问修饰符</code>总共有三个 <code>public</code>、<code>private</code>、<code>protected</code></p><ul><li><code>public</code> :公共的,没有访问限制</li><li><code>protected</code> : 受保护的,只能自身和子类访问，实例不能访问</li><li><code>pravite</code>  :私人的，只能自身访问</li></ul></li><li><p><code>只读修饰符</code> <strong>readonly</strong></p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">F</span> </span>&#123;</span><br><span class="line"><span class="keyword">readonly</span> a =<span class="number">444</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S</span> <span class="keyword">extends</span> <span class="title">F</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span>  s = <span class="keyword">new</span> S;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(s.a);</span><br><span class="line">s.a = <span class="number">999</span> ;<span class="comment">//无法分配到 &quot;a&quot; ，因为它是只读属性。</span></span><br></pre></td></tr></table></figure></li><li><p><code>静态修饰符</code> <strong>static</strong></p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line"><span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line"><span class="keyword">static</span> sex: <span class="built_in">string</span> = <span class="string">&#x27;man&#x27;</span></span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span> = <span class="number">11</span></span>)</span> &#123;</span><br><span class="line">    <span class="comment">//你如果了定义了变量不用 也会报错 通常是给个默认值 或者 进行赋值</span></span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="comment">//static 定义的属性 不可以通过this 去访问 只能通过类名去调用</span></span><br><span class="line">    <span class="comment">//this.sex  this.run()</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="function"><span class="title">run</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(this.name); //this.name 会报错  因为在静态函数中this只能访问同是this的值</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.sex)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> item = <span class="keyword">new</span> Person(<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line"><span class="comment">//item.run() item.sex //实例无法调用</span></span><br><span class="line">Person.run()</span><br><span class="line">Person.sex</span><br></pre></td></tr></table></figure></li></ol><h2 id="interface-定义类"><a href="#interface-定义类" class="headerlink" title="interface 定义类"></a>interface 定义类</h2><p>和对象一样我们同样可以使用<code>interface</code> 定义类,但是需要使用关键字<code>implements</code>,后面跟<code>interface</code>的名字多个用逗号隔开继承还是用<code>extends</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> PersonClass &#123;</span><br><span class="line">    get(<span class="keyword">type</span>: <span class="built_in">boolean</span>): <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> PersonClass2&#123;</span><br><span class="line">    set():<span class="built_in">void</span>,</span><br><span class="line">    <span class="attr">strName</span>:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&quot;123&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">A</span> <span class="title">implements</span> <span class="title">PersonClass</span>,<span class="title">PersonClass2</span> </span>&#123;</span><br><span class="line">    <span class="attr">strName</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">//继承需要执行super()加载父类，且放在必须放在第一位</span></span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.strName = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params"><span class="keyword">type</span>:<span class="built_in">boolean</span></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">type</span></span><br><span class="line">    &#125;</span><br><span class="line">    set () &#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>应用场景如果你写的类实例化之后毫无用处此时我可以把他定义为抽象类<br>或者你也可以把他作为一个基类-&gt; 通过继承一个派生类去实现基类的一些方法</p><blockquote><p><code>基类</code>:父类，被继承的类<br>  <code>派生类</code>:子类，继承的类</p></blockquote><ol><li>通过<code>abstract</code> 去定义的类为抽象类,该类无法被实例化</li><li>通过<code>abstract</code> 去定义的方法为抽象方法,该类无法被实现</li><li>通过<code>abstract</code> 去定义的方法想要实现必须在派生类中去实现</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    print(): <span class="built_in">string</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">this</span>.name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//抽象方法不能具有实现</span></span><br><span class="line">    <span class="keyword">abstract</span> getName():<span class="built_in">string</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">// new A() --无法创建抽象类的实例</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">       <span class="built_in">super</span>(<span class="string">&#x27;小满&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    getName(): <span class="built_in">string</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">this</span>.name</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">let</span> b = <span class="keyword">new</span> B();</span><br><span class="line"> <span class="built_in">console</span>.log(b.getName());</span><br></pre></td></tr></table></figure><h2 id="Vue虚拟DMO"><a href="#Vue虚拟DMO" class="headerlink" title="Vue虚拟DMO"></a>Vue虚拟DMO</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置入参类型</span></span><br><span class="line"><span class="keyword">interface</span> VueOption &#123;</span><br><span class="line">   <span class="attr">el</span>: <span class="built_in">string</span> | HTMLElement</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> VNode &#123;</span><br><span class="line">   <span class="attr">tag</span>: <span class="built_in">string</span> | HTMLElement,</span><br><span class="line">   text?: <span class="built_in">string</span>,</span><br><span class="line">   props?: &#123;</span><br><span class="line">      <span class="keyword">readonly</span> id: <span class="built_in">string</span> | <span class="built_in">number</span>,</span><br><span class="line">      <span class="attr">key</span>: <span class="built_in">number</span> | <span class="built_in">string</span> | <span class="built_in">object</span></span><br><span class="line">   &#125;,</span><br><span class="line">   children?: VNode[]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置class类型</span></span><br><span class="line"><span class="keyword">interface</span> VueCls &#123;</span><br><span class="line">   <span class="attr">option</span>: VueOption,</span><br><span class="line">   <span class="attr">init</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SetDom</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123; &#125;</span><br><span class="line">   <span class="keyword">protected</span> createElement(el: <span class="built_in">string</span> | HTMLElement): HTMLElement &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">typeof</span> el === <span class="string">&#x27;string&#x27;</span> ? <span class="built_in">document</span>.createElement(el) : el</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">protected</span> <span class="function"><span class="title">setText</span>(<span class="params">el: HTMLElement, text: <span class="built_in">string</span> | <span class="literal">null</span></span>)</span> &#123;</span><br><span class="line">      el.textContent = text;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="title">setProps</span>(<span class="params">el: HTMLElement, props: <span class="built_in">object</span> | <span class="literal">null</span></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(props)</span><br><span class="line">      <span class="keyword">if</span> (props) &#123;</span><br><span class="line">         <span class="built_in">Object</span>.entries(props).forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            el.setAttribute(item[<span class="number">0</span>], item[<span class="number">1</span>]);</span><br><span class="line">         &#125;)</span><br><span class="line">         <span class="built_in">console</span>.log(el)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> render(createElement: VNode): HTMLElement &#123;</span><br><span class="line">      <span class="keyword">const</span> el = <span class="built_in">this</span>.createElement(createElement.tag)</span><br><span class="line">      <span class="built_in">this</span>.setProps(el, createElement.props ?? <span class="literal">null</span>)<span class="comment">//设置属性</span></span><br><span class="line">      <span class="built_in">this</span>.setText(el, createElement.text ?? <span class="literal">null</span>)<span class="comment">//设置值</span></span><br><span class="line">      <span class="keyword">if</span> (createElement?.children &amp;&amp; <span class="built_in">Array</span>.isArray(createElement?.children)) &#123;</span><br><span class="line">         createElement.children.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> childNode = <span class="built_in">this</span>.render(item);</span><br><span class="line">            <span class="built_in">this</span>.setText(childNode, item.text ?? <span class="literal">null</span>)<span class="comment">//设置值</span></span><br><span class="line">            el.appendChild(childNode)</span><br><span class="line">         &#125;)</span><br><span class="line"></span><br><span class="line">      &#125; </span><br><span class="line">      <span class="keyword">return</span> el;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vue</span> <span class="keyword">extends</span> <span class="title">SetDom</span> <span class="title">implements</span> <span class="title">VueCls</span> </span>&#123;</span><br><span class="line">   <span class="attr">option</span>: VueOption</span><br><span class="line">   <span class="function"><span class="title">constructor</span>(<span class="params">option: VueOption</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>();</span><br><span class="line">      <span class="built_in">this</span>.option = option;</span><br><span class="line">      <span class="built_in">this</span>.init()</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="title">init</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> app = <span class="keyword">typeof</span> <span class="built_in">this</span>.option.el == <span class="string">&#x27;string&#x27;</span> ? <span class="built_in">document</span>.querySelector(<span class="built_in">this</span>.option.el) : <span class="built_in">this</span>.option.el;</span><br><span class="line">      <span class="keyword">let</span> VData: VNode = &#123;</span><br><span class="line">         <span class="attr">tag</span>: <span class="string">&quot;div&quot;</span>,</span><br><span class="line">         <span class="attr">props</span>: &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">key</span>: <span class="number">1</span></span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="attr">children</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">               <span class="attr">tag</span>: <span class="string">&quot;div&quot;</span>,</span><br><span class="line">               <span class="attr">text</span>: <span class="string">&quot;子集1&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">               <span class="attr">tag</span>: <span class="string">&quot;div&quot;</span>,</span><br><span class="line">               <span class="attr">text</span>: <span class="string">&quot;子集2&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">         ]</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      app?.appendChild(<span class="built_in">this</span>.render(VData))</span><br><span class="line">      <span class="built_in">this</span>.mount(app <span class="keyword">as</span> Element)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="title">mount</span>(<span class="params">app: Element</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">document</span>.body.append(app)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//静态函数</span></span><br><span class="line">   <span class="keyword">static</span> <span class="function"><span class="title">version</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;1.0.0&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> v = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">   <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(Vue.version())</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Class类&quot;&gt;&lt;a href=&quot;#Class类&quot; class=&quot;headerlink&quot; title=&quot;Class类&quot;&gt;&lt;/a&gt;Class类&lt;/h1&gt;&lt;h2 id=&quot;定义类&quot;&gt;&lt;a href=&quot;#定义类&quot; class=&quot;headerlink&quot; title=&quot;定义类</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="https://halely.github.io/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://halely.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScrip-学习（二）</title>
    <link href="https://halely.github.io/2023/04/24/TypeScrip-%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://halely.github.io/2023/04/24/TypeScrip-%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2023-04-24T07:45:51.000Z</published>
    <updated>2023-08-31T05:49:12.627Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>继续上级第一章的学习</p><h1 id="类型断言-联合类型-交叉类型"><a href="#类型断言-联合类型-交叉类型" class="headerlink" title="类型断言 | 联合类型 | 交叉类型"></a>类型断言 | 联合类型 | 交叉类型</h1><h2 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例如我们的手机号通常是13XXXXXXX 为数字类型 这时候产品说需要支持座机</span></span><br><span class="line"><span class="comment">//所以我们就可以使用联合类型支持座机字符串</span></span><br><span class="line"><span class="keyword">let</span> myPhone: <span class="built_in">number</span> | <span class="built_in">string</span>  = <span class="string">&#x27;010-820&#x27;</span></span><br><span class="line"><span class="comment">//这样写是会报错的应为我们的联合类型只有数字和字符串并没有布尔值</span></span><br><span class="line"><span class="keyword">let</span> myPhone: <span class="built_in">number</span> | <span class="built_in">string</span>  = <span class="literal">true</span></span><br><span class="line"><span class="comment">//函数使用联合类型</span></span><br><span class="line"><span class="keyword">const</span> fn = (something:<span class="built_in">number</span> | <span class="built_in">boolean</span>):<span class="function"><span class="params">boolean</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> !!something</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h2><p>多种类型的集合，联合对象将具有所联合类型的所有成员</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> People &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>,</span><br><span class="line">  height： <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Man&#123;</span><br><span class="line">  <span class="attr">sex</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> haleFn = <span class="function">(<span class="params">man: People &amp; Man</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(man.age)</span><br><span class="line">  <span class="built_in">console</span>.log(man.height)</span><br><span class="line">  <span class="built_in">console</span>.log(man.sex)</span><br><span class="line">&#125;</span><br><span class="line">haleFn(&#123;<span class="attr">age</span>: <span class="number">18</span>,<span class="attr">height</span>: <span class="number">180</span>,<span class="attr">sex</span>: <span class="string">&#x27;male&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure><h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><blockquote><p>语法法：[值] <code>as</code> [类型]或<code>&lt;类型&gt;</code>[值]: <code>value as string</code>or<code>&lt;string&gt;value</code></p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">       <span class="attr">run</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> B &#123;</span><br><span class="line">       <span class="attr">build</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> fn = (<span class="keyword">type</span>: A | B): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> (<span class="keyword">type</span> <span class="keyword">as</span> A).run</span><br><span class="line">       <span class="comment">//return (&lt;A&gt;type).run</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可以使用类型断言来推断他传入的是A接口的值</span></span><br></pre></td></tr></table></figure><p>需要注意的是，类型断言只能够 <strong>「欺骗」</strong> TypeScript 编译器，无法避免运行时的错误，反而滥用类型断言可能会导致运行时错误：</p><p><strong>加餐</strong></p><ul><li><p><code>使用any临时断言</code></p>  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">window</span> <span class="keyword">as</span> <span class="built_in">any</span>).abc = <span class="number">123</span></span><br><span class="line"><span class="comment">//可以使用any临时断言在 any 类型的变量上，访问任何属性都是允许的。</span></span><br></pre></td></tr></table></figure></li><li><p><code>as const</code><br> 是对字面值的断言，与const直接定义常量是有区别的<br> 如果是普通类型跟直接const 声明是一样的</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> names = <span class="string">&#x27;小满&#x27;</span></span><br><span class="line">names = <span class="string">&#x27;aa&#x27;</span> <span class="comment">//无法修改</span></span><br><span class="line"><span class="keyword">let</span> names2 = <span class="string">&#x27;小满&#x27;</span> <span class="keyword">as</span> <span class="keyword">const</span></span><br><span class="line">names2 = <span class="string">&#x27;aa&#x27;</span> <span class="comment">//无法修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">let</span> a1 = [<span class="number">10</span>, <span class="number">20</span>] <span class="keyword">as</span> <span class="keyword">const</span>;</span><br><span class="line"><span class="keyword">const</span> a2 = [<span class="number">10</span>, <span class="number">20</span>];</span><br><span class="line">a1.unshift(<span class="number">30</span>); <span class="comment">// 错误，此时已经断言字面量为[10, 20],数据无法做任何修改</span></span><br><span class="line">a2.unshift(<span class="number">30</span>); <span class="comment">// 通过，没有修改指针</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h1><h2 id="ECMAScript-的内置对象"><a href="#ECMAScript-的内置对象" class="headerlink" title="ECMAScript 的内置对象"></a>ECMAScript 的内置对象</h2><p><code>Boolean</code>、<code>Number</code>、<code>String</code>、<code>RegExp</code>、<code>Date</code>、<code>Error</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b: <span class="built_in">Boolean</span> = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">let</span> n: <span class="built_in">Number</span> = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="keyword">let</span> s: <span class="built_in">String</span> = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> d: <span class="built_in">Date</span> = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"><span class="keyword">let</span> r: <span class="built_in">RegExp</span> =<span class="regexp">/\[bc\]at/i</span>; <span class="comment">//new RegExp(&quot;\\[bc\\]at&quot;, &quot;i&quot;)</span></span><br><span class="line"><span class="keyword">let</span> e: <span class="built_in">Error</span> = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;error!&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>加餐</strong></p><p><code>Promise</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">promise</span>(<span class="params"></span>):<span class="title">Promise</span>&lt;<span class="title">number</span>&gt;</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>&lt;<span class="built_in">number</span>&gt;(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">       resolve(<span class="number">1</span>)</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br><span class="line">promise().then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="DOM-和-BOM-的内置对象"><a href="#DOM-和-BOM-的内置对象" class="headerlink" title="DOM 和 BOM 的内置对象"></a>DOM 和 BOM 的内置对象</h2><p><code>Document</code>、<code>HTMLElement</code>、<code>Event</code>、<code>NodeList</code> 等</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> body: HTMLElement = <span class="built_in">document</span>.body;</span><br><span class="line"><span class="keyword">let</span> allDiv: NodeList = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="comment">//读取div 这种需要类型断言 或者加个判断应为读不到返回null</span></span><br><span class="line"><span class="keyword">let</span> div:HTMLElement = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>) <span class="keyword">as</span> HTMLDivElement</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e: MouseEvent</span>) </span>&#123;&#125;);</span><br><span class="line"><span class="comment">//dom元素的映射表</span></span><br><span class="line"><span class="keyword">interface</span> HTMLElementTagNameMap &#123;</span><br><span class="line">    <span class="string">&quot;a&quot;</span>: HTMLAnchorElement;</span><br><span class="line">    <span class="string">&quot;abbr&quot;</span>: HTMLElement;</span><br><span class="line">    <span class="string">&quot;address&quot;</span>: HTMLElement;</span><br><span class="line">    <span class="string">&quot;applet&quot;</span>: HTMLAppletElement;</span><br><span class="line">    <span class="string">&quot;area&quot;</span>: HTMLAreaElement;</span><br><span class="line">    <span class="string">&quot;article&quot;</span>: HTMLElement;</span><br><span class="line">    <span class="string">&quot;aside&quot;</span>: HTMLElement;</span><br><span class="line">    <span class="string">&quot;audio&quot;</span>: HTMLAudioElement;</span><br><span class="line">    <span class="string">&quot;b&quot;</span>: HTMLElement;</span><br><span class="line">    <span class="string">&quot;base&quot;</span>: HTMLBaseElement;</span><br><span class="line">    <span class="string">&quot;bdi&quot;</span>: HTMLElement;</span><br><span class="line">    <span class="string">&quot;bdo&quot;</span>: HTMLElement;</span><br><span class="line">    <span class="string">&quot;blockquote&quot;</span>: HTMLQuoteElement;</span><br><span class="line">    <span class="string">&quot;body&quot;</span>: HTMLBodyElement;</span><br><span class="line">    <span class="string">&quot;br&quot;</span>: HTMLBRElement;</span><br><span class="line">    <span class="string">&quot;button&quot;</span>: HTMLButtonElement;</span><br><span class="line">    <span class="string">&quot;canvas&quot;</span>: HTMLCanvasElement;</span><br><span class="line">    <span class="string">&quot;caption&quot;</span>: HTMLTableCaptionElement;</span><br><span class="line">    <span class="string">&quot;cite&quot;</span>: HTMLElement;</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: HTMLElement;</span><br><span class="line">    <span class="string">&quot;col&quot;</span>: HTMLTableColElement;</span><br><span class="line">    <span class="string">&quot;colgroup&quot;</span>: HTMLTableColElement;</span><br><span class="line">    <span class="string">&quot;data&quot;</span>: HTMLDataElement;</span><br><span class="line">    <span class="string">&quot;datalist&quot;</span>: HTMLDataListElement;</span><br><span class="line">    <span class="string">&quot;dd&quot;</span>: HTMLElement;</span><br><span class="line">    <span class="string">&quot;del&quot;</span>: HTMLModElement;</span><br><span class="line">    <span class="string">&quot;details&quot;</span>: HTMLDetailsElement;</span><br><span class="line">    <span class="string">&quot;dfn&quot;</span>: HTMLElement;</span><br><span class="line">    <span class="string">&quot;dialog&quot;</span>: HTMLDialogElement;</span><br><span class="line">    <span class="string">&quot;dir&quot;</span>: HTMLDirectoryElement;</span><br><span class="line">    <span class="string">&quot;div&quot;</span>: HTMLDivElement;</span><br><span class="line">    <span class="string">&quot;dl&quot;</span>: HTMLDListElement;</span><br><span class="line">    <span class="string">&quot;dt&quot;</span>: HTMLElement;</span><br><span class="line">    <span class="string">&quot;em&quot;</span>: HTMLElement;</span><br><span class="line">    <span class="string">&quot;embed&quot;</span>: HTMLEmbedElement;</span><br><span class="line">    <span class="string">&quot;fieldset&quot;</span>: HTMLFieldSetElement;</span><br><span class="line">    <span class="string">&quot;figcaption&quot;</span>: HTMLElement;</span><br><span class="line">    <span class="string">&quot;figure&quot;</span>: HTMLElement;</span><br><span class="line">    <span class="string">&quot;font&quot;</span>: HTMLFontElement;</span><br><span class="line">    <span class="string">&quot;footer&quot;</span>: HTMLElement;</span><br><span class="line">    <span class="string">&quot;form&quot;</span>: HTMLFormElement;</span><br><span class="line">    <span class="string">&quot;frame&quot;</span>: HTMLFrameElement;</span><br><span class="line">    <span class="string">&quot;frameset&quot;</span>: HTMLFrameSetElement;</span><br><span class="line">    <span class="string">&quot;h1&quot;</span>: HTMLHeadingElement;</span><br><span class="line">    <span class="string">&quot;h2&quot;</span>: HTMLHeadingElement;</span><br><span class="line">    <span class="string">&quot;h3&quot;</span>: HTMLHeadingElement;</span><br><span class="line">    <span class="string">&quot;h4&quot;</span>: HTMLHeadingElement;</span><br><span class="line">    <span class="string">&quot;h5&quot;</span>: HTMLHeadingElement;</span><br><span class="line">    <span class="string">&quot;h6&quot;</span>: HTMLHeadingElement;</span><br><span class="line">    <span class="string">&quot;head&quot;</span>: HTMLHeadElement;</span><br><span class="line">    <span class="string">&quot;header&quot;</span>: HTMLElement;</span><br><span class="line">    <span class="string">&quot;hgroup&quot;</span>: HTMLElement;</span><br><span class="line">    <span class="string">&quot;hr&quot;</span>: HTMLHRElement;</span><br><span class="line">    <span class="string">&quot;html&quot;</span>: HTMLHtmlElement;</span><br><span class="line">    <span class="string">&quot;i&quot;</span>: HTMLElement;</span><br><span class="line">    <span class="string">&quot;iframe&quot;</span>: HTMLIFrameElement;</span><br><span class="line">    <span class="string">&quot;img&quot;</span>: HTMLImageElement;</span><br><span class="line">    <span class="string">&quot;input&quot;</span>: HTMLInputElement;</span><br><span class="line">    <span class="string">&quot;ins&quot;</span>: HTMLModElement;</span><br><span class="line">    <span class="string">&quot;kbd&quot;</span>: HTMLElement;</span><br><span class="line">    <span class="string">&quot;label&quot;</span>: HTMLLabelElement;</span><br><span class="line">    <span class="string">&quot;legend&quot;</span>: HTMLLegendElement;</span><br><span class="line">    <span class="string">&quot;li&quot;</span>: HTMLLIElement;</span><br><span class="line">    <span class="string">&quot;link&quot;</span>: HTMLLinkElement;</span><br><span class="line">    <span class="string">&quot;main&quot;</span>: HTMLElement;</span><br><span class="line">    <span class="string">&quot;map&quot;</span>: HTMLMapElement;</span><br><span class="line">    <span class="string">&quot;mark&quot;</span>: HTMLElement;</span><br><span class="line">    <span class="string">&quot;marquee&quot;</span>: HTMLMarqueeElement;</span><br><span class="line">    <span class="string">&quot;menu&quot;</span>: HTMLMenuElement;</span><br><span class="line">    <span class="string">&quot;meta&quot;</span>: HTMLMetaElement;</span><br><span class="line">    <span class="string">&quot;meter&quot;</span>: HTMLMeterElement;</span><br><span class="line">    <span class="string">&quot;nav&quot;</span>: HTMLElement;</span><br><span class="line">    <span class="string">&quot;noscript&quot;</span>: HTMLElement;</span><br><span class="line">    <span class="string">&quot;object&quot;</span>: HTMLObjectElement;</span><br><span class="line">    <span class="string">&quot;ol&quot;</span>: HTMLOListElement;</span><br><span class="line">    <span class="string">&quot;optgroup&quot;</span>: HTMLOptGroupElement;</span><br><span class="line">    <span class="string">&quot;option&quot;</span>: HTMLOptionElement;</span><br><span class="line">    <span class="string">&quot;output&quot;</span>: HTMLOutputElement;</span><br><span class="line">    <span class="string">&quot;p&quot;</span>: HTMLParagraphElement;</span><br><span class="line">    <span class="string">&quot;param&quot;</span>: HTMLParamElement;</span><br><span class="line">    <span class="string">&quot;picture&quot;</span>: HTMLPictureElement;</span><br><span class="line">    <span class="string">&quot;pre&quot;</span>: HTMLPreElement;</span><br><span class="line">    <span class="string">&quot;progress&quot;</span>: HTMLProgressElement;</span><br><span class="line">    <span class="string">&quot;q&quot;</span>: HTMLQuoteElement;</span><br><span class="line">    <span class="string">&quot;rp&quot;</span>: HTMLElement;</span><br><span class="line">    <span class="string">&quot;rt&quot;</span>: HTMLElement;</span><br><span class="line">    <span class="string">&quot;ruby&quot;</span>: HTMLElement;</span><br><span class="line">    <span class="string">&quot;s&quot;</span>: HTMLElement;</span><br><span class="line">    <span class="string">&quot;samp&quot;</span>: HTMLElement;</span><br><span class="line">    <span class="string">&quot;script&quot;</span>: HTMLScriptElement;</span><br><span class="line">    <span class="string">&quot;section&quot;</span>: HTMLElement;</span><br><span class="line">    <span class="string">&quot;select&quot;</span>: HTMLSelectElement;</span><br><span class="line">    <span class="string">&quot;slot&quot;</span>: HTMLSlotElement;</span><br><span class="line">    <span class="string">&quot;small&quot;</span>: HTMLElement;</span><br><span class="line">    <span class="string">&quot;source&quot;</span>: HTMLSourceElement;</span><br><span class="line">    <span class="string">&quot;span&quot;</span>: HTMLSpanElement;</span><br><span class="line">    <span class="string">&quot;strong&quot;</span>: HTMLElement;</span><br><span class="line">    <span class="string">&quot;style&quot;</span>: HTMLStyleElement;</span><br><span class="line">    <span class="string">&quot;sub&quot;</span>: HTMLElement;</span><br><span class="line">    <span class="string">&quot;summary&quot;</span>: HTMLElement;</span><br><span class="line">    <span class="string">&quot;sup&quot;</span>: HTMLElement;</span><br><span class="line">    <span class="string">&quot;table&quot;</span>: HTMLTableElement;</span><br><span class="line">    <span class="string">&quot;tbody&quot;</span>: HTMLTableSectionElement;</span><br><span class="line">    <span class="string">&quot;td&quot;</span>: HTMLTableDataCellElement;</span><br><span class="line">    <span class="string">&quot;template&quot;</span>: HTMLTemplateElement;</span><br><span class="line">    <span class="string">&quot;textarea&quot;</span>: HTMLTextAreaElement;</span><br><span class="line">    <span class="string">&quot;tfoot&quot;</span>: HTMLTableSectionElement;</span><br><span class="line">    <span class="string">&quot;th&quot;</span>: HTMLTableHeaderCellElement;</span><br><span class="line">    <span class="string">&quot;thead&quot;</span>: HTMLTableSectionElement;</span><br><span class="line">    <span class="string">&quot;time&quot;</span>: HTMLTimeElement;</span><br><span class="line">    <span class="string">&quot;title&quot;</span>: HTMLTitleElement;</span><br><span class="line">    <span class="string">&quot;tr&quot;</span>: HTMLTableRowElement;</span><br><span class="line">    <span class="string">&quot;track&quot;</span>: HTMLTrackElement;</span><br><span class="line">    <span class="string">&quot;u&quot;</span>: HTMLElement;</span><br><span class="line">    <span class="string">&quot;ul&quot;</span>: HTMLUListElement;</span><br><span class="line">    <span class="string">&quot;var&quot;</span>: HTMLElement;</span><br><span class="line">    <span class="string">&quot;video&quot;</span>: HTMLVideoElement;</span><br><span class="line">    <span class="string">&quot;wbr&quot;</span>: HTMLElement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>加餐</strong></p><p><code>代码雨</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> canvas = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#canvas&#x27;</span>) <span class="keyword">as</span> HTMLCanvasElement</span><br><span class="line"><span class="keyword">let</span> ctx = canvas.getContext(<span class="string">&#x27;2d&#x27;</span>) <span class="keyword">as</span> CanvasRenderingContext2D</span><br><span class="line">canvas.height = screen.availHeight; <span class="comment">//可视区域的高度</span></span><br><span class="line">canvas.width = screen.availWidth; <span class="comment">//可视区域的宽度</span></span><br><span class="line"><span class="keyword">let</span> randomStr: <span class="built_in">string</span>[] = <span class="string">&#x27;XMZSHALEYZJXMFCLDD0011HS&#x27;</span>.split(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment">//创建宽度数量的默认填充数组获取宽度例如1920 / 10 192</span></span><br><span class="line"><span class="keyword">let</span> byteArr = <span class="built_in">Array</span>(<span class="built_in">Math</span>.ceil(canvas.width / <span class="number">10</span>)).fill(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rain = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    ctx.fillStyle = <span class="string">&#x27;rgba(0,0,0,0.05)&#x27;</span><span class="comment">//填充背景颜色</span></span><br><span class="line">    ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height,)</span><br><span class="line">    ctx.fillStyle = <span class="string">&quot;#0f0&quot;</span>; <span class="comment">//文字颜色</span></span><br><span class="line">    byteArr.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">        ctx.fillText(randomStr[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * randomStr.length)], index * <span class="number">10</span>, item + <span class="number">10</span>);</span><br><span class="line">        byteArr[index] = item &gt; canvas.height || item &gt; (<span class="number">10000</span> * <span class="built_in">Math</span>.random()) ? <span class="number">0</span> : item + <span class="number">10</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setInterval</span>(rain, <span class="number">40</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;继续上级第一章的学习&lt;/p&gt;
&lt;h1 id=&quot;类型断言-联合类型-交叉类型&quot;&gt;&lt;a href=&quot;#类型断言-联合类型-交叉类型&quot; class</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="https://halely.github.io/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://halely.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScrip 学习（一）</title>
    <link href="https://halely.github.io/2023/04/20/TypeScrip-%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://halely.github.io/2023/04/20/TypeScrip-%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2023-04-20T08:05:32.000Z</published>
    <updated>2023-08-31T05:36:14.774Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>目前，JavaScript已经成为编写网页和应用程序的主要语言，前端也在一个产品中的权重越来越大，但是因为JavaScript设计之初的先天问题，导致JavaScript创建大型复杂Web应用系统很困难，也很难维护。</p><p>比如 <code>JavaScript</code>的数据类型是不确定的，可以进行<strong>隐式转换</strong>，导致很多错误在运行的时候才能发现，这就需要开发使用更多的精力去检查代码；</p><p>而TypeScript能解决这些问题，甚至他是JS的超集，JS有的我都有，JS没有的我也有，总之我是前端版<em>西厂对东厂</em>。</p><h1 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install typescript -g </span><br><span class="line">tsc -v </span><br></pre></td></tr></table></figure><p>以上为安装和查看安装的版本</p><p>我们创建一个ts文件，然后使用 <code>tsc [文件名]</code> 就可以执行生成一个解析的js文件<br>当我们需要配置ts我们可以执行<code>tsc -init</code>去创建 <code>tsconfig.json</code> 文件<br>例如我们取消严格模式的时候可以在该文件中修改<code>strict:false</code></p><p>为了方便我们学习我们需要借用一些工具<br>全局安装 ts 的编译工具，使用 ts-node 可以将 ts 文件执行</p><ul><li><p><code>npm i ts-node -g</code></p><ul><li>使用：<code>ts-node index.ts</code></li></ul><p> 这时候我们就可以直接执行 <code>ts-node [文件名]</code> 且获取返回值了</p></li><li><p>安装 <code>ts-node</code> 依赖包：<code>npm install tslib @types/node -g</code></p></li><li><p>安装声明文件: <code>npm i @types/node --save-dev</code>（node环境支持的依赖必装）</p></li></ul><h2 id="TS类型"><a href="#TS类型" class="headerlink" title="TS类型"></a>TS类型</h2><ul><li>TS 出现弥补的 JS 的类型缺失</li><li>众所周知，代码错误越早发现越好，代码编写 &gt; 代码编译 &gt; 代码运行   开发 &gt; 测试 &gt; 上线</li><li>Vue2 使用 Flow 进行类型检查，后续 Vue3 也使用 Typescript 重写</li><li>TS 代码要运行在浏览器，需要进行类型擦除，转换为 JS 代码</li><li>TS 类型包含所有 JS 类型 <code>null</code>、<code>undefined</code>、<code>string</code>、<code>number</code>、<code>boolean</code>、<code>bigInt (ES10)</code>、<code>Symbol(ES6)</code>、<code>object</code>（数组，对象，函数，日期）</li><li>还包含 <code>void</code>、<code>never</code>、<code>enum</code>、<code>unknown</code>、<code>any</code> 以及 自定义的 <code>type</code> 和 <code>interface</code></li></ul><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a><strong>字符串类型</strong></h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符串是使用string定义的</span></span><br><span class="line"><span class="keyword">let</span> a: <span class="built_in">string</span> = <span class="string">&#x27;hale&#x27;</span></span><br><span class="line"><span class="comment">//普通声明</span></span><br><span class="line"><span class="comment">//也可以使用es6的字符串模板</span></span><br><span class="line"><span class="keyword">let</span> str: <span class="built_in">string</span> = <span class="string">`ly<span class="subst">$&#123;a&#125;</span>`</span></span><br></pre></td></tr></table></figure><h3 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a><strong>数字类型</strong></h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> notANumber: <span class="built_in">number</span> = <span class="literal">NaN</span>;<span class="comment">//Nan</span></span><br><span class="line"><span class="keyword">let</span> num: <span class="built_in">number</span> = <span class="number">123</span>;<span class="comment">//普通数字</span></span><br><span class="line"><span class="keyword">let</span> infinityNumber: <span class="built_in">number</span> = <span class="literal">Infinity</span>;<span class="comment">//无穷大</span></span><br><span class="line"><span class="keyword">let</span> decimal: <span class="built_in">number</span> = <span class="number">6</span>;<span class="comment">//十进制</span></span><br><span class="line"><span class="keyword">let</span> hex: <span class="built_in">number</span> = <span class="number">0xf00d</span>;<span class="comment">//十六进制</span></span><br><span class="line"><span class="keyword">let</span> binary: <span class="built_in">number</span> = <span class="number">0b1010</span>;<span class="comment">//二进制</span></span><br><span class="line"><span class="keyword">let</span> octal: <span class="built_in">number</span> = <span class="number">0o744</span>;<span class="comment">//八进制s</span></span><br><span class="line"><span class="comment">//支持十六进制、十进制、八进制和二进制；</span></span><br></pre></td></tr></table></figure><h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a><strong>布尔类型</strong></h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> booleand: <span class="built_in">boolean</span> = <span class="literal">true</span> <span class="comment">//可以直接使用布尔值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意 使用构造函数 Boolean 创造的对象不是布尔值：</span></span><br><span class="line"><span class="keyword">let</span> createdBoolean: <span class="built_in">boolean</span> = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="number">1</span>) </span><br><span class="line"><span class="comment">//这样会报错 应为事实上 new Boolean() 返回的是一个 Boolean 对象 </span></span><br><span class="line"><span class="comment">//所以需要写成</span></span><br><span class="line"><span class="keyword">let</span> createdBoolean1: <span class="built_in">Boolean</span> = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="number">1</span>) </span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"><span class="keyword">let</span> createdBoolean2: <span class="built_in">boolean</span> = <span class="built_in">Boolean</span>(<span class="number">1</span>) </span><br></pre></td></tr></table></figure><h3 id="空值类型"><a href="#空值类型" class="headerlink" title="空值类型"></a><strong>空值类型</strong></h3><p><code>JavaScript</code> 没有空值（Void）的概念，在 <code>TypeScript</code> 中，可以用 <code>void</code> 表示没有任何返回值的函数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">voidFn</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;test void&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//void 类型的用法，主要是用在我们不希望调用者关心函数返回值的情况下，比如通常的异步回调函数</span></span><br></pre></td></tr></table></figure><p><strong>void也可以定义undefined 和 null类型,但是这需要取消严格模式</strong></p><h3 id="Null和undefined类型"><a href="#Null和undefined类型" class="headerlink" title="Null和undefined类型"></a><strong>Null和undefined类型</strong></h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">undefined</span>;<span class="comment">//定义undefined</span></span><br><span class="line"><span class="keyword">let</span> n: <span class="literal">null</span> = <span class="literal">null</span>;<span class="comment">//定义null</span></span><br></pre></td></tr></table></figure><blockquote><p>void 和 undefined 和 null 最大的区别:undefined 和 null 是所有类型的子类型。也就是说 undefined 类型的变量，可以赋值给 string 类型的变量：</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//非严格模式</span></span><br><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">undefined</span>;<span class="comment">//定义undefined</span></span><br><span class="line"><span class="keyword">let</span> n: <span class="literal">null</span> = <span class="literal">null</span>;<span class="comment">//定义null</span></span><br><span class="line"><span class="keyword">let</span> v:<span class="built_in">void</span>=<span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> str=<span class="string">&#x27;hale&#x27;</span>;</span><br><span class="line">str=u;</span><br><span class="line">str=n;</span><br><span class="line">str=v; <span class="comment">// TODO 不支持</span></span><br></pre></td></tr></table></figure><h3 id="Any-类型-和-unknown-（顶级类型-任意类型）"><a href="#Any-类型-和-unknown-（顶级类型-任意类型）" class="headerlink" title="Any 类型 和 unknown （顶级类型|任意类型）"></a><strong>Any 类型 和 unknown （顶级类型|任意类型）</strong></h3><ul><li>1.没有强制限定哪种类型，随时切换类型都可以 我们可以对 <code>any</code> 进行任何操作，不需要检查类型</li><li>2.声明变量的时候没有指定任意类型默认为<code>any</code></li><li>3.弊端如果使用<code>any</code> 就失去了TS类型检测的作用</li><li>4.<code>TypeScript 3.0</code>中引入的 <code>unknown</code> 类型也被认为是 <code>top type</code> ，但它更安全。与 <code>any</code> 一样，所有类型都可以分配给<code>unknown</code>.</li></ul><blockquote><p><code>unknow</code>:  <code>unknow</code>类型比<code>any</code>更加严格当你要使用<code>any</code> 的时候可以尝试使用<code>unknow</code>,因为<code>unknow</code>只能赋值自身或者<code>any</code>，且<code>unknow</code>不能读到自身任何属性</p></blockquote><h3 id="接口和对象类型"><a href="#接口和对象类型" class="headerlink" title="接口和对象类型"></a><strong>接口和对象类型</strong></h3><p>对于对象类型容易搞混的是<code>object</code>、<code>Object</code> 以及<code>&#123;&#125;</code>，那么他们有什么区别呢。</p><ul><li><p><code>Object</code><br><code>Object</code>类型是所有<code>Object</code>类的实例的类型。 由以下两个接口来定义：</p><ul><li><p><code>Object</code> 接口定义了 <code>Object.prototype</code>原型对象上的属性；</p></li><li><p><code>ObjectConstructor</code> 接口定义了 <code>Object</code> 类的属性， 如上面提到的 <code>Object.create()</code>。</p><blockquote><p>这个类型是跟原型链有关的原型链顶层就是Object，所以值类型和引用类型最终都指向Object，他包含所有类型。</p></blockquote></li></ul></li><li><p><code>&#123;&#125;</code><br>  看起来很别扭的一个东西 你可以把他理解成new Object 就和我们的上面Object基本一样 包含所有类型</p>  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a1: &#123;&#125; = &#123;<span class="attr">name</span>:<span class="string">&#x27;hale&#x27;</span>&#125; <span class="comment">//正确</span></span><br><span class="line"><span class="keyword">let</span> a2: &#123;&#125; =  <span class="function">() =&gt;</span> <span class="number">123</span><span class="comment">//正确</span></span><br><span class="line"><span class="keyword">let</span> a3: &#123;&#125; = <span class="number">123</span><span class="comment">//正确</span></span><br></pre></td></tr></table></figure></li><li><p><code>object</code></p><p>  代表所有非值类型的类型，例如 数组 对象 函数等，常用于泛型约束</p>  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a1: <span class="built_in">object</span> = &#123;<span class="attr">name</span>:<span class="number">1</span>&#125; <span class="comment">//正确</span></span><br><span class="line"><span class="keyword">let</span> a2: <span class="built_in">object</span> =  <span class="function">() =&gt;</span> <span class="number">123</span><span class="comment">//正确</span></span><br><span class="line"><span class="keyword">let</span> a3: <span class="built_in">object</span> = <span class="number">123</span><span class="comment">//不正确</span></span><br></pre></td></tr></table></figure><p>  在TS中我们定义对象的方式要用关键字<code>interface</code>（接口），我的理解是使用<code>interface</code>来定义一种约束，让数据的结构满足约束的格式</p>  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    <span class="attr">d</span>:<span class="built_in">number</span> </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    <span class="attr">b</span>:<span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">a</span>:<span class="built_in">string</span>,</span><br><span class="line">    c?:<span class="built_in">number</span>,<span class="comment">//可选属性?,该属性可以不存在</span></span><br><span class="line">    [propName: <span class="built_in">string</span>]: <span class="built_in">any</span>;<span class="comment">//任意属性定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果重名，interface合并</span></span><br><span class="line"><span class="keyword">interface</span> Person <span class="keyword">extends</span>  &#123;</span><br><span class="line">    <span class="keyword">readonly</span> id:<span class="built_in">string</span>, <span class="comment">//只读属性是不允许被赋值的只能读取</span></span><br><span class="line">    <span class="attr">cb</span>:<span class="function">()=&gt;</span><span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person:Person  = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="string">&quot;hale&quot;</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="string">&#x27;man&#x27;</span>,</span><br><span class="line">    <span class="attr">d</span>:<span class="number">25</span></span><br><span class="line">    <span class="attr">cb</span>:<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">123</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个函数类型</span></span><br><span class="line"><span class="keyword">interface</span> Fn&#123;</span><br><span class="line">    (name:<span class="built_in">string</span>):<span class="built_in">number</span>[]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> fnHandle:Fn=<span class="function"><span class="keyword">function</span> (<span class="params">name:<span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">12</span>,<span class="number">13</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a><strong>数组类型</strong></h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类型数组</span></span><br><span class="line">    <span class="keyword">let</span> arr1:<span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]<span class="comment">// 数组中不能存在非number类型</span></span><br><span class="line">    <span class="comment">//如果是混合数组</span></span><br><span class="line">    <span class="keyword">let</span> arr2:<span class="built_in">any</span>[]=[<span class="number">1</span>,<span class="string">&#x27;2&#x27;</span>,<span class="literal">true</span>]</span><br><span class="line">    <span class="comment">//数组泛型</span></span><br><span class="line">    <span class="keyword">let</span> arr3:<span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">    <span class="comment">//接口数组</span></span><br><span class="line">    <span class="keyword">interface</span> ObjArray &#123;</span><br><span class="line">    <span class="attr">id</span>:<span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">num</span>:<span class="built_in">number</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> arr4:ObjArray[] = [&#123;<span class="attr">id</span>:<span class="string">&#x27;1&#x27;</span>,<span class="attr">num</span>:<span class="number">12</span>&#125;]</span><br><span class="line">    <span class="comment">//多维数组</span></span><br><span class="line">    <span class="keyword">let</span> arr5:<span class="built_in">number</span>[][] = [[<span class="number">1</span>,<span class="number">2</span>], [<span class="number">3</span>,<span class="number">4</span>]];</span><br><span class="line">    <span class="keyword">let</span> arr6:<span class="built_in">Array</span>&lt;<span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt;&gt; = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure><h3 id="元组-Tuple"><a href="#元组-Tuple" class="headerlink" title="元组 Tuple"></a><strong>元组 Tuple</strong></h3><blockquote><p>元组就是数组的变种<br> 元组（Tuple）是固定数量的不同类型的元素的组合</p></blockquote> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//元组与集合的不同之处在于，元组中的元素类型可以是不同的，而且数量固定</span></span><br><span class="line"><span class="keyword">let</span> arr:[<span class="built_in">number</span>,<span class="built_in">string</span>] = [<span class="number">1</span>,<span class="string">&#x27;hale&#x27;</span>]</span><br><span class="line"><span class="comment">//设置只读</span></span><br><span class="line"><span class="keyword">let</span> arr2: <span class="keyword">readonly</span> [<span class="built_in">number</span>,<span class="built_in">boolean</span>,<span class="built_in">string</span>,<span class="literal">undefined</span>] = [<span class="number">1</span>,<span class="literal">true</span>,<span class="string">&#x27;hale&#x27;</span>,<span class="literal">undefined</span>]</span><br><span class="line"><span class="comment">//设置可选</span></span><br><span class="line"><span class="keyword">let</span> a:[x:<span class="built_in">number</span>,y?:<span class="built_in">boolean</span>] = [<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p> 应用场景，前端导出excel文件的时候，后端返回数据</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">let</span> excel: [<span class="built_in">string</span>, <span class="built_in">string</span>, <span class="built_in">string</span>, <span class="built_in">number</span>][] = [</span><br><span class="line">   [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;man&#x27;</span>, <span class="number">1</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a><strong>函数类型</strong></h3><p><strong>基本函数类型</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意，参数不能多传，也不能少传 必须按照约定的类型来</span></span><br><span class="line"><span class="keyword">const</span> fn1 = (name: <span class="built_in">string</span>, <span class="attr">age</span>:<span class="built_in">number</span>): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> name + age</span><br><span class="line">&#125;</span><br><span class="line">fn1(<span class="string">&#x27;张三&#x27;</span>,<span class="number">18</span>)</span><br><span class="line"><span class="comment">//如果要少传可以给参数加上可选属性？或者 加上默认值，两者不能作用到同一个参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params">name:<span class="built_in">string</span>=<span class="string">&#x27;hale&#x27;</span>,age?:<span class="built_in">number</span></span>):<span class="title">string</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">    name,</span><br><span class="line">    age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">fn2(<span class="string">&#x27;张三&#x27;</span>,<span class="number">13</span>)</span><br><span class="line">fn2(<span class="string">&#x27;李四&#x27;</span>)</span><br><span class="line">fn2()</span><br><span class="line"><span class="comment">//接口定义函数</span></span><br><span class="line"><span class="comment">//定义参数 num 和 num2  ：后面定义返回值的类型</span></span><br><span class="line"><span class="keyword">interface</span> Add &#123;</span><br><span class="line">    (num:  <span class="built_in">number</span>, <span class="attr">num2</span>: <span class="built_in">number</span>): <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> fn3: Add = (num: <span class="built_in">number</span>, <span class="attr">num2</span>: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num + num2</span><br><span class="line">&#125;</span><br><span class="line">fn3(<span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line"><span class="keyword">interface</span> User&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserInfo</span>(<span class="params">user: User</span>): <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> user</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>扩展函数类型</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数this类型</span></span><br><span class="line"><span class="keyword">interface</span> User &#123;</span><br><span class="line">    <span class="attr">user</span>: <span class="built_in">number</span>[],</span><br><span class="line">    <span class="attr">add</span>: <span class="function">(<span class="params"><span class="built_in">this</span>:User,num: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ts 可以定义this的类型，且必须的第一个参数定义this,在js中是无法使用的，</span></span><br><span class="line"><span class="keyword">let</span> Obj: User = &#123;</span><br><span class="line">    <span class="attr">user</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="function"><span class="title">add</span>(<span class="params"><span class="built_in">this</span>: User, num:<span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.user.push(num)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Obj.add(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @description  函数重载</span></span><br><span class="line"><span class="comment"> * @1. 重载是方法名字相同，而参数不同，返回类型可以相同也可以不同。</span></span><br><span class="line"><span class="comment"> * @2. 如果参数类型不同，则参数类型应设置为 any。</span></span><br><span class="line"><span class="comment"> * @3 参数数量不同你可以将不同的参数设置为可选。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findNum</span>(<span class="params">add: <span class="built_in">number</span>[]</span>): <span class="title">number</span>[]</span>;<span class="comment">//如果是number类型数组.则是添加</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findNum</span>(<span class="params">is: <span class="built_in">number</span></span>): <span class="title">number</span></span>;<span class="comment">//如果是number字段.则是查找</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findNum</span>(<span class="params"></span>): <span class="title">number</span>[]</span>;<span class="comment">//如果是空，则返回全部</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findNum</span>(<span class="params">args?: <span class="built_in">number</span> | <span class="built_in">number</span>[]</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(args)) &#123;</span><br><span class="line">        num.push(...args);</span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> args == <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> args</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;目前，JavaScript已经成为编写网页和应用程序的主要语言，前端也在一个产品中的权重越来越大，但是因为JavaScript设计之初的先天</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="https://halely.github.io/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://halely.github.io/tags/TypeScript/"/>
    
  </entry>
  
</feed>
